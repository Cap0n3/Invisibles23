/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/@emailjs/browser/es/api/sendPost.js":
/*!**********************************************************!*\
  !*** ./node_modules/@emailjs/browser/es/api/sendPost.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"sendPost\": () => (/* binding */ sendPost)\n/* harmony export */ });\n/* harmony import */ var _models_EmailJSResponseStatus__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../models/EmailJSResponseStatus */ \"./node_modules/@emailjs/browser/es/models/EmailJSResponseStatus.js\");\n/* harmony import */ var _store_store__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../store/store */ \"./node_modules/@emailjs/browser/es/store/store.js\");\n\n\nconst sendPost = (url, data, headers = {}) => {\n    return new Promise((resolve, reject) => {\n        const xhr = new XMLHttpRequest();\n        xhr.addEventListener('load', ({ target }) => {\n            const responseStatus = new _models_EmailJSResponseStatus__WEBPACK_IMPORTED_MODULE_0__.EmailJSResponseStatus(target);\n            if (responseStatus.status === 200 || responseStatus.text === 'OK') {\n                resolve(responseStatus);\n            }\n            else {\n                reject(responseStatus);\n            }\n        });\n        xhr.addEventListener('error', ({ target }) => {\n            reject(new _models_EmailJSResponseStatus__WEBPACK_IMPORTED_MODULE_0__.EmailJSResponseStatus(target));\n        });\n        xhr.open('POST', _store_store__WEBPACK_IMPORTED_MODULE_1__.store._origin + url, true);\n        Object.keys(headers).forEach((key) => {\n            xhr.setRequestHeader(key, headers[key]);\n        });\n        xhr.send(data);\n    });\n};\n\n\n//# sourceURL=webpack://invisibles23/./node_modules/@emailjs/browser/es/api/sendPost.js?");

/***/ }),

/***/ "./node_modules/@emailjs/browser/es/index.js":
/*!***************************************************!*\
  !*** ./node_modules/@emailjs/browser/es/index.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   \"init\": () => (/* reexport safe */ _methods_init_init__WEBPACK_IMPORTED_MODULE_0__.init),\n/* harmony export */   \"send\": () => (/* reexport safe */ _methods_send_send__WEBPACK_IMPORTED_MODULE_1__.send),\n/* harmony export */   \"sendForm\": () => (/* reexport safe */ _methods_sendForm_sendForm__WEBPACK_IMPORTED_MODULE_2__.sendForm)\n/* harmony export */ });\n/* harmony import */ var _methods_init_init__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./methods/init/init */ \"./node_modules/@emailjs/browser/es/methods/init/init.js\");\n/* harmony import */ var _methods_send_send__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./methods/send/send */ \"./node_modules/@emailjs/browser/es/methods/send/send.js\");\n/* harmony import */ var _methods_sendForm_sendForm__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./methods/sendForm/sendForm */ \"./node_modules/@emailjs/browser/es/methods/sendForm/sendForm.js\");\n\n\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    init: _methods_init_init__WEBPACK_IMPORTED_MODULE_0__.init,\n    send: _methods_send_send__WEBPACK_IMPORTED_MODULE_1__.send,\n    sendForm: _methods_sendForm_sendForm__WEBPACK_IMPORTED_MODULE_2__.sendForm,\n});\n\n\n//# sourceURL=webpack://invisibles23/./node_modules/@emailjs/browser/es/index.js?");

/***/ }),

/***/ "./node_modules/@emailjs/browser/es/methods/init/init.js":
/*!***************************************************************!*\
  !*** ./node_modules/@emailjs/browser/es/methods/init/init.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"init\": () => (/* binding */ init)\n/* harmony export */ });\n/* harmony import */ var _store_store__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../store/store */ \"./node_modules/@emailjs/browser/es/store/store.js\");\n\n/**\n * Initiation\n * @param {string} publicKey - set the EmailJS public key\n * @param {string} origin - set the EmailJS origin\n */\nconst init = (publicKey, origin = 'https://api.emailjs.com') => {\n    _store_store__WEBPACK_IMPORTED_MODULE_0__.store._userID = publicKey;\n    _store_store__WEBPACK_IMPORTED_MODULE_0__.store._origin = origin;\n};\n\n\n//# sourceURL=webpack://invisibles23/./node_modules/@emailjs/browser/es/methods/init/init.js?");

/***/ }),

/***/ "./node_modules/@emailjs/browser/es/methods/send/send.js":
/*!***************************************************************!*\
  !*** ./node_modules/@emailjs/browser/es/methods/send/send.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"send\": () => (/* binding */ send)\n/* harmony export */ });\n/* harmony import */ var _store_store__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../store/store */ \"./node_modules/@emailjs/browser/es/store/store.js\");\n/* harmony import */ var _utils_validateParams__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/validateParams */ \"./node_modules/@emailjs/browser/es/utils/validateParams.js\");\n/* harmony import */ var _api_sendPost__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../api/sendPost */ \"./node_modules/@emailjs/browser/es/api/sendPost.js\");\n\n\n\n/**\n * Send a template to the specific EmailJS service\n * @param {string} serviceID - the EmailJS service ID\n * @param {string} templateID - the EmailJS template ID\n * @param {object} templatePrams - the template params, what will be set to the EmailJS template\n * @param {string} publicKey - the EmailJS public key\n * @returns {Promise<EmailJSResponseStatus>}\n */\nconst send = (serviceID, templateID, templatePrams, publicKey) => {\n    const uID = publicKey || _store_store__WEBPACK_IMPORTED_MODULE_0__.store._userID;\n    (0,_utils_validateParams__WEBPACK_IMPORTED_MODULE_1__.validateParams)(uID, serviceID, templateID);\n    const params = {\n        lib_version: '3.11.0',\n        user_id: uID,\n        service_id: serviceID,\n        template_id: templateID,\n        template_params: templatePrams,\n    };\n    return (0,_api_sendPost__WEBPACK_IMPORTED_MODULE_2__.sendPost)('/api/v1.0/email/send', JSON.stringify(params), {\n        'Content-type': 'application/json',\n    });\n};\n\n\n//# sourceURL=webpack://invisibles23/./node_modules/@emailjs/browser/es/methods/send/send.js?");

/***/ }),

/***/ "./node_modules/@emailjs/browser/es/methods/sendForm/sendForm.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@emailjs/browser/es/methods/sendForm/sendForm.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"sendForm\": () => (/* binding */ sendForm)\n/* harmony export */ });\n/* harmony import */ var _store_store__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../store/store */ \"./node_modules/@emailjs/browser/es/store/store.js\");\n/* harmony import */ var _utils_validateParams__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/validateParams */ \"./node_modules/@emailjs/browser/es/utils/validateParams.js\");\n/* harmony import */ var _api_sendPost__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../api/sendPost */ \"./node_modules/@emailjs/browser/es/api/sendPost.js\");\n\n\n\nconst findHTMLForm = (form) => {\n    let currentForm;\n    if (typeof form === 'string') {\n        currentForm = document.querySelector(form);\n    }\n    else {\n        currentForm = form;\n    }\n    if (!currentForm || currentForm.nodeName !== 'FORM') {\n        throw 'The 3rd parameter is expected to be the HTML form element or the style selector of form';\n    }\n    return currentForm;\n};\n/**\n * Send a form the specific EmailJS service\n * @param {string} serviceID - the EmailJS service ID\n * @param {string} templateID - the EmailJS template ID\n * @param {string | HTMLFormElement} form - the form element or selector\n * @param {string} publicKey - the EmailJS public key\n * @returns {Promise<EmailJSResponseStatus>}\n */\nconst sendForm = (serviceID, templateID, form, publicKey) => {\n    const uID = publicKey || _store_store__WEBPACK_IMPORTED_MODULE_0__.store._userID;\n    const currentForm = findHTMLForm(form);\n    (0,_utils_validateParams__WEBPACK_IMPORTED_MODULE_1__.validateParams)(uID, serviceID, templateID);\n    const formData = new FormData(currentForm);\n    formData.append('lib_version', '3.11.0');\n    formData.append('service_id', serviceID);\n    formData.append('template_id', templateID);\n    formData.append('user_id', uID);\n    return (0,_api_sendPost__WEBPACK_IMPORTED_MODULE_2__.sendPost)('/api/v1.0/email/send-form', formData);\n};\n\n\n//# sourceURL=webpack://invisibles23/./node_modules/@emailjs/browser/es/methods/sendForm/sendForm.js?");

/***/ }),

/***/ "./node_modules/@emailjs/browser/es/models/EmailJSResponseStatus.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@emailjs/browser/es/models/EmailJSResponseStatus.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"EmailJSResponseStatus\": () => (/* binding */ EmailJSResponseStatus)\n/* harmony export */ });\nclass EmailJSResponseStatus {\n    constructor(httpResponse) {\n        this.status = httpResponse ? httpResponse.status : 0;\n        this.text = httpResponse ? httpResponse.responseText : 'Network Error';\n    }\n}\n\n\n//# sourceURL=webpack://invisibles23/./node_modules/@emailjs/browser/es/models/EmailJSResponseStatus.js?");

/***/ }),

/***/ "./node_modules/@emailjs/browser/es/store/store.js":
/*!*********************************************************!*\
  !*** ./node_modules/@emailjs/browser/es/store/store.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"store\": () => (/* binding */ store)\n/* harmony export */ });\nconst store = {\n    _origin: 'https://api.emailjs.com',\n};\n\n\n//# sourceURL=webpack://invisibles23/./node_modules/@emailjs/browser/es/store/store.js?");

/***/ }),

/***/ "./node_modules/@emailjs/browser/es/utils/validateParams.js":
/*!******************************************************************!*\
  !*** ./node_modules/@emailjs/browser/es/utils/validateParams.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"validateParams\": () => (/* binding */ validateParams)\n/* harmony export */ });\nconst validateParams = (publicKey, serviceID, templateID) => {\n    if (!publicKey) {\n        throw 'The public key is required. Visit https://dashboard.emailjs.com/admin/account';\n    }\n    if (!serviceID) {\n        throw 'The service ID is required. Visit https://dashboard.emailjs.com/admin';\n    }\n    if (!templateID) {\n        throw 'The template ID is required. Visit https://dashboard.emailjs.com/admin/templates';\n    }\n    return true;\n};\n\n\n//# sourceURL=webpack://invisibles23/./node_modules/@emailjs/browser/es/utils/validateParams.js?");

/***/ }),

/***/ "./node_modules/@mailchimp/mailchimp_marketing/src/ApiClient.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@mailchimp/mailchimp_marketing/src/ApiClient.js ***!
  \**********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* provided dependency */ var Buffer = __webpack_require__(/*! ./node_modules/buffer/index.js */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n/**\n * Mailchimp Marketing API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.80\n * Contact: apihelp@mailchimp.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.7\n *\n * Do not edit the class manually.\n *\n */\n\nvar superagent = __webpack_require__(/*! superagent */ \"./node_modules/superagent/lib/client.js\");\nvar querystring = __webpack_require__(/*! querystring */ \"./node_modules/querystring/index.js\");\n\nvar AccountExport = __webpack_require__(/*! ./api/AccountExportApi */ \"./node_modules/@mailchimp/mailchimp_marketing/src/api/AccountExportApi.js\");\nvar AccountExports = __webpack_require__(/*! ./api/AccountExportsApi */ \"./node_modules/@mailchimp/mailchimp_marketing/src/api/AccountExportsApi.js\");\nvar ActivityFeed = __webpack_require__(/*! ./api/ActivityFeedApi */ \"./node_modules/@mailchimp/mailchimp_marketing/src/api/ActivityFeedApi.js\");\nvar AuthorizedApps = __webpack_require__(/*! ./api/AuthorizedAppsApi */ \"./node_modules/@mailchimp/mailchimp_marketing/src/api/AuthorizedAppsApi.js\");\nvar Automations = __webpack_require__(/*! ./api/AutomationsApi */ \"./node_modules/@mailchimp/mailchimp_marketing/src/api/AutomationsApi.js\");\nvar BatchWebhooks = __webpack_require__(/*! ./api/BatchWebhooksApi */ \"./node_modules/@mailchimp/mailchimp_marketing/src/api/BatchWebhooksApi.js\");\nvar Batches = __webpack_require__(/*! ./api/BatchesApi */ \"./node_modules/@mailchimp/mailchimp_marketing/src/api/BatchesApi.js\");\nvar CampaignFolders = __webpack_require__(/*! ./api/CampaignFoldersApi */ \"./node_modules/@mailchimp/mailchimp_marketing/src/api/CampaignFoldersApi.js\");\nvar Campaigns = __webpack_require__(/*! ./api/CampaignsApi */ \"./node_modules/@mailchimp/mailchimp_marketing/src/api/CampaignsApi.js\");\nvar ConnectedSites = __webpack_require__(/*! ./api/ConnectedSitesApi */ \"./node_modules/@mailchimp/mailchimp_marketing/src/api/ConnectedSitesApi.js\");\nvar Conversations = __webpack_require__(/*! ./api/ConversationsApi */ \"./node_modules/@mailchimp/mailchimp_marketing/src/api/ConversationsApi.js\");\nvar CustomerJourneys = __webpack_require__(/*! ./api/CustomerJourneysApi */ \"./node_modules/@mailchimp/mailchimp_marketing/src/api/CustomerJourneysApi.js\");\nvar Ecommerce = __webpack_require__(/*! ./api/EcommerceApi */ \"./node_modules/@mailchimp/mailchimp_marketing/src/api/EcommerceApi.js\");\nvar FacebookAds = __webpack_require__(/*! ./api/FacebookAdsApi */ \"./node_modules/@mailchimp/mailchimp_marketing/src/api/FacebookAdsApi.js\");\nvar FileManager = __webpack_require__(/*! ./api/FileManagerApi */ \"./node_modules/@mailchimp/mailchimp_marketing/src/api/FileManagerApi.js\");\nvar LandingPages = __webpack_require__(/*! ./api/LandingPagesApi */ \"./node_modules/@mailchimp/mailchimp_marketing/src/api/LandingPagesApi.js\");\nvar Lists = __webpack_require__(/*! ./api/ListsApi */ \"./node_modules/@mailchimp/mailchimp_marketing/src/api/ListsApi.js\");\nvar Ping = __webpack_require__(/*! ./api/PingApi */ \"./node_modules/@mailchimp/mailchimp_marketing/src/api/PingApi.js\");\nvar Reporting = __webpack_require__(/*! ./api/ReportingApi */ \"./node_modules/@mailchimp/mailchimp_marketing/src/api/ReportingApi.js\");\nvar Reports = __webpack_require__(/*! ./api/ReportsApi */ \"./node_modules/@mailchimp/mailchimp_marketing/src/api/ReportsApi.js\");\nvar Root = __webpack_require__(/*! ./api/RootApi */ \"./node_modules/@mailchimp/mailchimp_marketing/src/api/RootApi.js\");\nvar SearchCampaigns = __webpack_require__(/*! ./api/SearchCampaignsApi */ \"./node_modules/@mailchimp/mailchimp_marketing/src/api/SearchCampaignsApi.js\");\nvar SearchMembers = __webpack_require__(/*! ./api/SearchMembersApi */ \"./node_modules/@mailchimp/mailchimp_marketing/src/api/SearchMembersApi.js\");\nvar Surveys = __webpack_require__(/*! ./api/SurveysApi */ \"./node_modules/@mailchimp/mailchimp_marketing/src/api/SurveysApi.js\");\nvar TemplateFolders = __webpack_require__(/*! ./api/TemplateFoldersApi */ \"./node_modules/@mailchimp/mailchimp_marketing/src/api/TemplateFoldersApi.js\");\nvar Templates = __webpack_require__(/*! ./api/TemplatesApi */ \"./node_modules/@mailchimp/mailchimp_marketing/src/api/TemplatesApi.js\");\nvar VerifiedDomains = __webpack_require__(/*! ./api/VerifiedDomainsApi */ \"./node_modules/@mailchimp/mailchimp_marketing/src/api/VerifiedDomainsApi.js\");\n\n/**\n * @module ApiClient\n * @version 3.0.80\n */\n\n/**\n * Manages low level client-server communications, parameter marshalling, etc. There should not be any need for an\n * application to use this class directly - the *Api and model classes provide the public API for the service. The\n * contents of this file should be regarded as internal but are documented for completeness.\n * @alias module:ApiClient\n * @class\n */\nvar exports = function() {\n\n  /**\n   * The base URL against which to resolve every API call's (relative) path.\n   * @type {String}\n   * @default https://server.api.mailchimp.com/3.0\n   */\n  this.basePath = 'https://server.api.mailchimp.com/3.0'.replace(/\\/+$/, '');\n\n  /**\n   * The API configuration settings object\n   * @type {Object}\n   * @default {}\n   */\n  this.config = {\n    apiKey: '',\n    accessToken: '',\n    server: 'invalid-server'\n  };\n\n  /**\n   * The default HTTP headers to be included for all API calls.\n   * @type {Array.<String>}\n   * @default {}\n   */\n  this.defaultHeaders = {};\n  /**\n   * The default HTTP timeout for all API calls.\n   * @type {Number}\n   * @default 60000\n   */\n  this.timeout = 120000;\n\n  /**\n   * If set to false an additional timestamp parameter is added to all API GET calls to\n   * prevent browser caching\n   * @type {Boolean}\n   * @default true\n   */\n  this.cache = true;\n\n  /**\n   * If set to true, the client will save the cookies from each server\n   * response, and return them in the next request.\n   * @default false\n   */\n  this.enableCookies = false;\n\n  /*\n   * Used to save and return cookies in a node.js (non-browser) setting,\n   * if this.enableCookies is set to true.\n   */\n  if (typeof window === 'undefined') {\n    this.agent = new superagent.agent();\n  }\n\n  // API Routes\n  this.accountExport = new AccountExport(this);\n  this.accountExports = new AccountExports(this);\n  this.activityFeed = new ActivityFeed(this);\n  this.authorizedApps = new AuthorizedApps(this);\n  this.automations = new Automations(this);\n  this.batchWebhooks = new BatchWebhooks(this);\n  this.batches = new Batches(this);\n  this.campaignFolders = new CampaignFolders(this);\n  this.campaigns = new Campaigns(this);\n  this.connectedSites = new ConnectedSites(this);\n  this.conversations = new Conversations(this);\n  this.customerJourneys = new CustomerJourneys(this);\n  this.ecommerce = new Ecommerce(this);\n  this.facebookAds = new FacebookAds(this);\n  this.fileManager = new FileManager(this);\n  this.landingPages = new LandingPages(this);\n  this.lists = new Lists(this);\n  this.ping = new Ping(this);\n  this.reporting = new Reporting(this);\n  this.reports = new Reports(this);\n  this.root = new Root(this);\n  this.searchCampaigns = new SearchCampaigns(this);\n  this.searchMembers = new SearchMembers(this);\n  this.Surveys = new Surveys(this);\n  this.templateFolders = new TemplateFolders(this);\n  this.templates = new Templates(this);\n  this.verifiedDomains = new VerifiedDomains(this);\n};\n\n/**\n * Sets the API configuration settings object.\n * @param config {Object} The configuration object\n */\nexports.prototype.setConfig = function(config = {}) {\n  var _this = this;\n  this.config = config;\n};\n\n/**\n * Returns a string representation for an actual parameter.\n * @param param The actual parameter.\n * @returns {String} The string representation of <code>param</code>.\n */\nexports.prototype.paramToString = function(param) {\n  if (param == undefined || param == null) {\n    return '';\n  }\n  if (param instanceof Date) {\n    return param.toJSON();\n  }\n  return param.toString();\n};\n\n/**\n * Builds full URL by appending the given path to the base URL and replacing path parameter place-holders with parameter values.\n * NOTE: query parameters are not handled here.\n * @param {String} path The path to append to the base URL.\n * @param {Object} pathParams The parameter values to append.\n * @returns {String} The encoded path with parameter values substituted.\n */\nexports.prototype.buildUrl = function(path, pathParams) {\n  if (!path.match(/^\\//)) {\n    path = '/' + path;\n  }\n  var url = this.basePath + path;\n  var _this = this;\n  url = url.replace(/\\{([\\w-]+)\\}/g, function(fullMatch, key) {\n    var value;\n    if (pathParams.hasOwnProperty(key)) {\n      value = _this.paramToString(pathParams[key]);\n    } else {\n      value = fullMatch;\n    }\n    return encodeURIComponent(value);\n  });\n\n  // Define the server\n  if (typeof this.config.server !== 'undefined') {\n    url = url.replace('server', this.config.server);\n  }\n\n  return url;\n};\n\n/**\n * Checks whether the given content type represents JSON.<br>\n * JSON content type examples:<br>\n * <ul>\n * <li>application/json</li>\n * <li>application/json; charset=UTF8</li>\n * <li>APPLICATION/JSON</li>\n * </ul>\n * @param {String} contentType The MIME content type to check.\n * @returns {Boolean} <code>true</code> if <code>contentType</code> represents JSON, otherwise <code>false</code>.\n */\nexports.prototype.isJsonMime = function(contentType) {\n  return Boolean(contentType != null && contentType.match(/^application\\/json(;.*)?$/i));\n};\n\n/**\n * Chooses a content type from the given array, with JSON preferred; i.e. return JSON if included, otherwise return the first.\n * @param {Array.<String>} contentTypes\n * @returns {String} The chosen content type, preferring JSON.\n */\nexports.prototype.jsonPreferredMime = function(contentTypes) {\n  for (var i = 0; i < contentTypes.length; i++) {\n    if (this.isJsonMime(contentTypes[i])) {\n      return contentTypes[i];\n    }\n  }\n  return contentTypes[0];\n};\n\n/**\n * Checks whether the given parameter value represents file-like content.\n * @param param The parameter to check.\n * @returns {Boolean} <code>true</code> if <code>param</code> represents a file.\n */\nexports.prototype.isFileParam = function(param) {\n  // fs.ReadStream in Node.js and Electron (but not in runtime like browserify)\n  if (true) {\n    var fs;\n    try {\n      fs = __webpack_require__(/*! fs */ \"?c5ea\");\n    } catch (err) {}\n    if (fs && fs.ReadStream && param instanceof fs.ReadStream) {\n      return true;\n    }\n  }\n  // Buffer in Node.js\n  if (typeof Buffer === 'function' && param instanceof Buffer) {\n    return true;\n  }\n  // Blob in browser\n  if (typeof Blob === 'function' && param instanceof Blob) {\n    return true;\n  }\n  // File in browser (it seems File object is also instance of Blob, but keep this for safe)\n  if (typeof File === 'function' && param instanceof File) {\n    return true;\n  }\n  return false;\n};\n\n/**\n * Normalizes parameter values:\n * <ul>\n * <li>remove nils</li>\n * <li>keep files and arrays</li>\n * <li>format to string with `paramToString` for other cases</li>\n * </ul>\n * @param {Object.<String, Object>} params The parameters as object properties.\n * @returns {Object.<String, Object>} normalized parameters.\n */\nexports.prototype.normalizeParams = function(params) {\n  var newParams = {};\n  for (var key in params) {\n    if (params.hasOwnProperty(key) && params[key] != undefined && params[key] != null) {\n      var value = params[key];\n      if (this.isFileParam(value) || Array.isArray(value)) {\n        newParams[key] = value;\n      } else {\n        newParams[key] = this.paramToString(value);\n      }\n    }\n  }\n  return newParams;\n};\n\n/**\n * Enumeration of collection format separator strategies.\n * @enum {String}\n * @readonly\n */\nexports.CollectionFormatEnum = {\n  /**\n   * Comma-separated values. Value: <code>csv</code>\n   * @const\n   */\n  CSV: ',',\n  /**\n   * Space-separated values. Value: <code>ssv</code>\n   * @const\n   */\n  SSV: ' ',\n  /**\n   * Tab-separated values. Value: <code>tsv</code>\n   * @const\n   */\n  TSV: '\\t',\n  /**\n   * Pipe(|)-separated values. Value: <code>pipes</code>\n   * @const\n   */\n  PIPES: '|',\n  /**\n   * Native array. Value: <code>multi</code>\n   * @const\n   */\n  MULTI: 'multi'\n};\n\n/**\n * Builds a string representation of an array-type actual parameter, according to the given collection format.\n * @param {Array} param An array parameter.\n * @param {module:ApiClient.CollectionFormatEnum} collectionFormat The array element separator strategy.\n * @returns {String|Array} A string representation of the supplied collection, using the specified delimiter. Returns\n * <code>param</code> as is if <code>collectionFormat</code> is <code>multi</code>.\n */\nexports.prototype.buildCollectionParam = function buildCollectionParam(param, collectionFormat) {\n  if (param == null) {\n    return null;\n  }\n  switch (collectionFormat) {\n    case 'csv':\n      return param.map(this.paramToString).join(',');\n    case 'ssv':\n      return param.map(this.paramToString).join(' ');\n    case 'tsv':\n      return param.map(this.paramToString).join('\\t');\n    case 'pipes':\n      return param.map(this.paramToString).join('|');\n    case 'multi':\n      // return the array directly as SuperAgent will handle it as expected\n      return param.map(this.paramToString);\n    default:\n      throw new Error('Unknown collection format: ' + collectionFormat);\n  }\n};\n\n/**\n * Deserializes an HTTP response body into a value of the specified type.\n * @param {Object} response A SuperAgent response object.\n * @param {(String|Array.<String>|Object.<String, Object>|Function)} returnType The type to return. Pass a string for simple types\n * or the constructor function for a complex type. Pass an array containing the type name to return an array of that type. To\n * return an object, pass an object with one property whose name is the key type and whose value is the corresponding value type:\n * all properties on <code>data<code> will be converted to this type.\n * @returns A value of the specified type.\n */\nexports.prototype.deserialize = function deserialize(response, returnType) {\n  if (response == null || returnType == null || response.status == 204) {\n    return null;\n  }\n  // Rely on SuperAgent for parsing response body.\n  // See http://visionmedia.github.io/superagent/#parsing-response-bodies\n  var data = response.body;\n  if (data == null || (typeof data === 'object' && typeof data.length === 'undefined' && !Object.keys(data).length)) {\n    // SuperAgent does not always produce a body; use the unparsed response as a fallback\n    data = response.text;\n  }\n  return exports.convertToType(data, returnType);\n};\n\n/**\n * Invokes the REST service using the supplied settings and parameters.\n * @param {String} path The base URL to invoke.\n * @param {String} httpMethod The HTTP method to use.\n * @param {Object.<String, String>} pathParams A map of path parameters and their values.\n * @param {Object.<String, Object>} queryParams A map of query parameters and their values.\n * @param {Object.<String, Object>} headerParams A map of header parameters and their values.\n * @param {Object.<String, Object>} formParams A map of form parameters and their values.\n * @param {Object} bodyParam The value to pass as the request body.\n * @param {Array.<String>} authNames An array of authentication type names.\n * @param {Array.<String>} contentTypes An array of request MIME types.\n * @param {Array.<String>} accepts An array of acceptable response MIME types.\n * @param {(String|Array|ObjectFunction)} returnType The required type to return; can be a string for simple types or the\n * constructor for a complex type.\n * @returns {Promise} A {@link https://www.promisejs.org/|Promise} object.\n */\nexports.prototype.callApi = function callApi(path, httpMethod, pathParams,\n    queryParams, headerParams, formParams, bodyParam, authNames, contentTypes, accepts,\n    returnType) {\n\n  var _this = this;\n  var url = this.buildUrl(path, pathParams);\n  var request = superagent(httpMethod, url);\n\n  // Basic Authentication\n  if (this.config.apiKey !== undefined && this.config.apiKey !== '') {\n    request.auth('user', this.config.apiKey);\n  }\n\n  // OAuth Authentication\n  else if (this.config.accessToken !== undefined && this.config.accessToken !== '') {\n    request.set({'Authorization': 'Bearer ' + this.config.accessToken});\n  }\n\n  // set query parameters\n  if (httpMethod.toUpperCase() === 'GET' && this.cache === false) {\n    queryParams['_'] = new Date().getTime();\n  }\n  request.query(this.normalizeParams(queryParams));\n\n  // set header parameters\n  request.set(this.defaultHeaders).set(this.normalizeParams(headerParams));\n\n  // set request timeout\n  request.timeout(this.timeout);\n\n  var contentType = this.jsonPreferredMime(contentTypes);\n  if (contentType) {\n    // Issue with superagent and multipart/form-data (https://github.com/visionmedia/superagent/issues/746)\n    if(contentType != 'multipart/form-data') {\n      request.type(contentType);\n    }\n  } else if (!HeaderUtils.caseInsensitiveGet(request.header, 'content-type')) {\n    request.type('application/json');\n  }\n\n  if (contentType === 'application/x-www-form-urlencoded') {\n    request.send(querystring.stringify(this.normalizeParams(formParams)));\n  } else if (contentType == 'multipart/form-data') {\n    var _formParams = this.normalizeParams(formParams);\n    for (var key in _formParams) {\n      if (_formParams.hasOwnProperty(key)) {\n        if (this.isFileParam(_formParams[key])) {\n          // file field\n          request.attach(key, _formParams[key]);\n        } else {\n          request.field(key, _formParams[key]);\n        }\n      }\n    }\n  } else if (bodyParam) {\n    request.send(bodyParam);\n  }\n\n  var accept = this.jsonPreferredMime(accepts);\n  if (accept) {\n    request.accept(accept);\n  }\n\n  if (returnType === 'Blob') {\n    request.responseType('blob');\n  } else if (returnType === 'String') {\n    request.responseType('string');\n  }\n\n  // Attach previously saved cookies, if enabled\n  if (this.enableCookies){\n    if (typeof window === 'undefined') {\n      this.agent.attachCookies(request);\n    }\n    else {\n      request.withCredentials();\n    }\n  }\n\n  return new Promise(function(resolve, reject) {\n    request.end(function(error, response) {\n      if (error) {\n        reject(error);\n      } else {\n        try {\n          var data = _this.deserialize(response, returnType);\n          if (_this.enableCookies && typeof window === 'undefined'){\n            _this.agent.saveCookies(response);\n          }\n          resolve({data: data, response: response});\n        } catch (err) {\n          reject(err);\n        }\n      }\n    });\n  });\n  };\n\n/**\n * Parses an ISO-8601 string representation of a date value.\n * @param {String} str The date value as a string.\n * @returns {Date} The parsed date object.\n */\nexports.parseDate = function(str) {\n  return new Date(str.replace(/T/i, ' '));\n};\n\n/**\n * Converts a value to the specified type.\n * @param {(String|Object)} data The data to convert, as a string or object.\n * @param {(String|Array.<String>|Object.<String, Object>|Function)} type The type to return. Pass a string for simple types\n * or the constructor function for a complex type. Pass an array containing the type name to return an array of that type. To\n * return an object, pass an object with one property whose name is the key type and whose value is the corresponding value type:\n * all properties on <code>data<code> will be converted to this type.\n * @returns An instance of the specified type or null or undefined if data is null or undefined.\n */\nexports.convertToType = function(data, type) {\n  if (data === null || data === undefined)\n    return data\n\n  switch (type) {\n    case 'Boolean':\n      return Boolean(data);\n    case 'Integer':\n      return parseInt(data, 10);\n    case 'Number':\n      return parseFloat(data);\n    case 'String':\n      return String(data);\n    case 'Date':\n      return this.parseDate(String(data));\n    case 'Blob':\n      return data;\n    default:\n      if (type === Object) {\n        // generic object, return directly\n        return data;\n      } else if (typeof type === 'function') {\n        // for model type like: User\n        return type.constructFromObject(data);\n      } else if (Array.isArray(type)) {\n        // for array type like: ['String']\n        var itemType = type[0];\n        return data.map(function(item) {\n          return exports.convertToType(item, itemType);\n        });\n      } else if (typeof type === 'object') {\n        // for plain object type like: {'String': 'Integer'}\n        var keyType, valueType;\n        for (var k in type) {\n          if (type.hasOwnProperty(k)) {\n            keyType = k;\n            valueType = type[k];\n            break;\n          }\n        }\n        var result = {};\n        for (var k in data) {\n          if (data.hasOwnProperty(k)) {\n            var key = exports.convertToType(k, keyType);\n            var value = exports.convertToType(data[k], valueType);\n            result[key] = value;\n          }\n        }\n        return result;\n      } else {\n        // for unknown type, return the data directly\n        return data;\n      }\n  }\n};\n\n/**\n * Constructs a new map or array model from REST data.\n * @param data {Object|Array} The REST data.\n * @param obj {Object|Array} The target object or array.\n */\nexports.constructFromObject = function(data, obj, itemType) {\n  if (Array.isArray(data)) {\n    for (var i = 0; i < data.length; i++) {\n      if (data.hasOwnProperty(i))\n        obj[i] = exports.convertToType(data[i], itemType);\n    }\n  } else {\n    for (var k in data) {\n      if (data.hasOwnProperty(k))\n        obj[k] = exports.convertToType(data[k], itemType);\n    }\n  }\n};\n\n  /**\n * The default API client implementation.\n * @type {module:ApiClient}\n */\nexports.instance = new exports();\n\nmodule.exports = exports;\n\n\n//# sourceURL=webpack://invisibles23/./node_modules/@mailchimp/mailchimp_marketing/src/ApiClient.js?");

/***/ }),

/***/ "./node_modules/@mailchimp/mailchimp_marketing/src/api/AccountExportApi.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@mailchimp/mailchimp_marketing/src/api/AccountExportApi.js ***!
  \*********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n * Mailchimp Marketing API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.80\n * Contact: apihelp@mailchimp.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.12\n *\n * Do not edit the class manually.\n *\n */\n\n\n\nvar ApiClient = __webpack_require__(/*! ../ApiClient */ \"./node_modules/@mailchimp/mailchimp_marketing/src/ApiClient.js\");\n\n/**\n * AccountExport service.\n * @module api/AccountExportApi\n */\n\n/**\n * Constructs a new AccountExportApi. \n * @alias module:api/AccountExportApi\n * @class\n * @param {module:ApiClient} apiClient Optional API client implementation to use,\n * default to {@link module:ApiClient#instance} if unspecified.\n */\nmodule.exports = function(apiClient) {\n  this.apiClient = apiClient || ApiClient.instance;\n\n  /**\n   * Get account export info\n   * Get information about a specific account export.\n   * @param {String} exportId The unique id for the account export.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2001Exports} and HTTP response\n   */\n  this.getAccountExportsWithHttpInfo = function(exportId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'exportId' is set\n    if (exportId === undefined || exportId === null) {\n      throw new Error(\"Missing the required parameter 'exportId' when calling \");\n    }\n\n    var pathParams = {\n      'export_id': exportId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/account-exports/{export_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get account export info\n   * Get information about a specific account export.\n   * @param {String} exportId The unique id for the account export.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2001Exports}\n   */\n  this.getAccountExports = function(exportId, opts) {\n    return this.getAccountExportsWithHttpInfo(exportId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n};\n\n\n//# sourceURL=webpack://invisibles23/./node_modules/@mailchimp/mailchimp_marketing/src/api/AccountExportApi.js?");

/***/ }),

/***/ "./node_modules/@mailchimp/mailchimp_marketing/src/api/AccountExportsApi.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@mailchimp/mailchimp_marketing/src/api/AccountExportsApi.js ***!
  \**********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n * Mailchimp Marketing API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.80\n * Contact: apihelp@mailchimp.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.12\n *\n * Do not edit the class manually.\n *\n */\n\n\n\nvar ApiClient = __webpack_require__(/*! ../ApiClient */ \"./node_modules/@mailchimp/mailchimp_marketing/src/ApiClient.js\");\n\n/**\n * AccountExports service.\n * @module api/AccountExportsApi\n */\n\n/**\n * Constructs a new AccountExportsApi. \n * @alias module:api/AccountExportsApi\n * @class\n * @param {module:ApiClient} apiClient Optional API client implementation to use,\n * default to {@link module:ApiClient#instance} if unspecified.\n */\nmodule.exports = function(apiClient) {\n  this.apiClient = apiClient || ApiClient.instance;\n\n  /**\n   * List account exports\n   * Get a list of account exports for a given account.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2001} and HTTP response\n   */\n  this.listAccountExportsWithHttpInfo = function(opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/account-exports', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List account exports\n   * Get a list of account exports for a given account.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2001}\n   */\n  this.listAccountExports = function(opts) {\n    return this.listAccountExportsWithHttpInfo(opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add export\n   * Create a new account export in your Mailchimp account.\n   * @param {module:model/CreateAnAccountExport} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2001Exports} and HTTP response\n   */\n  this.createAccountExportWithHttpInfo = function(body) {\n    var postBody = body;\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/account-exports', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add export\n   * Create a new account export in your Mailchimp account.\n   * @param {module:model/CreateAnAccountExport} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2001Exports}\n   */\n  this.createAccountExport = function(body) {\n    return this.createAccountExportWithHttpInfo(body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n};\n\n\n//# sourceURL=webpack://invisibles23/./node_modules/@mailchimp/mailchimp_marketing/src/api/AccountExportsApi.js?");

/***/ }),

/***/ "./node_modules/@mailchimp/mailchimp_marketing/src/api/ActivityFeedApi.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@mailchimp/mailchimp_marketing/src/api/ActivityFeedApi.js ***!
  \********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n * Mailchimp Marketing API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.80\n * Contact: apihelp@mailchimp.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.12\n *\n * Do not edit the class manually.\n *\n */\n\n\n\nvar ApiClient = __webpack_require__(/*! ../ApiClient */ \"./node_modules/@mailchimp/mailchimp_marketing/src/ApiClient.js\");\n\n/**\n * ActivityFeed service.\n * @module api/ActivityFeedApi\n */\n\n/**\n * Constructs a new ActivityFeedApi. \n * @alias module:api/ActivityFeedApi\n * @class\n * @param {module:ApiClient} apiClient Optional API client implementation to use,\n * default to {@link module:ApiClient#instance} if unspecified.\n */\nmodule.exports = function(apiClient) {\n  this.apiClient = apiClient || ApiClient.instance;\n\n  /**\n   * Get latest chimp chatter\n   * Return the Chimp Chatter for this account ordered by most recent.\n   * @param {Object} opts Optional parameters\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse200} and HTTP response\n   */\n  this.getChimpChatterWithHttpInfo = function(opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/activity-feed/chimp-chatter', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get latest chimp chatter\n   * Return the Chimp Chatter for this account ordered by most recent.\n   * @param {Object} opts Optional parameters\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse200}\n   */\n  this.getChimpChatter = function(opts) {\n    return this.getChimpChatterWithHttpInfo(opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n};\n\n\n//# sourceURL=webpack://invisibles23/./node_modules/@mailchimp/mailchimp_marketing/src/api/ActivityFeedApi.js?");

/***/ }),

/***/ "./node_modules/@mailchimp/mailchimp_marketing/src/api/AuthorizedAppsApi.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@mailchimp/mailchimp_marketing/src/api/AuthorizedAppsApi.js ***!
  \**********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n * Mailchimp Marketing API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.80\n * Contact: apihelp@mailchimp.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.12\n *\n * Do not edit the class manually.\n *\n */\n\n\n\nvar ApiClient = __webpack_require__(/*! ../ApiClient */ \"./node_modules/@mailchimp/mailchimp_marketing/src/ApiClient.js\");\n\n/**\n * AuthorizedApps service.\n * @module api/AuthorizedAppsApi\n */\n\n/**\n * Constructs a new AuthorizedAppsApi. \n * @alias module:api/AuthorizedAppsApi\n * @class\n * @param {module:ApiClient} apiClient Optional API client implementation to use,\n * default to {@link module:ApiClient#instance} if unspecified.\n */\nmodule.exports = function(apiClient) {\n  this.apiClient = apiClient || ApiClient.instance;\n\n  /**\n   * List authorized apps\n   * Get a list of an account's registered, connected applications.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2002} and HTTP response\n   */\n  this.listWithHttpInfo = function(opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/authorized-apps', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List authorized apps\n   * Get a list of an account's registered, connected applications.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2002}\n   */\n  this.list = function(opts) {\n    return this.listWithHttpInfo(opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get authorized app info\n   * Get information about a specific authorized application.\n   * @param {String} appId The unique id for the connected authorized application.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2002Apps} and HTTP response\n   */\n  this.getWithHttpInfo = function(appId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'appId' is set\n    if (appId === undefined || appId === null) {\n      throw new Error(\"Missing the required parameter 'appId' when calling \");\n    }\n\n    var pathParams = {\n      'app_id': appId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/authorized-apps/{app_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get authorized app info\n   * Get information about a specific authorized application.\n   * @param {String} appId The unique id for the connected authorized application.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2002Apps}\n   */\n  this.get = function(appId, opts) {\n    return this.getWithHttpInfo(appId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n};\n\n\n//# sourceURL=webpack://invisibles23/./node_modules/@mailchimp/mailchimp_marketing/src/api/AuthorizedAppsApi.js?");

/***/ }),

/***/ "./node_modules/@mailchimp/mailchimp_marketing/src/api/AutomationsApi.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@mailchimp/mailchimp_marketing/src/api/AutomationsApi.js ***!
  \*******************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n * Mailchimp Marketing API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.80\n * Contact: apihelp@mailchimp.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.12\n *\n * Do not edit the class manually.\n *\n */\n\n\n\nvar ApiClient = __webpack_require__(/*! ../ApiClient */ \"./node_modules/@mailchimp/mailchimp_marketing/src/ApiClient.js\");\n\n/**\n * Automations service.\n * @module api/AutomationsApi\n */\n\n/**\n * Constructs a new AutomationsApi. \n * @alias module:api/AutomationsApi\n * @class\n * @param {module:ApiClient} apiClient Optional API client implementation to use,\n * default to {@link module:ApiClient#instance} if unspecified.\n */\nmodule.exports = function(apiClient) {\n  this.apiClient = apiClient || ApiClient.instance;\n\n  /**\n   * Archive automation\n   * Archiving will permanently end your automation and keep the report data. You’ll be able to replicate your archived automation, but you can’t restart it.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.archiveWithHttpInfo = function(workflowId) {\n    var postBody = null;\n\n    // verify the required parameter 'workflowId' is set\n    if (workflowId === undefined || workflowId === null) {\n      throw new Error(\"Missing the required parameter 'workflowId' when calling \");\n    }\n\n    var pathParams = {\n      'workflow_id': workflowId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/automations/{workflow_id}/actions/archive', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Archive automation\n   * Archiving will permanently end your automation and keep the report data. You’ll be able to replicate your archived automation, but you can’t restart it.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.archive = function(workflowId) {\n    return this.archiveWithHttpInfo(workflowId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Delete workflow email\n   * Removes an individual classic automation workflow email. Emails from certain workflow types, including the Abandoned Cart Email (abandonedCart) and Product Retargeting Email (abandonedBrowse) Workflows, cannot be deleted.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @param {String} workflowEmailId The unique id for the Automation workflow email.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.deleteWorkflowEmailWithHttpInfo = function(workflowId, workflowEmailId) {\n    var postBody = null;\n\n    // verify the required parameter 'workflowId' is set\n    if (workflowId === undefined || workflowId === null) {\n      throw new Error(\"Missing the required parameter 'workflowId' when calling \");\n    }\n\n    // verify the required parameter 'workflowEmailId' is set\n    if (workflowEmailId === undefined || workflowEmailId === null) {\n      throw new Error(\"Missing the required parameter 'workflowEmailId' when calling \");\n    }\n\n    var pathParams = {\n      'workflow_id': workflowId,\n      'workflow_email_id': workflowEmailId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/automations/{workflow_id}/emails/{workflow_email_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete workflow email\n   * Removes an individual classic automation workflow email. Emails from certain workflow types, including the Abandoned Cart Email (abandonedCart) and Product Retargeting Email (abandonedBrowse) Workflows, cannot be deleted.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @param {String} workflowEmailId The unique id for the Automation workflow email.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.deleteWorkflowEmail = function(workflowId, workflowEmailId) {\n    return this.deleteWorkflowEmailWithHttpInfo(workflowId, workflowEmailId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List automations\n   * Get a summary of an account's classic automations.\n   * @param {Object} opts Optional parameters\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Date} opts.beforeCreateTime Restrict the response to automations created before this time. Uses the ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {Date} opts.sinceCreateTime Restrict the response to automations created after this time. Uses the ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {Date} opts.beforeStartTime Restrict the response to automations started before this time. Uses the ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {Date} opts.sinceStartTime Restrict the response to automations started after this time. Uses the ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {module:model/String} opts.status Restrict the results to automations with the specified status.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2003} and HTTP response\n   */\n  this.listWithHttpInfo = function(opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset']),\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'before_create_time': ( opts['beforeCreateTime'] ? opts['beforeCreateTime'] : opts['before_create_time']),\n      'since_create_time': ( opts['sinceCreateTime'] ? opts['sinceCreateTime'] : opts['since_create_time']),\n      'before_start_time': ( opts['beforeStartTime'] ? opts['beforeStartTime'] : opts['before_start_time']),\n      'since_start_time': ( opts['sinceStartTime'] ? opts['sinceStartTime'] : opts['since_start_time']),\n      'status': ( opts['status'] ? opts['status'] : opts['status'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/automations', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List automations\n   * Get a summary of an account's classic automations.\n   * @param {Object} opts Optional parameters\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Date} opts.beforeCreateTime Restrict the response to automations created before this time. Uses the ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {Date} opts.sinceCreateTime Restrict the response to automations created after this time. Uses the ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {Date} opts.beforeStartTime Restrict the response to automations started before this time. Uses the ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {Date} opts.sinceStartTime Restrict the response to automations started after this time. Uses the ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {module:model/String} opts.status Restrict the results to automations with the specified status.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2003}\n   */\n  this.list = function(opts) {\n    return this.listWithHttpInfo(opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get automation info\n   * Get a summary of an individual classic automation workflow's settings and content. The `trigger_settings` object returns information for the first email in the workflow.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AutomationWorkflow} and HTTP response\n   */\n  this.getWithHttpInfo = function(workflowId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'workflowId' is set\n    if (workflowId === undefined || workflowId === null) {\n      throw new Error(\"Missing the required parameter 'workflowId' when calling \");\n    }\n\n    var pathParams = {\n      'workflow_id': workflowId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/automations/{workflow_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get automation info\n   * Get a summary of an individual classic automation workflow's settings and content. The `trigger_settings` object returns information for the first email in the workflow.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AutomationWorkflow}\n   */\n  this.get = function(workflowId, opts) {\n    return this.getWithHttpInfo(workflowId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List automated emails\n   * Get a summary of the emails in a classic automation workflow.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AutomationEmails} and HTTP response\n   */\n  this.listAllWorkflowEmailsWithHttpInfo = function(workflowId) {\n    var postBody = null;\n\n    // verify the required parameter 'workflowId' is set\n    if (workflowId === undefined || workflowId === null) {\n      throw new Error(\"Missing the required parameter 'workflowId' when calling \");\n    }\n\n    var pathParams = {\n      'workflow_id': workflowId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/automations/{workflow_id}/emails', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List automated emails\n   * Get a summary of the emails in a classic automation workflow.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AutomationEmails}\n   */\n  this.listAllWorkflowEmails = function(workflowId) {\n    return this.listAllWorkflowEmailsWithHttpInfo(workflowId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get workflow email info\n   * Get information about an individual classic automation workflow email.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @param {String} workflowEmailId The unique id for the Automation workflow email.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AutomationWorkflowEmail} and HTTP response\n   */\n  this.getWorkflowEmailWithHttpInfo = function(workflowId, workflowEmailId) {\n    var postBody = null;\n\n    // verify the required parameter 'workflowId' is set\n    if (workflowId === undefined || workflowId === null) {\n      throw new Error(\"Missing the required parameter 'workflowId' when calling \");\n    }\n\n    // verify the required parameter 'workflowEmailId' is set\n    if (workflowEmailId === undefined || workflowEmailId === null) {\n      throw new Error(\"Missing the required parameter 'workflowEmailId' when calling \");\n    }\n\n    var pathParams = {\n      'workflow_id': workflowId,\n      'workflow_email_id': workflowEmailId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/automations/{workflow_id}/emails/{workflow_email_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get workflow email info\n   * Get information about an individual classic automation workflow email.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @param {String} workflowEmailId The unique id for the Automation workflow email.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AutomationWorkflowEmail}\n   */\n  this.getWorkflowEmail = function(workflowId, workflowEmailId) {\n    return this.getWorkflowEmailWithHttpInfo(workflowId, workflowEmailId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List automated email subscribers\n   * Get information about a classic automation email queue.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @param {String} workflowEmailId The unique id for the Automation workflow email.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2004} and HTTP response\n   */\n  this.getWorkflowEmailSubscriberQueueWithHttpInfo = function(workflowId, workflowEmailId) {\n    var postBody = null;\n\n    // verify the required parameter 'workflowId' is set\n    if (workflowId === undefined || workflowId === null) {\n      throw new Error(\"Missing the required parameter 'workflowId' when calling \");\n    }\n\n    // verify the required parameter 'workflowEmailId' is set\n    if (workflowEmailId === undefined || workflowEmailId === null) {\n      throw new Error(\"Missing the required parameter 'workflowEmailId' when calling \");\n    }\n\n    var pathParams = {\n      'workflow_id': workflowId,\n      'workflow_email_id': workflowEmailId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/automations/{workflow_id}/emails/{workflow_email_id}/queue', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List automated email subscribers\n   * Get information about a classic automation email queue.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @param {String} workflowEmailId The unique id for the Automation workflow email.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2004}\n   */\n  this.getWorkflowEmailSubscriberQueue = function(workflowId, workflowEmailId) {\n    return this.getWorkflowEmailSubscriberQueueWithHttpInfo(workflowId, workflowEmailId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get automated email subscriber\n   * Get information about a specific subscriber in a classic automation email queue.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @param {String} workflowEmailId The unique id for the Automation workflow email.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SubscriberInAutomationQueue2} and HTTP response\n   */\n  this.getWorkflowEmailSubscriberWithHttpInfo = function(workflowId, workflowEmailId, subscriberHash) {\n    var postBody = null;\n\n    // verify the required parameter 'workflowId' is set\n    if (workflowId === undefined || workflowId === null) {\n      throw new Error(\"Missing the required parameter 'workflowId' when calling \");\n    }\n\n    // verify the required parameter 'workflowEmailId' is set\n    if (workflowEmailId === undefined || workflowEmailId === null) {\n      throw new Error(\"Missing the required parameter 'workflowEmailId' when calling \");\n    }\n\n    // verify the required parameter 'subscriberHash' is set\n    if (subscriberHash === undefined || subscriberHash === null) {\n      throw new Error(\"Missing the required parameter 'subscriberHash' when calling \");\n    }\n\n    var pathParams = {\n      'workflow_id': workflowId,\n      'workflow_email_id': workflowEmailId,\n      'subscriber_hash': subscriberHash\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/automations/{workflow_id}/emails/{workflow_email_id}/queue/{subscriber_hash}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get automated email subscriber\n   * Get information about a specific subscriber in a classic automation email queue.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @param {String} workflowEmailId The unique id for the Automation workflow email.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SubscriberInAutomationQueue2}\n   */\n  this.getWorkflowEmailSubscriber = function(workflowId, workflowEmailId, subscriberHash) {\n    return this.getWorkflowEmailSubscriberWithHttpInfo(workflowId, workflowEmailId, subscriberHash)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List subscribers removed from workflow\n   * Get information about subscribers who were removed from a classic automation workflow.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RemovedSubscribers} and HTTP response\n   */\n  this.listWorkflowEmailSubscribersRemovedWithHttpInfo = function(workflowId) {\n    var postBody = null;\n\n    // verify the required parameter 'workflowId' is set\n    if (workflowId === undefined || workflowId === null) {\n      throw new Error(\"Missing the required parameter 'workflowId' when calling \");\n    }\n\n    var pathParams = {\n      'workflow_id': workflowId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/automations/{workflow_id}/removed-subscribers', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List subscribers removed from workflow\n   * Get information about subscribers who were removed from a classic automation workflow.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RemovedSubscribers}\n   */\n  this.listWorkflowEmailSubscribersRemoved = function(workflowId) {\n    return this.listWorkflowEmailSubscribersRemovedWithHttpInfo(workflowId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get subscriber removed from workflow\n   * Get information about a specific subscriber who was removed from a classic automation workflow.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SubscriberRemovedFromAutomationWorkflow} and HTTP response\n   */\n  this.getRemovedWorkflowEmailSubscriberWithHttpInfo = function(workflowId, subscriberHash) {\n    var postBody = null;\n\n    // verify the required parameter 'workflowId' is set\n    if (workflowId === undefined || workflowId === null) {\n      throw new Error(\"Missing the required parameter 'workflowId' when calling \");\n    }\n\n    // verify the required parameter 'subscriberHash' is set\n    if (subscriberHash === undefined || subscriberHash === null) {\n      throw new Error(\"Missing the required parameter 'subscriberHash' when calling \");\n    }\n\n    var pathParams = {\n      'workflow_id': workflowId,\n      'subscriber_hash': subscriberHash\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/automations/{workflow_id}/removed-subscribers/{subscriber_hash}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get subscriber removed from workflow\n   * Get information about a specific subscriber who was removed from a classic automation workflow.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SubscriberRemovedFromAutomationWorkflow}\n   */\n  this.getRemovedWorkflowEmailSubscriber = function(workflowId, subscriberHash) {\n    return this.getRemovedWorkflowEmailSubscriberWithHttpInfo(workflowId, subscriberHash)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update workflow email\n   * Update settings for a classic automation workflow email.  Only works with workflows of type: abandonedBrowse, abandonedCart, emailFollowup, or singleWelcome.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @param {String} workflowEmailId The unique id for the Automation workflow email.\n   * @param {module:model/UpdateInformationAboutASpecificWorkflowEmail} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AutomationWorkflowEmail} and HTTP response\n   */\n  this.updateWorkflowEmailWithHttpInfo = function(workflowId, workflowEmailId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'workflowId' is set\n    if (workflowId === undefined || workflowId === null) {\n      throw new Error(\"Missing the required parameter 'workflowId' when calling \");\n    }\n\n    // verify the required parameter 'workflowEmailId' is set\n    if (workflowEmailId === undefined || workflowEmailId === null) {\n      throw new Error(\"Missing the required parameter 'workflowEmailId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'workflow_id': workflowId,\n      'workflow_email_id': workflowEmailId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/automations/{workflow_id}/emails/{workflow_email_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update workflow email\n   * Update settings for a classic automation workflow email.  Only works with workflows of type: abandonedBrowse, abandonedCart, emailFollowup, or singleWelcome.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @param {String} workflowEmailId The unique id for the Automation workflow email.\n   * @param {module:model/UpdateInformationAboutASpecificWorkflowEmail} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AutomationWorkflowEmail}\n   */\n  this.updateWorkflowEmail = function(workflowId, workflowEmailId, body) {\n    return this.updateWorkflowEmailWithHttpInfo(workflowId, workflowEmailId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add automation\n   * Create a new classic automation in your Mailchimp account.\n   * @param {module:model/AutomationWorkflow1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AutomationWorkflow} and HTTP response\n   */\n  this.createWithHttpInfo = function(body) {\n    var postBody = body;\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/automations', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add automation\n   * Create a new classic automation in your Mailchimp account.\n   * @param {module:model/AutomationWorkflow1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AutomationWorkflow}\n   */\n  this.create = function(body) {\n    return this.createWithHttpInfo(body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Pause automation emails\n   * Pause all emails in a specific classic automation workflow.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.pauseAllEmailsWithHttpInfo = function(workflowId) {\n    var postBody = null;\n\n    // verify the required parameter 'workflowId' is set\n    if (workflowId === undefined || workflowId === null) {\n      throw new Error(\"Missing the required parameter 'workflowId' when calling \");\n    }\n\n    var pathParams = {\n      'workflow_id': workflowId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/automations/{workflow_id}/actions/pause-all-emails', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Pause automation emails\n   * Pause all emails in a specific classic automation workflow.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.pauseAllEmails = function(workflowId) {\n    return this.pauseAllEmailsWithHttpInfo(workflowId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Start automation emails\n   * Start all emails in a classic automation workflow.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.startAllEmailsWithHttpInfo = function(workflowId) {\n    var postBody = null;\n\n    // verify the required parameter 'workflowId' is set\n    if (workflowId === undefined || workflowId === null) {\n      throw new Error(\"Missing the required parameter 'workflowId' when calling \");\n    }\n\n    var pathParams = {\n      'workflow_id': workflowId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/automations/{workflow_id}/actions/start-all-emails', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Start automation emails\n   * Start all emails in a classic automation workflow.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.startAllEmails = function(workflowId) {\n    return this.startAllEmailsWithHttpInfo(workflowId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Pause automated email\n   * Pause an automated email.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @param {String} workflowEmailId The unique id for the Automation workflow email.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.pauseWorkflowEmailWithHttpInfo = function(workflowId, workflowEmailId) {\n    var postBody = null;\n\n    // verify the required parameter 'workflowId' is set\n    if (workflowId === undefined || workflowId === null) {\n      throw new Error(\"Missing the required parameter 'workflowId' when calling \");\n    }\n\n    // verify the required parameter 'workflowEmailId' is set\n    if (workflowEmailId === undefined || workflowEmailId === null) {\n      throw new Error(\"Missing the required parameter 'workflowEmailId' when calling \");\n    }\n\n    var pathParams = {\n      'workflow_id': workflowId,\n      'workflow_email_id': workflowEmailId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/automations/{workflow_id}/emails/{workflow_email_id}/actions/pause', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Pause automated email\n   * Pause an automated email.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @param {String} workflowEmailId The unique id for the Automation workflow email.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.pauseWorkflowEmail = function(workflowId, workflowEmailId) {\n    return this.pauseWorkflowEmailWithHttpInfo(workflowId, workflowEmailId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Start automated email\n   * Start an automated email.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @param {String} workflowEmailId The unique id for the Automation workflow email.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.startWorkflowEmailWithHttpInfo = function(workflowId, workflowEmailId) {\n    var postBody = null;\n\n    // verify the required parameter 'workflowId' is set\n    if (workflowId === undefined || workflowId === null) {\n      throw new Error(\"Missing the required parameter 'workflowId' when calling \");\n    }\n\n    // verify the required parameter 'workflowEmailId' is set\n    if (workflowEmailId === undefined || workflowEmailId === null) {\n      throw new Error(\"Missing the required parameter 'workflowEmailId' when calling \");\n    }\n\n    var pathParams = {\n      'workflow_id': workflowId,\n      'workflow_email_id': workflowEmailId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/automations/{workflow_id}/emails/{workflow_email_id}/actions/start', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Start automated email\n   * Start an automated email.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @param {String} workflowEmailId The unique id for the Automation workflow email.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.startWorkflowEmail = function(workflowId, workflowEmailId) {\n    return this.startWorkflowEmailWithHttpInfo(workflowId, workflowEmailId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add subscriber to workflow email\n   * Manually add a subscriber to a workflow, bypassing the default trigger settings. You can also use this endpoint to trigger a series of automated emails in an API 3.0 workflow type.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @param {String} workflowEmailId The unique id for the Automation workflow email.\n   * @param {module:model/SubscriberInAutomationQueue1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SubscriberInAutomationQueue2} and HTTP response\n   */\n  this.addWorkflowEmailSubscriberWithHttpInfo = function(workflowId, workflowEmailId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'workflowId' is set\n    if (workflowId === undefined || workflowId === null) {\n      throw new Error(\"Missing the required parameter 'workflowId' when calling \");\n    }\n\n    // verify the required parameter 'workflowEmailId' is set\n    if (workflowEmailId === undefined || workflowEmailId === null) {\n      throw new Error(\"Missing the required parameter 'workflowEmailId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'workflow_id': workflowId,\n      'workflow_email_id': workflowEmailId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/automations/{workflow_id}/emails/{workflow_email_id}/queue', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add subscriber to workflow email\n   * Manually add a subscriber to a workflow, bypassing the default trigger settings. You can also use this endpoint to trigger a series of automated emails in an API 3.0 workflow type.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @param {String} workflowEmailId The unique id for the Automation workflow email.\n   * @param {module:model/SubscriberInAutomationQueue1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SubscriberInAutomationQueue2}\n   */\n  this.addWorkflowEmailSubscriber = function(workflowId, workflowEmailId, body) {\n    return this.addWorkflowEmailSubscriberWithHttpInfo(workflowId, workflowEmailId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Remove subscriber from workflow\n   * Remove a subscriber from a specific classic automation workflow. You can remove a subscriber at any point in an automation workflow, regardless of how many emails they've been sent from that workflow. Once they're removed, they can never be added back to the same workflow.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @param {module:model/SubscriberInAutomationQueue3} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SubscriberRemovedFromAutomationWorkflow} and HTTP response\n   */\n  this.removeWorkflowEmailSubscriberWithHttpInfo = function(workflowId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'workflowId' is set\n    if (workflowId === undefined || workflowId === null) {\n      throw new Error(\"Missing the required parameter 'workflowId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'workflow_id': workflowId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/automations/{workflow_id}/removed-subscribers', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Remove subscriber from workflow\n   * Remove a subscriber from a specific classic automation workflow. You can remove a subscriber at any point in an automation workflow, regardless of how many emails they've been sent from that workflow. Once they're removed, they can never be added back to the same workflow.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @param {module:model/SubscriberInAutomationQueue3} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SubscriberRemovedFromAutomationWorkflow}\n   */\n  this.removeWorkflowEmailSubscriber = function(workflowId, body) {\n    return this.removeWorkflowEmailSubscriberWithHttpInfo(workflowId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n};\n\n\n//# sourceURL=webpack://invisibles23/./node_modules/@mailchimp/mailchimp_marketing/src/api/AutomationsApi.js?");

/***/ }),

/***/ "./node_modules/@mailchimp/mailchimp_marketing/src/api/BatchWebhooksApi.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@mailchimp/mailchimp_marketing/src/api/BatchWebhooksApi.js ***!
  \*********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n * Mailchimp Marketing API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.80\n * Contact: apihelp@mailchimp.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.12\n *\n * Do not edit the class manually.\n *\n */\n\n\n\nvar ApiClient = __webpack_require__(/*! ../ApiClient */ \"./node_modules/@mailchimp/mailchimp_marketing/src/ApiClient.js\");\n\n/**\n * BatchWebhooks service.\n * @module api/BatchWebhooksApi\n */\n\n/**\n * Constructs a new BatchWebhooksApi. \n * @alias module:api/BatchWebhooksApi\n * @class\n * @param {module:ApiClient} apiClient Optional API client implementation to use,\n * default to {@link module:ApiClient#instance} if unspecified.\n */\nmodule.exports = function(apiClient) {\n  this.apiClient = apiClient || ApiClient.instance;\n\n  /**\n   * Delete batch webhook\n   * Remove a batch webhook. Webhooks will no longer be sent to the given URL.\n   * @param {String} batchWebhookId The unique id for the batch webhook.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.removeWithHttpInfo = function(batchWebhookId) {\n    var postBody = null;\n\n    // verify the required parameter 'batchWebhookId' is set\n    if (batchWebhookId === undefined || batchWebhookId === null) {\n      throw new Error(\"Missing the required parameter 'batchWebhookId' when calling \");\n    }\n\n    var pathParams = {\n      'batch_webhook_id': batchWebhookId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/batch-webhooks/{batch_webhook_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete batch webhook\n   * Remove a batch webhook. Webhooks will no longer be sent to the given URL.\n   * @param {String} batchWebhookId The unique id for the batch webhook.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.remove = function(batchWebhookId) {\n    return this.removeWithHttpInfo(batchWebhookId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get batch webhook info\n   * Get information about a specific batch webhook.\n   * @param {String} batchWebhookId The unique id for the batch webhook.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BatchWebhook} and HTTP response\n   */\n  this.getWithHttpInfo = function(batchWebhookId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'batchWebhookId' is set\n    if (batchWebhookId === undefined || batchWebhookId === null) {\n      throw new Error(\"Missing the required parameter 'batchWebhookId' when calling \");\n    }\n\n    var pathParams = {\n      'batch_webhook_id': batchWebhookId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/batch-webhooks/{batch_webhook_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get batch webhook info\n   * Get information about a specific batch webhook.\n   * @param {String} batchWebhookId The unique id for the batch webhook.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BatchWebhook}\n   */\n  this.get = function(batchWebhookId, opts) {\n    return this.getWithHttpInfo(batchWebhookId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List batch webhooks\n   * Get all webhooks that have been configured for batches.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BatchWebhooks} and HTTP response\n   */\n  this.listWithHttpInfo = function(opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/batch-webhooks', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List batch webhooks\n   * Get all webhooks that have been configured for batches.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BatchWebhooks}\n   */\n  this.list = function(opts) {\n    return this.listWithHttpInfo(opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update batch webhook\n   * Update a webhook that will fire whenever any batch request completes processing.\n   * @param {String} batchWebhookId The unique id for the batch webhook.\n   * @param {module:model/BatchWebhook2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BatchWebhook} and HTTP response\n   */\n  this.updateWithHttpInfo = function(batchWebhookId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'batchWebhookId' is set\n    if (batchWebhookId === undefined || batchWebhookId === null) {\n      throw new Error(\"Missing the required parameter 'batchWebhookId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'batch_webhook_id': batchWebhookId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/batch-webhooks/{batch_webhook_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update batch webhook\n   * Update a webhook that will fire whenever any batch request completes processing.\n   * @param {String} batchWebhookId The unique id for the batch webhook.\n   * @param {module:model/BatchWebhook2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BatchWebhook}\n   */\n  this.update = function(batchWebhookId, body) {\n    return this.updateWithHttpInfo(batchWebhookId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add batch webhook\n   * Configure a webhook that will fire whenever any batch request completes processing.  You may only have a maximum of 20 batch webhooks.\n   * @param {module:model/BatchWebhook1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BatchWebhook} and HTTP response\n   */\n  this.createWithHttpInfo = function(body) {\n    var postBody = body;\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/batch-webhooks', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add batch webhook\n   * Configure a webhook that will fire whenever any batch request completes processing.  You may only have a maximum of 20 batch webhooks.\n   * @param {module:model/BatchWebhook1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BatchWebhook}\n   */\n  this.create = function(body) {\n    return this.createWithHttpInfo(body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n};\n\n\n//# sourceURL=webpack://invisibles23/./node_modules/@mailchimp/mailchimp_marketing/src/api/BatchWebhooksApi.js?");

/***/ }),

/***/ "./node_modules/@mailchimp/mailchimp_marketing/src/api/BatchesApi.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@mailchimp/mailchimp_marketing/src/api/BatchesApi.js ***!
  \***************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n * Mailchimp Marketing API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.80\n * Contact: apihelp@mailchimp.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.12\n *\n * Do not edit the class manually.\n *\n */\n\n\n\nvar ApiClient = __webpack_require__(/*! ../ApiClient */ \"./node_modules/@mailchimp/mailchimp_marketing/src/ApiClient.js\");\n\n/**\n * Batches service.\n * @module api/BatchesApi\n */\n\n/**\n * Constructs a new BatchesApi. \n * @alias module:api/BatchesApi\n * @class\n * @param {module:ApiClient} apiClient Optional API client implementation to use,\n * default to {@link module:ApiClient#instance} if unspecified.\n */\nmodule.exports = function(apiClient) {\n  this.apiClient = apiClient || ApiClient.instance;\n\n  /**\n   * Delete batch request\n   * Stops a batch request from running. Since only one batch request is run at a time, this can be used to cancel a long running request. The results of any completed operations will not be available after this call.\n   * @param {String} batchId The unique id for the batch operation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.deleteRequestWithHttpInfo = function(batchId) {\n    var postBody = null;\n\n    // verify the required parameter 'batchId' is set\n    if (batchId === undefined || batchId === null) {\n      throw new Error(\"Missing the required parameter 'batchId' when calling \");\n    }\n\n    var pathParams = {\n      'batch_id': batchId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/batches/{batch_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete batch request\n   * Stops a batch request from running. Since only one batch request is run at a time, this can be used to cancel a long running request. The results of any completed operations will not be available after this call.\n   * @param {String} batchId The unique id for the batch operation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.deleteRequest = function(batchId) {\n    return this.deleteRequestWithHttpInfo(batchId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List batch requests\n   * Get a summary of batch requests that have been made.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BatchOperations} and HTTP response\n   */\n  this.listWithHttpInfo = function(opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/batches', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List batch requests\n   * Get a summary of batch requests that have been made.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BatchOperations}\n   */\n  this.list = function(opts) {\n    return this.listWithHttpInfo(opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get batch operation status\n   * Get the status of a batch request.\n   * @param {String} batchId The unique id for the batch operation.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Batch} and HTTP response\n   */\n  this.statusWithHttpInfo = function(batchId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'batchId' is set\n    if (batchId === undefined || batchId === null) {\n      throw new Error(\"Missing the required parameter 'batchId' when calling \");\n    }\n\n    var pathParams = {\n      'batch_id': batchId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/batches/{batch_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get batch operation status\n   * Get the status of a batch request.\n   * @param {String} batchId The unique id for the batch operation.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Batch}\n   */\n  this.status = function(batchId, opts) {\n    return this.statusWithHttpInfo(batchId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Start batch operation\n   * Begin processing a batch operations request.\n   * @param {module:model/Body} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Batch} and HTTP response\n   */\n  this.startWithHttpInfo = function(body) {\n    var postBody = body;\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/batches', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Start batch operation\n   * Begin processing a batch operations request.\n   * @param {module:model/Body} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Batch}\n   */\n  this.start = function(body) {\n    return this.startWithHttpInfo(body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n};\n\n\n//# sourceURL=webpack://invisibles23/./node_modules/@mailchimp/mailchimp_marketing/src/api/BatchesApi.js?");

/***/ }),

/***/ "./node_modules/@mailchimp/mailchimp_marketing/src/api/CampaignFoldersApi.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@mailchimp/mailchimp_marketing/src/api/CampaignFoldersApi.js ***!
  \***********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n * Mailchimp Marketing API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.80\n * Contact: apihelp@mailchimp.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.12\n *\n * Do not edit the class manually.\n *\n */\n\n\n\nvar ApiClient = __webpack_require__(/*! ../ApiClient */ \"./node_modules/@mailchimp/mailchimp_marketing/src/ApiClient.js\");\n\n/**\n * CampaignFolders service.\n * @module api/CampaignFoldersApi\n */\n\n/**\n * Constructs a new CampaignFoldersApi. \n * @alias module:api/CampaignFoldersApi\n * @class\n * @param {module:ApiClient} apiClient Optional API client implementation to use,\n * default to {@link module:ApiClient#instance} if unspecified.\n */\nmodule.exports = function(apiClient) {\n  this.apiClient = apiClient || ApiClient.instance;\n\n  /**\n   * Delete campaign folder\n   * Delete a specific campaign folder, and mark all the campaigns in the folder as 'unfiled'.\n   * @param {String} folderId The unique id for the campaign folder.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.removeWithHttpInfo = function(folderId) {\n    var postBody = null;\n\n    // verify the required parameter 'folderId' is set\n    if (folderId === undefined || folderId === null) {\n      throw new Error(\"Missing the required parameter 'folderId' when calling \");\n    }\n\n    var pathParams = {\n      'folder_id': folderId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/campaign-folders/{folder_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete campaign folder\n   * Delete a specific campaign folder, and mark all the campaigns in the folder as 'unfiled'.\n   * @param {String} folderId The unique id for the campaign folder.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.remove = function(folderId) {\n    return this.removeWithHttpInfo(folderId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List campaign folders\n   * Get all folders used to organize campaigns.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CampaignFolders} and HTTP response\n   */\n  this.listWithHttpInfo = function(opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/campaign-folders', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List campaign folders\n   * Get all folders used to organize campaigns.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CampaignFolders}\n   */\n  this.list = function(opts) {\n    return this.listWithHttpInfo(opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get campaign folder\n   * Get information about a specific folder used to organize campaigns.\n   * @param {String} folderId The unique id for the campaign folder.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CampaignFolder} and HTTP response\n   */\n  this.getWithHttpInfo = function(folderId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'folderId' is set\n    if (folderId === undefined || folderId === null) {\n      throw new Error(\"Missing the required parameter 'folderId' when calling \");\n    }\n\n    var pathParams = {\n      'folder_id': folderId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/campaign-folders/{folder_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get campaign folder\n   * Get information about a specific folder used to organize campaigns.\n   * @param {String} folderId The unique id for the campaign folder.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CampaignFolder}\n   */\n  this.get = function(folderId, opts) {\n    return this.getWithHttpInfo(folderId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update campaign folder\n   * Update a specific folder used to organize campaigns.\n   * @param {String} folderId The unique id for the campaign folder.\n   * @param {module:model/CampaignFolder2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CampaignFolder} and HTTP response\n   */\n  this.updateWithHttpInfo = function(folderId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'folderId' is set\n    if (folderId === undefined || folderId === null) {\n      throw new Error(\"Missing the required parameter 'folderId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'folder_id': folderId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/campaign-folders/{folder_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update campaign folder\n   * Update a specific folder used to organize campaigns.\n   * @param {String} folderId The unique id for the campaign folder.\n   * @param {module:model/CampaignFolder2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CampaignFolder}\n   */\n  this.update = function(folderId, body) {\n    return this.updateWithHttpInfo(folderId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add campaign folder\n   * Create a new campaign folder.\n   * @param {module:model/CampaignFolder1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CampaignFolder} and HTTP response\n   */\n  this.createWithHttpInfo = function(body) {\n    var postBody = body;\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/campaign-folders', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add campaign folder\n   * Create a new campaign folder.\n   * @param {module:model/CampaignFolder1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CampaignFolder}\n   */\n  this.create = function(body) {\n    return this.createWithHttpInfo(body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n};\n\n\n//# sourceURL=webpack://invisibles23/./node_modules/@mailchimp/mailchimp_marketing/src/api/CampaignFoldersApi.js?");

/***/ }),

/***/ "./node_modules/@mailchimp/mailchimp_marketing/src/api/CampaignsApi.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@mailchimp/mailchimp_marketing/src/api/CampaignsApi.js ***!
  \*****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n * Mailchimp Marketing API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.80\n * Contact: apihelp@mailchimp.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.12\n *\n * Do not edit the class manually.\n *\n */\n\n\n\nvar ApiClient = __webpack_require__(/*! ../ApiClient */ \"./node_modules/@mailchimp/mailchimp_marketing/src/ApiClient.js\");\n\n/**\n * Campaigns service.\n * @module api/CampaignsApi\n */\n\n/**\n * Constructs a new CampaignsApi. \n * @alias module:api/CampaignsApi\n * @class\n * @param {module:ApiClient} apiClient Optional API client implementation to use,\n * default to {@link module:ApiClient#instance} if unspecified.\n */\nmodule.exports = function(apiClient) {\n  this.apiClient = apiClient || ApiClient.instance;\n\n  /**\n   * Delete campaign\n   * Remove a campaign from your Mailchimp account.\n   * @param {String} campaignId The unique id for the campaign.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.removeWithHttpInfo = function(campaignId) {\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/campaigns/{campaign_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete campaign\n   * Remove a campaign from your Mailchimp account.\n   * @param {String} campaignId The unique id for the campaign.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.remove = function(campaignId) {\n    return this.removeWithHttpInfo(campaignId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Delete campaign feedback message\n   * Remove a specific feedback message for a campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {String} feedbackId The unique id for the feedback message.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.deleteFeedbackMessageWithHttpInfo = function(campaignId, feedbackId) {\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    // verify the required parameter 'feedbackId' is set\n    if (feedbackId === undefined || feedbackId === null) {\n      throw new Error(\"Missing the required parameter 'feedbackId' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId,\n      'feedback_id': feedbackId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/campaigns/{campaign_id}/feedback/{feedback_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete campaign feedback message\n   * Remove a specific feedback message for a campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {String} feedbackId The unique id for the feedback message.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.deleteFeedbackMessage = function(campaignId, feedbackId) {\n    return this.deleteFeedbackMessageWithHttpInfo(campaignId, feedbackId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List campaigns\n   * Get all campaigns in an account.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {module:model/String} opts.type The campaign type.\n   * @param {module:model/String} opts.status The status of the campaign.\n   * @param {Date} opts.beforeSendTime Restrict the response to campaigns sent before the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {Date} opts.sinceSendTime Restrict the response to campaigns sent after the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {Date} opts.beforeCreateTime Restrict the response to campaigns created before the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {Date} opts.sinceCreateTime Restrict the response to campaigns created after the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.listId The unique id for the list.\n   * @param {String} opts.folderId The unique folder id.\n   * @param {String} opts.memberId Retrieve campaigns sent to a particular list member. Member ID is The MD5 hash of the lowercase version of the list member’s email address.\n   * @param {module:model/String} opts.sortField Returns files sorted by the specified field.\n   * @param {module:model/String} opts.sortDir Determines the order direction for sorted results.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2005} and HTTP response\n   */\n  this.listWithHttpInfo = function(opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset']),\n      'type': ( opts['type'] ? opts['type'] : opts['type']),\n      'status': ( opts['status'] ? opts['status'] : opts['status']),\n      'before_send_time': ( opts['beforeSendTime'] ? opts['beforeSendTime'] : opts['before_send_time']),\n      'since_send_time': ( opts['sinceSendTime'] ? opts['sinceSendTime'] : opts['since_send_time']),\n      'before_create_time': ( opts['beforeCreateTime'] ? opts['beforeCreateTime'] : opts['before_create_time']),\n      'since_create_time': ( opts['sinceCreateTime'] ? opts['sinceCreateTime'] : opts['since_create_time']),\n      'list_id': ( opts['listId'] ? opts['listId'] : opts['list_id']),\n      'folder_id': ( opts['folderId'] ? opts['folderId'] : opts['folder_id']),\n      'member_id': ( opts['memberId'] ? opts['memberId'] : opts['member_id']),\n      'sort_field': ( opts['sortField'] ? opts['sortField'] : opts['sort_field']),\n      'sort_dir': ( opts['sortDir'] ? opts['sortDir'] : opts['sort_dir'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/campaigns', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List campaigns\n   * Get all campaigns in an account.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {module:model/String} opts.type The campaign type.\n   * @param {module:model/String} opts.status The status of the campaign.\n   * @param {Date} opts.beforeSendTime Restrict the response to campaigns sent before the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {Date} opts.sinceSendTime Restrict the response to campaigns sent after the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {Date} opts.beforeCreateTime Restrict the response to campaigns created before the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {Date} opts.sinceCreateTime Restrict the response to campaigns created after the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.listId The unique id for the list.\n   * @param {String} opts.folderId The unique folder id.\n   * @param {String} opts.memberId Retrieve campaigns sent to a particular list member. Member ID is The MD5 hash of the lowercase version of the list member’s email address.\n   * @param {module:model/String} opts.sortField Returns files sorted by the specified field.\n   * @param {module:model/String} opts.sortDir Determines the order direction for sorted results.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2005}\n   */\n  this.list = function(opts) {\n    return this.listWithHttpInfo(opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get campaign info\n   * Get information about a specific campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Campaign} and HTTP response\n   */\n  this.getWithHttpInfo = function(campaignId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/campaigns/{campaign_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get campaign info\n   * Get information about a specific campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Campaign}\n   */\n  this.get = function(campaignId, opts) {\n    return this.getWithHttpInfo(campaignId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get campaign content\n   * Get the the HTML and plain-text content for a campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CampaignContent} and HTTP response\n   */\n  this.getContentWithHttpInfo = function(campaignId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/campaigns/{campaign_id}/content', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get campaign content\n   * Get the the HTML and plain-text content for a campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CampaignContent}\n   */\n  this.getContent = function(campaignId, opts) {\n    return this.getContentWithHttpInfo(campaignId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List campaign feedback\n   * Get team feedback while you're working together on a Mailchimp campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CampaignReports} and HTTP response\n   */\n  this.getFeedbackWithHttpInfo = function(campaignId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/campaigns/{campaign_id}/feedback', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List campaign feedback\n   * Get team feedback while you're working together on a Mailchimp campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CampaignReports}\n   */\n  this.getFeedback = function(campaignId, opts) {\n    return this.getFeedbackWithHttpInfo(campaignId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get campaign feedback message\n   * Get a specific feedback message from a campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {String} feedbackId The unique id for the feedback message.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CampaignFeedback2} and HTTP response\n   */\n  this.getFeedbackMessageWithHttpInfo = function(campaignId, feedbackId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    // verify the required parameter 'feedbackId' is set\n    if (feedbackId === undefined || feedbackId === null) {\n      throw new Error(\"Missing the required parameter 'feedbackId' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId,\n      'feedback_id': feedbackId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/campaigns/{campaign_id}/feedback/{feedback_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get campaign feedback message\n   * Get a specific feedback message from a campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {String} feedbackId The unique id for the feedback message.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CampaignFeedback2}\n   */\n  this.getFeedbackMessage = function(campaignId, feedbackId, opts) {\n    return this.getFeedbackMessageWithHttpInfo(campaignId, feedbackId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get campaign send checklist\n   * Review the send checklist for a campaign, and resolve any issues before sending.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SendChecklist} and HTTP response\n   */\n  this.getSendChecklistWithHttpInfo = function(campaignId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/campaigns/{campaign_id}/send-checklist', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get campaign send checklist\n   * Review the send checklist for a campaign, and resolve any issues before sending.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SendChecklist}\n   */\n  this.getSendChecklist = function(campaignId, opts) {\n    return this.getSendChecklistWithHttpInfo(campaignId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update campaign settings\n   * Update some or all of the settings for a specific campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {module:model/Campaign2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Campaign} and HTTP response\n   */\n  this.updateWithHttpInfo = function(campaignId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/campaigns/{campaign_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update campaign settings\n   * Update some or all of the settings for a specific campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {module:model/Campaign2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Campaign}\n   */\n  this.update = function(campaignId, body) {\n    return this.updateWithHttpInfo(campaignId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update campaign feedback message\n   * Update a specific feedback message for a campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {String} feedbackId The unique id for the feedback message.\n   * @param {module:model/CampaignFeedback3} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CampaignFeedback2} and HTTP response\n   */\n  this.updateFeedbackMessageWithHttpInfo = function(campaignId, feedbackId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    // verify the required parameter 'feedbackId' is set\n    if (feedbackId === undefined || feedbackId === null) {\n      throw new Error(\"Missing the required parameter 'feedbackId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId,\n      'feedback_id': feedbackId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/campaigns/{campaign_id}/feedback/{feedback_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update campaign feedback message\n   * Update a specific feedback message for a campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {String} feedbackId The unique id for the feedback message.\n   * @param {module:model/CampaignFeedback3} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CampaignFeedback2}\n   */\n  this.updateFeedbackMessage = function(campaignId, feedbackId, body) {\n    return this.updateFeedbackMessageWithHttpInfo(campaignId, feedbackId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add campaign\n   * Create a new Mailchimp campaign.\n   * @param {module:model/Campaign1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Campaign} and HTTP response\n   */\n  this.createWithHttpInfo = function(body) {\n    var postBody = body;\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/campaigns', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add campaign\n   * Create a new Mailchimp campaign.\n   * @param {module:model/Campaign1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Campaign}\n   */\n  this.create = function(body) {\n    return this.createWithHttpInfo(body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Cancel campaign\n   * Cancel a Regular or Plain-Text Campaign after you send, before all of your recipients receive it. This feature is included with Mailchimp Pro.\n   * @param {String} campaignId The unique id for the campaign.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.cancelSendWithHttpInfo = function(campaignId) {\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/campaigns/{campaign_id}/actions/cancel-send', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Cancel campaign\n   * Cancel a Regular or Plain-Text Campaign after you send, before all of your recipients receive it. This feature is included with Mailchimp Pro.\n   * @param {String} campaignId The unique id for the campaign.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.cancelSend = function(campaignId) {\n    return this.cancelSendWithHttpInfo(campaignId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Resend campaign\n   * Creates a Resend to Non-Openers version of this campaign. We will also check if this campaign meets the criteria for Resend to Non-Openers campaigns.\n   * @param {String} campaignId The unique id for the campaign.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Campaign3} and HTTP response\n   */\n  this.createResendWithHttpInfo = function(campaignId) {\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/campaigns/{campaign_id}/actions/create-resend', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Resend campaign\n   * Creates a Resend to Non-Openers version of this campaign. We will also check if this campaign meets the criteria for Resend to Non-Openers campaigns.\n   * @param {String} campaignId The unique id for the campaign.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Campaign3}\n   */\n  this.createResend = function(campaignId) {\n    return this.createResendWithHttpInfo(campaignId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Pause rss campaign\n   * Pause an RSS-Driven campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.pauseWithHttpInfo = function(campaignId) {\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/campaigns/{campaign_id}/actions/pause', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Pause rss campaign\n   * Pause an RSS-Driven campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.pause = function(campaignId) {\n    return this.pauseWithHttpInfo(campaignId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Replicate campaign\n   * Replicate a campaign in saved or send status.\n   * @param {String} campaignId The unique id for the campaign.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Campaign3} and HTTP response\n   */\n  this.replicateWithHttpInfo = function(campaignId) {\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/campaigns/{campaign_id}/actions/replicate', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Replicate campaign\n   * Replicate a campaign in saved or send status.\n   * @param {String} campaignId The unique id for the campaign.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Campaign3}\n   */\n  this.replicate = function(campaignId) {\n    return this.replicateWithHttpInfo(campaignId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Resume rss campaign\n   * Resume an RSS-Driven campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.resumeWithHttpInfo = function(campaignId) {\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/campaigns/{campaign_id}/actions/resume', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Resume rss campaign\n   * Resume an RSS-Driven campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.resume = function(campaignId) {\n    return this.resumeWithHttpInfo(campaignId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Schedule campaign\n   * Schedule a campaign for delivery. If you're using Multivariate Campaigns to test send times or sending RSS Campaigns, use the send action instead.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {module:model/Body1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.scheduleWithHttpInfo = function(campaignId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/campaigns/{campaign_id}/actions/schedule', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Schedule campaign\n   * Schedule a campaign for delivery. If you're using Multivariate Campaigns to test send times or sending RSS Campaigns, use the send action instead.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {module:model/Body1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.schedule = function(campaignId, body) {\n    return this.scheduleWithHttpInfo(campaignId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Send campaign\n   * Send a Mailchimp campaign. For RSS Campaigns, the campaign will send according to its schedule. All other campaigns will send immediately.\n   * @param {String} campaignId The unique id for the campaign.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.sendWithHttpInfo = function(campaignId) {\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/campaigns/{campaign_id}/actions/send', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Send campaign\n   * Send a Mailchimp campaign. For RSS Campaigns, the campaign will send according to its schedule. All other campaigns will send immediately.\n   * @param {String} campaignId The unique id for the campaign.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.send = function(campaignId) {\n    return this.sendWithHttpInfo(campaignId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Send test email\n   * Send a test email.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {module:model/Body2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.sendTestEmailWithHttpInfo = function(campaignId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/campaigns/{campaign_id}/actions/test', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Send test email\n   * Send a test email.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {module:model/Body2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.sendTestEmail = function(campaignId, body) {\n    return this.sendTestEmailWithHttpInfo(campaignId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Unschedule campaign\n   * Unschedule a scheduled campaign that hasn't started sending.\n   * @param {String} campaignId The unique id for the campaign.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.unscheduleWithHttpInfo = function(campaignId) {\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/campaigns/{campaign_id}/actions/unschedule', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Unschedule campaign\n   * Unschedule a scheduled campaign that hasn't started sending.\n   * @param {String} campaignId The unique id for the campaign.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.unschedule = function(campaignId) {\n    return this.unscheduleWithHttpInfo(campaignId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add campaign feedback\n   * Add feedback on a specific campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {module:model/CampaignFeedback1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CampaignFeedback2} and HTTP response\n   */\n  this.addFeedbackWithHttpInfo = function(campaignId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/campaigns/{campaign_id}/feedback', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add campaign feedback\n   * Add feedback on a specific campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {module:model/CampaignFeedback1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CampaignFeedback2}\n   */\n  this.addFeedback = function(campaignId, body) {\n    return this.addFeedbackWithHttpInfo(campaignId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Set campaign content\n   * Set the content for a campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {module:model/CampaignContent1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CampaignContent} and HTTP response\n   */\n  this.setContentWithHttpInfo = function(campaignId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/campaigns/{campaign_id}/content', 'PUT',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Set campaign content\n   * Set the content for a campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {module:model/CampaignContent1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CampaignContent}\n   */\n  this.setContent = function(campaignId, body) {\n    return this.setContentWithHttpInfo(campaignId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n};\n\n\n//# sourceURL=webpack://invisibles23/./node_modules/@mailchimp/mailchimp_marketing/src/api/CampaignsApi.js?");

/***/ }),

/***/ "./node_modules/@mailchimp/mailchimp_marketing/src/api/ConnectedSitesApi.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@mailchimp/mailchimp_marketing/src/api/ConnectedSitesApi.js ***!
  \**********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n * Mailchimp Marketing API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.80\n * Contact: apihelp@mailchimp.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.12\n *\n * Do not edit the class manually.\n *\n */\n\n\n\nvar ApiClient = __webpack_require__(/*! ../ApiClient */ \"./node_modules/@mailchimp/mailchimp_marketing/src/ApiClient.js\");\n\n/**\n * ConnectedSites service.\n * @module api/ConnectedSitesApi\n */\n\n/**\n * Constructs a new ConnectedSitesApi. \n * @alias module:api/ConnectedSitesApi\n * @class\n * @param {module:ApiClient} apiClient Optional API client implementation to use,\n * default to {@link module:ApiClient#instance} if unspecified.\n */\nmodule.exports = function(apiClient) {\n  this.apiClient = apiClient || ApiClient.instance;\n\n  /**\n   * Delete connected site\n   * Remove a connected site from your Mailchimp account.\n   * @param {String} connectedSiteId The unique identifier for the site.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.removeWithHttpInfo = function(connectedSiteId) {\n    var postBody = null;\n\n    // verify the required parameter 'connectedSiteId' is set\n    if (connectedSiteId === undefined || connectedSiteId === null) {\n      throw new Error(\"Missing the required parameter 'connectedSiteId' when calling \");\n    }\n\n    var pathParams = {\n      'connected_site_id': connectedSiteId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/connected-sites/{connected_site_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete connected site\n   * Remove a connected site from your Mailchimp account.\n   * @param {String} connectedSiteId The unique identifier for the site.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.remove = function(connectedSiteId) {\n    return this.removeWithHttpInfo(connectedSiteId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List connected sites\n   * Get all connected sites in an account.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ConnectedSites} and HTTP response\n   */\n  this.listWithHttpInfo = function(opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/connected-sites', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List connected sites\n   * Get all connected sites in an account.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ConnectedSites}\n   */\n  this.list = function(opts) {\n    return this.listWithHttpInfo(opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get connected site\n   * Get information about a specific connected site.\n   * @param {String} connectedSiteId The unique identifier for the site.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ConnectedSite} and HTTP response\n   */\n  this.getWithHttpInfo = function(connectedSiteId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'connectedSiteId' is set\n    if (connectedSiteId === undefined || connectedSiteId === null) {\n      throw new Error(\"Missing the required parameter 'connectedSiteId' when calling \");\n    }\n\n    var pathParams = {\n      'connected_site_id': connectedSiteId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/connected-sites/{connected_site_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get connected site\n   * Get information about a specific connected site.\n   * @param {String} connectedSiteId The unique identifier for the site.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ConnectedSite}\n   */\n  this.get = function(connectedSiteId, opts) {\n    return this.getWithHttpInfo(connectedSiteId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add connected site\n   * Create a new Mailchimp connected site.\n   * @param {module:model/ConnectedSite1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ConnectedSite} and HTTP response\n   */\n  this.createWithHttpInfo = function(body) {\n    var postBody = body;\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/connected-sites', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add connected site\n   * Create a new Mailchimp connected site.\n   * @param {module:model/ConnectedSite1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ConnectedSite}\n   */\n  this.create = function(body) {\n    return this.createWithHttpInfo(body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Verify connected site script\n   * Verify that the connected sites script has been installed, either via the script URL or fragment.\n   * @param {String} connectedSiteId The unique identifier for the site.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.verifyScriptInstallationWithHttpInfo = function(connectedSiteId) {\n    var postBody = null;\n\n    // verify the required parameter 'connectedSiteId' is set\n    if (connectedSiteId === undefined || connectedSiteId === null) {\n      throw new Error(\"Missing the required parameter 'connectedSiteId' when calling \");\n    }\n\n    var pathParams = {\n      'connected_site_id': connectedSiteId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/connected-sites/{connected_site_id}/actions/verify-script-installation', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Verify connected site script\n   * Verify that the connected sites script has been installed, either via the script URL or fragment.\n   * @param {String} connectedSiteId The unique identifier for the site.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.verifyScriptInstallation = function(connectedSiteId) {\n    return this.verifyScriptInstallationWithHttpInfo(connectedSiteId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n};\n\n\n//# sourceURL=webpack://invisibles23/./node_modules/@mailchimp/mailchimp_marketing/src/api/ConnectedSitesApi.js?");

/***/ }),

/***/ "./node_modules/@mailchimp/mailchimp_marketing/src/api/ConversationsApi.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@mailchimp/mailchimp_marketing/src/api/ConversationsApi.js ***!
  \*********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n * Mailchimp Marketing API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.80\n * Contact: apihelp@mailchimp.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.12\n *\n * Do not edit the class manually.\n *\n */\n\n\n\nvar ApiClient = __webpack_require__(/*! ../ApiClient */ \"./node_modules/@mailchimp/mailchimp_marketing/src/ApiClient.js\");\n\n/**\n * Conversations service.\n * @module api/ConversationsApi\n */\n\n/**\n * Constructs a new ConversationsApi. \n * @alias module:api/ConversationsApi\n * @class\n * @param {module:ApiClient} apiClient Optional API client implementation to use,\n * default to {@link module:ApiClient#instance} if unspecified.\n */\nmodule.exports = function(apiClient) {\n  this.apiClient = apiClient || ApiClient.instance;\n\n  /**\n   * List conversations\n   * Get a list of conversations for the account. Conversations has been deprecated in favor of Inbox and these endpoints don't include Inbox data. Past Conversations are still available via this endpoint, but new campaign replies and other Inbox messages aren’t available using this endpoint.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {module:model/String} opts.hasUnreadMessages Whether the conversation has any unread messages.\n   * @param {String} opts.listId The unique id for the list.\n   * @param {String} opts.campaignId The unique id for the campaign.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TrackedConversations} and HTTP response\n   */\n  this.listWithHttpInfo = function(opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset']),\n      'has_unread_messages': ( opts['hasUnreadMessages'] ? opts['hasUnreadMessages'] : opts['has_unread_messages']),\n      'list_id': ( opts['listId'] ? opts['listId'] : opts['list_id']),\n      'campaign_id': ( opts['campaignId'] ? opts['campaignId'] : opts['campaign_id'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/conversations', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List conversations\n   * Get a list of conversations for the account. Conversations has been deprecated in favor of Inbox and these endpoints don't include Inbox data. Past Conversations are still available via this endpoint, but new campaign replies and other Inbox messages aren’t available using this endpoint.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {module:model/String} opts.hasUnreadMessages Whether the conversation has any unread messages.\n   * @param {String} opts.listId The unique id for the list.\n   * @param {String} opts.campaignId The unique id for the campaign.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TrackedConversations}\n   */\n  this.list = function(opts) {\n    return this.listWithHttpInfo(opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get conversation\n   * Get details about an individual conversation. Conversations has been deprecated in favor of Inbox and these endpoints don't include Inbox data. Past Conversations are still available via this endpoint, but new campaign replies and other Inbox messages aren’t available using this endpoint.\n   * @param {String} conversationId The unique id for the conversation.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Conversation} and HTTP response\n   */\n  this.getWithHttpInfo = function(conversationId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'conversationId' is set\n    if (conversationId === undefined || conversationId === null) {\n      throw new Error(\"Missing the required parameter 'conversationId' when calling \");\n    }\n\n    var pathParams = {\n      'conversation_id': conversationId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/conversations/{conversation_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get conversation\n   * Get details about an individual conversation. Conversations has been deprecated in favor of Inbox and these endpoints don't include Inbox data. Past Conversations are still available via this endpoint, but new campaign replies and other Inbox messages aren’t available using this endpoint.\n   * @param {String} conversationId The unique id for the conversation.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Conversation}\n   */\n  this.get = function(conversationId, opts) {\n    return this.getWithHttpInfo(conversationId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List messages\n   * Get messages from a specific conversation. Conversations has been deprecated in favor of Inbox and these endpoints don't include Inbox data. Past Conversations are still available via this endpoint, but new campaign replies and other Inbox messages aren’t available using this endpoint.\n   * @param {String} conversationId The unique id for the conversation.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {module:model/String} opts.isRead Whether a conversation message has been marked as read.\n   * @param {Date} opts.beforeTimestamp Restrict the response to messages created before the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {Date} opts.sinceTimestamp Restrict the response to messages created after the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CollectionOfConversationMessages} and HTTP response\n   */\n  this.getConversationMessagesWithHttpInfo = function(conversationId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'conversationId' is set\n    if (conversationId === undefined || conversationId === null) {\n      throw new Error(\"Missing the required parameter 'conversationId' when calling \");\n    }\n\n    var pathParams = {\n      'conversation_id': conversationId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'is_read': ( opts['isRead'] ? opts['isRead'] : opts['is_read']),\n      'before_timestamp': ( opts['beforeTimestamp'] ? opts['beforeTimestamp'] : opts['before_timestamp']),\n      'since_timestamp': ( opts['sinceTimestamp'] ? opts['sinceTimestamp'] : opts['since_timestamp'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/conversations/{conversation_id}/messages', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List messages\n   * Get messages from a specific conversation. Conversations has been deprecated in favor of Inbox and these endpoints don't include Inbox data. Past Conversations are still available via this endpoint, but new campaign replies and other Inbox messages aren’t available using this endpoint.\n   * @param {String} conversationId The unique id for the conversation.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {module:model/String} opts.isRead Whether a conversation message has been marked as read.\n   * @param {Date} opts.beforeTimestamp Restrict the response to messages created before the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {Date} opts.sinceTimestamp Restrict the response to messages created after the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CollectionOfConversationMessages}\n   */\n  this.getConversationMessages = function(conversationId, opts) {\n    return this.getConversationMessagesWithHttpInfo(conversationId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get message\n   * Get an individual message in a conversation. Conversations has been deprecated in favor of Inbox and these endpoints don't include Inbox data. Past Conversations are still available via this endpoint, but new campaign replies and other Inbox messages aren’t available using this endpoint.\n   * @param {String} conversationId The unique id for the conversation.\n   * @param {String} messageId The unique id for the conversation message.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ConversationMessage} and HTTP response\n   */\n  this.getConversationMessageWithHttpInfo = function(conversationId, messageId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'conversationId' is set\n    if (conversationId === undefined || conversationId === null) {\n      throw new Error(\"Missing the required parameter 'conversationId' when calling \");\n    }\n\n    // verify the required parameter 'messageId' is set\n    if (messageId === undefined || messageId === null) {\n      throw new Error(\"Missing the required parameter 'messageId' when calling \");\n    }\n\n    var pathParams = {\n      'conversation_id': conversationId,\n      'message_id': messageId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/conversations/{conversation_id}/messages/{message_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get message\n   * Get an individual message in a conversation. Conversations has been deprecated in favor of Inbox and these endpoints don't include Inbox data. Past Conversations are still available via this endpoint, but new campaign replies and other Inbox messages aren’t available using this endpoint.\n   * @param {String} conversationId The unique id for the conversation.\n   * @param {String} messageId The unique id for the conversation message.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ConversationMessage}\n   */\n  this.getConversationMessage = function(conversationId, messageId, opts) {\n    return this.getConversationMessageWithHttpInfo(conversationId, messageId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n};\n\n\n//# sourceURL=webpack://invisibles23/./node_modules/@mailchimp/mailchimp_marketing/src/api/ConversationsApi.js?");

/***/ }),

/***/ "./node_modules/@mailchimp/mailchimp_marketing/src/api/CustomerJourneysApi.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@mailchimp/mailchimp_marketing/src/api/CustomerJourneysApi.js ***!
  \************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n * Mailchimp Marketing API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.80\n * Contact: apihelp@mailchimp.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.12\n *\n * Do not edit the class manually.\n *\n */\n\n\n\nvar ApiClient = __webpack_require__(/*! ../ApiClient */ \"./node_modules/@mailchimp/mailchimp_marketing/src/ApiClient.js\");\n\n/**\n * CustomerJourneys service.\n * @module api/CustomerJourneysApi\n */\n\n/**\n * Constructs a new CustomerJourneysApi. \n * @alias module:api/CustomerJourneysApi\n * @class\n * @param {module:ApiClient} apiClient Optional API client implementation to use,\n * default to {@link module:ApiClient#instance} if unspecified.\n */\nmodule.exports = function(apiClient) {\n  this.apiClient = apiClient || ApiClient.instance;\n\n  /**\n   * Customer Journeys API trigger for a contact\n   * A step trigger in a Customer Journey. To use it, create a starting point or step from the Customer Journey builder in the app using the Customer Journeys API condition. We’ll provide a url during the process that includes the {journey_id} and {step_id}. You’ll then be able to use this endpoint to trigger the condition for the posted contact.\n   * @param {Number} journeyId The id for the Journey.\n   * @param {Number} stepId The id for the Step.\n   * @param {module:model/SubscriberInCustomerJourneysAudience} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response\n   */\n  this.triggerWithHttpInfo = function(journeyId, stepId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'journeyId' is set\n    if (journeyId === undefined || journeyId === null) {\n      throw new Error(\"Missing the required parameter 'journeyId' when calling \");\n    }\n\n    // verify the required parameter 'stepId' is set\n    if (stepId === undefined || stepId === null) {\n      throw new Error(\"Missing the required parameter 'stepId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'journey_id': journeyId,\n      'step_id': stepId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/customer-journeys/journeys/{journey_id}/steps/{step_id}/actions/trigger', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Customer Journeys API trigger for a contact\n   * A step trigger in a Customer Journey. To use it, create a starting point or step from the Customer Journey builder in the app using the Customer Journeys API condition. We’ll provide a url during the process that includes the {journey_id} and {step_id}. You’ll then be able to use this endpoint to trigger the condition for the posted contact.\n   * @param {Number} journeyId The id for the Journey.\n   * @param {Number} stepId The id for the Step.\n   * @param {module:model/SubscriberInCustomerJourneysAudience} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}\n   */\n  this.trigger = function(journeyId, stepId, body) {\n    return this.triggerWithHttpInfo(journeyId, stepId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n};\n\n\n//# sourceURL=webpack://invisibles23/./node_modules/@mailchimp/mailchimp_marketing/src/api/CustomerJourneysApi.js?");

/***/ }),

/***/ "./node_modules/@mailchimp/mailchimp_marketing/src/api/EcommerceApi.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@mailchimp/mailchimp_marketing/src/api/EcommerceApi.js ***!
  \*****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n * Mailchimp Marketing API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.80\n * Contact: apihelp@mailchimp.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.12\n *\n * Do not edit the class manually.\n *\n */\n\n\n\nvar ApiClient = __webpack_require__(/*! ../ApiClient */ \"./node_modules/@mailchimp/mailchimp_marketing/src/ApiClient.js\");\n\n/**\n * Ecommerce service.\n * @module api/EcommerceApi\n */\n\n/**\n * Constructs a new EcommerceApi. \n * @alias module:api/EcommerceApi\n * @class\n * @param {module:ApiClient} apiClient Optional API client implementation to use,\n * default to {@link module:ApiClient#instance} if unspecified.\n */\nmodule.exports = function(apiClient) {\n  this.apiClient = apiClient || ApiClient.instance;\n\n  /**\n   * Delete store\n   * Delete a store. Deleting a store will also delete any associated subresources, including Customers, Orders, Products, and Carts.\n   * @param {String} storeId The store id.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response\n   */\n  this.deleteStoreWithHttpInfo = function(storeId) {\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete store\n   * Delete a store. Deleting a store will also delete any associated subresources, including Customers, Orders, Products, and Carts.\n   * @param {String} storeId The store id.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}\n   */\n  this.deleteStore = function(storeId) {\n    return this.deleteStoreWithHttpInfo(storeId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Delete cart\n   * Delete a cart.\n   * @param {String} storeId The store id.\n   * @param {String} cartId The id for the cart.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.deleteStoreCartWithHttpInfo = function(storeId, cartId) {\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'cartId' is set\n    if (cartId === undefined || cartId === null) {\n      throw new Error(\"Missing the required parameter 'cartId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'cart_id': cartId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/carts/{cart_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete cart\n   * Delete a cart.\n   * @param {String} storeId The store id.\n   * @param {String} cartId The id for the cart.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.deleteStoreCart = function(storeId, cartId) {\n    return this.deleteStoreCartWithHttpInfo(storeId, cartId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Delete cart line item\n   * Delete a specific cart line item.\n   * @param {String} storeId The store id.\n   * @param {String} cartId The id for the cart.\n   * @param {String} lineId The id for the line item of a cart.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.deleteCartLineItemWithHttpInfo = function(storeId, cartId, lineId) {\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'cartId' is set\n    if (cartId === undefined || cartId === null) {\n      throw new Error(\"Missing the required parameter 'cartId' when calling \");\n    }\n\n    // verify the required parameter 'lineId' is set\n    if (lineId === undefined || lineId === null) {\n      throw new Error(\"Missing the required parameter 'lineId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'cart_id': cartId,\n      'line_id': lineId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/carts/{cart_id}/lines/{line_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete cart line item\n   * Delete a specific cart line item.\n   * @param {String} storeId The store id.\n   * @param {String} cartId The id for the cart.\n   * @param {String} lineId The id for the line item of a cart.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.deleteCartLineItem = function(storeId, cartId, lineId) {\n    return this.deleteCartLineItemWithHttpInfo(storeId, cartId, lineId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Delete customer\n   * Delete a customer from a store.\n   * @param {String} storeId The store id.\n   * @param {String} customerId The id for the customer of a store.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.deleteStoreCustomerWithHttpInfo = function(storeId, customerId) {\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'customerId' is set\n    if (customerId === undefined || customerId === null) {\n      throw new Error(\"Missing the required parameter 'customerId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'customer_id': customerId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/customers/{customer_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete customer\n   * Delete a customer from a store.\n   * @param {String} storeId The store id.\n   * @param {String} customerId The id for the customer of a store.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.deleteStoreCustomer = function(storeId, customerId) {\n    return this.deleteStoreCustomerWithHttpInfo(storeId, customerId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Delete order\n   * Delete an order.\n   * @param {String} storeId The store id.\n   * @param {String} orderId The id for the order in a store.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.deleteOrderWithHttpInfo = function(storeId, orderId) {\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'orderId' is set\n    if (orderId === undefined || orderId === null) {\n      throw new Error(\"Missing the required parameter 'orderId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'order_id': orderId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/orders/{order_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete order\n   * Delete an order.\n   * @param {String} storeId The store id.\n   * @param {String} orderId The id for the order in a store.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.deleteOrder = function(storeId, orderId) {\n    return this.deleteOrderWithHttpInfo(storeId, orderId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Delete order line item\n   * Delete a specific order line item.\n   * @param {String} storeId The store id.\n   * @param {String} orderId The id for the order in a store.\n   * @param {String} lineId The id for the line item of an order.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.deleteOrderLineItemWithHttpInfo = function(storeId, orderId, lineId) {\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'orderId' is set\n    if (orderId === undefined || orderId === null) {\n      throw new Error(\"Missing the required parameter 'orderId' when calling \");\n    }\n\n    // verify the required parameter 'lineId' is set\n    if (lineId === undefined || lineId === null) {\n      throw new Error(\"Missing the required parameter 'lineId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'order_id': orderId,\n      'line_id': lineId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/orders/{order_id}/lines/{line_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete order line item\n   * Delete a specific order line item.\n   * @param {String} storeId The store id.\n   * @param {String} orderId The id for the order in a store.\n   * @param {String} lineId The id for the line item of an order.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.deleteOrderLineItem = function(storeId, orderId, lineId) {\n    return this.deleteOrderLineItemWithHttpInfo(storeId, orderId, lineId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Delete product\n   * Delete a product.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.deleteStoreProductWithHttpInfo = function(storeId, productId) {\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'productId' is set\n    if (productId === undefined || productId === null) {\n      throw new Error(\"Missing the required parameter 'productId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'product_id': productId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/products/{product_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete product\n   * Delete a product.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.deleteStoreProduct = function(storeId, productId) {\n    return this.deleteStoreProductWithHttpInfo(storeId, productId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Delete product image\n   * Delete a product image.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {String} imageId The id for the product image.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.deleteProductImageWithHttpInfo = function(storeId, productId, imageId) {\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'productId' is set\n    if (productId === undefined || productId === null) {\n      throw new Error(\"Missing the required parameter 'productId' when calling \");\n    }\n\n    // verify the required parameter 'imageId' is set\n    if (imageId === undefined || imageId === null) {\n      throw new Error(\"Missing the required parameter 'imageId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'product_id': productId,\n      'image_id': imageId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/products/{product_id}/images/{image_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete product image\n   * Delete a product image.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {String} imageId The id for the product image.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.deleteProductImage = function(storeId, productId, imageId) {\n    return this.deleteProductImageWithHttpInfo(storeId, productId, imageId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Delete product variant\n   * Delete a product variant.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {String} variantId The id for the product variant.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.deleteProductVariantWithHttpInfo = function(storeId, productId, variantId) {\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'productId' is set\n    if (productId === undefined || productId === null) {\n      throw new Error(\"Missing the required parameter 'productId' when calling \");\n    }\n\n    // verify the required parameter 'variantId' is set\n    if (variantId === undefined || variantId === null) {\n      throw new Error(\"Missing the required parameter 'variantId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'product_id': productId,\n      'variant_id': variantId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/products/{product_id}/variants/{variant_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete product variant\n   * Delete a product variant.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {String} variantId The id for the product variant.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.deleteProductVariant = function(storeId, productId, variantId) {\n    return this.deleteProductVariantWithHttpInfo(storeId, productId, variantId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Delete promo code\n   * Delete a promo code from a store.\n   * @param {String} storeId The store id.\n   * @param {String} promoRuleId The id for the promo rule of a store.\n   * @param {String} promoCodeId The id for the promo code of a store.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.deletePromoCodeWithHttpInfo = function(storeId, promoRuleId, promoCodeId) {\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'promoRuleId' is set\n    if (promoRuleId === undefined || promoRuleId === null) {\n      throw new Error(\"Missing the required parameter 'promoRuleId' when calling \");\n    }\n\n    // verify the required parameter 'promoCodeId' is set\n    if (promoCodeId === undefined || promoCodeId === null) {\n      throw new Error(\"Missing the required parameter 'promoCodeId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'promo_rule_id': promoRuleId,\n      'promo_code_id': promoCodeId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}/promo-codes/{promo_code_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete promo code\n   * Delete a promo code from a store.\n   * @param {String} storeId The store id.\n   * @param {String} promoRuleId The id for the promo rule of a store.\n   * @param {String} promoCodeId The id for the promo code of a store.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.deletePromoCode = function(storeId, promoRuleId, promoCodeId) {\n    return this.deletePromoCodeWithHttpInfo(storeId, promoRuleId, promoCodeId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Delete promo rule\n   * Delete a promo rule from a store.\n   * @param {String} storeId The store id.\n   * @param {String} promoRuleId The id for the promo rule of a store.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.deletePromoRuleWithHttpInfo = function(storeId, promoRuleId) {\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'promoRuleId' is set\n    if (promoRuleId === undefined || promoRuleId === null) {\n      throw new Error(\"Missing the required parameter 'promoRuleId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'promo_rule_id': promoRuleId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete promo rule\n   * Delete a promo rule from a store.\n   * @param {String} storeId The store id.\n   * @param {String} promoRuleId The id for the promo rule of a store.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.deletePromoRule = function(storeId, promoRuleId) {\n    return this.deletePromoRuleWithHttpInfo(storeId, promoRuleId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List account orders\n   * Get information about an account's orders.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {String} opts.campaignId Restrict results to orders with a specific `campaign_id` value.\n   * @param {String} opts.outreachId Restrict results to orders with a specific `outreach_id` value.\n   * @param {String} opts.customerId Restrict results to orders made by a specific customer.\n   * @param {Boolean} opts.hasOutreach Restrict results to orders that have an outreach attached. For example, an email campaign or Facebook ad.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Orders} and HTTP response\n   */\n  this.ordersWithHttpInfo = function(opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset']),\n      'campaign_id': ( opts['campaignId'] ? opts['campaignId'] : opts['campaign_id']),\n      'outreach_id': ( opts['outreachId'] ? opts['outreachId'] : opts['outreach_id']),\n      'customer_id': ( opts['customerId'] ? opts['customerId'] : opts['customer_id']),\n      'has_outreach': ( opts['hasOutreach'] ? opts['hasOutreach'] : opts['has_outreach'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/orders', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List account orders\n   * Get information about an account's orders.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {String} opts.campaignId Restrict results to orders with a specific `campaign_id` value.\n   * @param {String} opts.outreachId Restrict results to orders with a specific `outreach_id` value.\n   * @param {String} opts.customerId Restrict results to orders made by a specific customer.\n   * @param {Boolean} opts.hasOutreach Restrict results to orders that have an outreach attached. For example, an email campaign or Facebook ad.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Orders}\n   */\n  this.orders = function(opts) {\n    return this.ordersWithHttpInfo(opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List stores\n   * Get information about all stores in the account.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceStores} and HTTP response\n   */\n  this.storesWithHttpInfo = function(opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List stores\n   * Get information about all stores in the account.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceStores}\n   */\n  this.stores = function(opts) {\n    return this.storesWithHttpInfo(opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get store info\n   * Get information about a specific store.\n   * @param {String} storeId The store id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceStore} and HTTP response\n   */\n  this.getStoreWithHttpInfo = function(storeId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get store info\n   * Get information about a specific store.\n   * @param {String} storeId The store id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceStore}\n   */\n  this.getStore = function(storeId, opts) {\n    return this.getStoreWithHttpInfo(storeId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List carts\n   * Get information about a store's carts.\n   * @param {String} storeId The store id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Carts} and HTTP response\n   */\n  this.getStoreCartsWithHttpInfo = function(storeId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/carts', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List carts\n   * Get information about a store's carts.\n   * @param {String} storeId The store id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Carts}\n   */\n  this.getStoreCarts = function(storeId, opts) {\n    return this.getStoreCartsWithHttpInfo(storeId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get cart info\n   * Get information about a specific cart.\n   * @param {String} storeId The store id.\n   * @param {String} cartId The id for the cart.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceCart} and HTTP response\n   */\n  this.getStoreCartWithHttpInfo = function(storeId, cartId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'cartId' is set\n    if (cartId === undefined || cartId === null) {\n      throw new Error(\"Missing the required parameter 'cartId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'cart_id': cartId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/carts/{cart_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get cart info\n   * Get information about a specific cart.\n   * @param {String} storeId The store id.\n   * @param {String} cartId The id for the cart.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceCart}\n   */\n  this.getStoreCart = function(storeId, cartId, opts) {\n    return this.getStoreCartWithHttpInfo(storeId, cartId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List cart line items\n   * Get information about a cart's line items.\n   * @param {String} storeId The store id.\n   * @param {String} cartId The id for the cart.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CartLines} and HTTP response\n   */\n  this.getAllCartLineItemsWithHttpInfo = function(storeId, cartId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'cartId' is set\n    if (cartId === undefined || cartId === null) {\n      throw new Error(\"Missing the required parameter 'cartId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'cart_id': cartId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/carts/{cart_id}/lines', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List cart line items\n   * Get information about a cart's line items.\n   * @param {String} storeId The store id.\n   * @param {String} cartId The id for the cart.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CartLines}\n   */\n  this.getAllCartLineItems = function(storeId, cartId, opts) {\n    return this.getAllCartLineItemsWithHttpInfo(storeId, cartId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get cart line item\n   * Get information about a specific cart line item.\n   * @param {String} storeId The store id.\n   * @param {String} cartId The id for the cart.\n   * @param {String} lineId The id for the line item of a cart.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceCartLineItem} and HTTP response\n   */\n  this.getCartLineItemWithHttpInfo = function(storeId, cartId, lineId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'cartId' is set\n    if (cartId === undefined || cartId === null) {\n      throw new Error(\"Missing the required parameter 'cartId' when calling \");\n    }\n\n    // verify the required parameter 'lineId' is set\n    if (lineId === undefined || lineId === null) {\n      throw new Error(\"Missing the required parameter 'lineId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'cart_id': cartId,\n      'line_id': lineId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/carts/{cart_id}/lines/{line_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get cart line item\n   * Get information about a specific cart line item.\n   * @param {String} storeId The store id.\n   * @param {String} cartId The id for the cart.\n   * @param {String} lineId The id for the line item of a cart.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceCartLineItem}\n   */\n  this.getCartLineItem = function(storeId, cartId, lineId, opts) {\n    return this.getCartLineItemWithHttpInfo(storeId, cartId, lineId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List customers\n   * Get information about a store's customers.\n   * @param {String} storeId The store id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {String} opts.emailAddress Restrict the response to customers with the email address.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Customers} and HTTP response\n   */\n  this.getAllStoreCustomersWithHttpInfo = function(storeId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset']),\n      'email_address': ( opts['emailAddress'] ? opts['emailAddress'] : opts['email_address'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/customers', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List customers\n   * Get information about a store's customers.\n   * @param {String} storeId The store id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {String} opts.emailAddress Restrict the response to customers with the email address.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Customers}\n   */\n  this.getAllStoreCustomers = function(storeId, opts) {\n    return this.getAllStoreCustomersWithHttpInfo(storeId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get customer info\n   * Get information about a specific customer.\n   * @param {String} storeId The store id.\n   * @param {String} customerId The id for the customer of a store.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceCustomer} and HTTP response\n   */\n  this.getStoreCustomerWithHttpInfo = function(storeId, customerId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'customerId' is set\n    if (customerId === undefined || customerId === null) {\n      throw new Error(\"Missing the required parameter 'customerId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'customer_id': customerId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/customers/{customer_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get customer info\n   * Get information about a specific customer.\n   * @param {String} storeId The store id.\n   * @param {String} customerId The id for the customer of a store.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceCustomer}\n   */\n  this.getStoreCustomer = function(storeId, customerId, opts) {\n    return this.getStoreCustomerWithHttpInfo(storeId, customerId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List orders\n   * Get information about a store's orders.\n   * @param {String} storeId The store id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {String} opts.customerId Restrict results to orders made by a specific customer.\n   * @param {Boolean} opts.hasOutreach Restrict results to orders that have an outreach attached. For example, an email campaign or Facebook ad.\n   * @param {String} opts.campaignId Restrict results to orders with a specific `campaign_id` value.\n   * @param {String} opts.outreachId Restrict results to orders with a specific `outreach_id` value.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Orders1} and HTTP response\n   */\n  this.getStoreOrdersWithHttpInfo = function(storeId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset']),\n      'customer_id': ( opts['customerId'] ? opts['customerId'] : opts['customer_id']),\n      'has_outreach': ( opts['hasOutreach'] ? opts['hasOutreach'] : opts['has_outreach']),\n      'campaign_id': ( opts['campaignId'] ? opts['campaignId'] : opts['campaign_id']),\n      'outreach_id': ( opts['outreachId'] ? opts['outreachId'] : opts['outreach_id'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/orders', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List orders\n   * Get information about a store's orders.\n   * @param {String} storeId The store id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {String} opts.customerId Restrict results to orders made by a specific customer.\n   * @param {Boolean} opts.hasOutreach Restrict results to orders that have an outreach attached. For example, an email campaign or Facebook ad.\n   * @param {String} opts.campaignId Restrict results to orders with a specific `campaign_id` value.\n   * @param {String} opts.outreachId Restrict results to orders with a specific `outreach_id` value.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Orders1}\n   */\n  this.getStoreOrders = function(storeId, opts) {\n    return this.getStoreOrdersWithHttpInfo(storeId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get order info\n   * Get information about a specific order.\n   * @param {String} storeId The store id.\n   * @param {String} orderId The id for the order in a store.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceOrder} and HTTP response\n   */\n  this.getOrderWithHttpInfo = function(storeId, orderId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'orderId' is set\n    if (orderId === undefined || orderId === null) {\n      throw new Error(\"Missing the required parameter 'orderId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'order_id': orderId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/orders/{order_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get order info\n   * Get information about a specific order.\n   * @param {String} storeId The store id.\n   * @param {String} orderId The id for the order in a store.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceOrder}\n   */\n  this.getOrder = function(storeId, orderId, opts) {\n    return this.getOrderWithHttpInfo(storeId, orderId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List order line items\n   * Get information about an order's line items.\n   * @param {String} storeId The store id.\n   * @param {String} orderId The id for the order in a store.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/OrderLines} and HTTP response\n   */\n  this.getAllOrderLineItemsWithHttpInfo = function(storeId, orderId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'orderId' is set\n    if (orderId === undefined || orderId === null) {\n      throw new Error(\"Missing the required parameter 'orderId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'order_id': orderId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/orders/{order_id}/lines', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List order line items\n   * Get information about an order's line items.\n   * @param {String} storeId The store id.\n   * @param {String} orderId The id for the order in a store.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/OrderLines}\n   */\n  this.getAllOrderLineItems = function(storeId, orderId, opts) {\n    return this.getAllOrderLineItemsWithHttpInfo(storeId, orderId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get order line item\n   * Get information about a specific order line item.\n   * @param {String} storeId The store id.\n   * @param {String} orderId The id for the order in a store.\n   * @param {String} lineId The id for the line item of an order.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceOrderLineItem} and HTTP response\n   */\n  this.getOrderLineItemWithHttpInfo = function(storeId, orderId, lineId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'orderId' is set\n    if (orderId === undefined || orderId === null) {\n      throw new Error(\"Missing the required parameter 'orderId' when calling \");\n    }\n\n    // verify the required parameter 'lineId' is set\n    if (lineId === undefined || lineId === null) {\n      throw new Error(\"Missing the required parameter 'lineId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'order_id': orderId,\n      'line_id': lineId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/orders/{order_id}/lines/{line_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get order line item\n   * Get information about a specific order line item.\n   * @param {String} storeId The store id.\n   * @param {String} orderId The id for the order in a store.\n   * @param {String} lineId The id for the line item of an order.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceOrderLineItem}\n   */\n  this.getOrderLineItem = function(storeId, orderId, lineId, opts) {\n    return this.getOrderLineItemWithHttpInfo(storeId, orderId, lineId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List product\n   * Get information about a store's products.\n   * @param {String} storeId The store id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Products} and HTTP response\n   */\n  this.getAllStoreProductsWithHttpInfo = function(storeId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/products', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List product\n   * Get information about a store's products.\n   * @param {String} storeId The store id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Products}\n   */\n  this.getAllStoreProducts = function(storeId, opts) {\n    return this.getAllStoreProductsWithHttpInfo(storeId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get product info\n   * Get information about a specific product.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceProduct} and HTTP response\n   */\n  this.getStoreProductWithHttpInfo = function(storeId, productId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'productId' is set\n    if (productId === undefined || productId === null) {\n      throw new Error(\"Missing the required parameter 'productId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'product_id': productId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/products/{product_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get product info\n   * Get information about a specific product.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceProduct}\n   */\n  this.getStoreProduct = function(storeId, productId, opts) {\n    return this.getStoreProductWithHttpInfo(storeId, productId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List product images\n   * Get information about a product's images.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceProductImages} and HTTP response\n   */\n  this.getProductImagesWithHttpInfo = function(storeId, productId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'productId' is set\n    if (productId === undefined || productId === null) {\n      throw new Error(\"Missing the required parameter 'productId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'product_id': productId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/products/{product_id}/images', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List product images\n   * Get information about a product's images.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceProductImages}\n   */\n  this.getProductImages = function(storeId, productId, opts) {\n    return this.getProductImagesWithHttpInfo(storeId, productId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get product image info\n   * Get information about a specific product image.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {String} imageId The id for the product image.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceProductImage} and HTTP response\n   */\n  this.getProductImageWithHttpInfo = function(storeId, productId, imageId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'productId' is set\n    if (productId === undefined || productId === null) {\n      throw new Error(\"Missing the required parameter 'productId' when calling \");\n    }\n\n    // verify the required parameter 'imageId' is set\n    if (imageId === undefined || imageId === null) {\n      throw new Error(\"Missing the required parameter 'imageId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'product_id': productId,\n      'image_id': imageId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/products/{product_id}/images/{image_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get product image info\n   * Get information about a specific product image.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {String} imageId The id for the product image.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceProductImage}\n   */\n  this.getProductImage = function(storeId, productId, imageId, opts) {\n    return this.getProductImageWithHttpInfo(storeId, productId, imageId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List product variants\n   * Get information about a product's variants.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceProductVariants} and HTTP response\n   */\n  this.getProductVariantsWithHttpInfo = function(storeId, productId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'productId' is set\n    if (productId === undefined || productId === null) {\n      throw new Error(\"Missing the required parameter 'productId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'product_id': productId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/products/{product_id}/variants', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List product variants\n   * Get information about a product's variants.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceProductVariants}\n   */\n  this.getProductVariants = function(storeId, productId, opts) {\n    return this.getProductVariantsWithHttpInfo(storeId, productId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get product variant info\n   * Get information about a specific product variant.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {String} variantId The id for the product variant.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceProductVariant} and HTTP response\n   */\n  this.getProductVariantWithHttpInfo = function(storeId, productId, variantId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'productId' is set\n    if (productId === undefined || productId === null) {\n      throw new Error(\"Missing the required parameter 'productId' when calling \");\n    }\n\n    // verify the required parameter 'variantId' is set\n    if (variantId === undefined || variantId === null) {\n      throw new Error(\"Missing the required parameter 'variantId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'product_id': productId,\n      'variant_id': variantId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/products/{product_id}/variants/{variant_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get product variant info\n   * Get information about a specific product variant.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {String} variantId The id for the product variant.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceProductVariant}\n   */\n  this.getProductVariant = function(storeId, productId, variantId, opts) {\n    return this.getProductVariantWithHttpInfo(storeId, productId, variantId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List promo codes\n   * Get information about a store's promo codes.\n   * @param {String} promoRuleId The id for the promo rule of a store.\n   * @param {String} storeId The store id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PromoCodes} and HTTP response\n   */\n  this.getPromoCodesWithHttpInfo = function(promoRuleId, storeId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'promoRuleId' is set\n    if (promoRuleId === undefined || promoRuleId === null) {\n      throw new Error(\"Missing the required parameter 'promoRuleId' when calling \");\n    }\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    var pathParams = {\n      'promo_rule_id': promoRuleId,\n      'store_id': storeId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}/promo-codes', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List promo codes\n   * Get information about a store's promo codes.\n   * @param {String} promoRuleId The id for the promo rule of a store.\n   * @param {String} storeId The store id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PromoCodes}\n   */\n  this.getPromoCodes = function(promoRuleId, storeId, opts) {\n    return this.getPromoCodesWithHttpInfo(promoRuleId, storeId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get promo code\n   * Get information about a specific promo code.\n   * @param {String} storeId The store id.\n   * @param {String} promoRuleId The id for the promo rule of a store.\n   * @param {String} promoCodeId The id for the promo code of a store.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommercePromoCode} and HTTP response\n   */\n  this.getPromoCodeWithHttpInfo = function(storeId, promoRuleId, promoCodeId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'promoRuleId' is set\n    if (promoRuleId === undefined || promoRuleId === null) {\n      throw new Error(\"Missing the required parameter 'promoRuleId' when calling \");\n    }\n\n    // verify the required parameter 'promoCodeId' is set\n    if (promoCodeId === undefined || promoCodeId === null) {\n      throw new Error(\"Missing the required parameter 'promoCodeId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'promo_rule_id': promoRuleId,\n      'promo_code_id': promoCodeId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}/promo-codes/{promo_code_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get promo code\n   * Get information about a specific promo code.\n   * @param {String} storeId The store id.\n   * @param {String} promoRuleId The id for the promo rule of a store.\n   * @param {String} promoCodeId The id for the promo code of a store.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommercePromoCode}\n   */\n  this.getPromoCode = function(storeId, promoRuleId, promoCodeId, opts) {\n    return this.getPromoCodeWithHttpInfo(storeId, promoRuleId, promoCodeId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List promo rules\n   * Get information about a store's promo rules.\n   * @param {String} storeId The store id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PromoRules} and HTTP response\n   */\n  this.listPromoRulesWithHttpInfo = function(storeId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/promo-rules', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List promo rules\n   * Get information about a store's promo rules.\n   * @param {String} storeId The store id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PromoRules}\n   */\n  this.listPromoRules = function(storeId, opts) {\n    return this.listPromoRulesWithHttpInfo(storeId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get promo rule\n   * Get information about a specific promo rule.\n   * @param {String} storeId The store id.\n   * @param {String} promoRuleId The id for the promo rule of a store.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommercePromoRule} and HTTP response\n   */\n  this.getPromoRuleWithHttpInfo = function(storeId, promoRuleId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'promoRuleId' is set\n    if (promoRuleId === undefined || promoRuleId === null) {\n      throw new Error(\"Missing the required parameter 'promoRuleId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'promo_rule_id': promoRuleId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get promo rule\n   * Get information about a specific promo rule.\n   * @param {String} storeId The store id.\n   * @param {String} promoRuleId The id for the promo rule of a store.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommercePromoRule}\n   */\n  this.getPromoRule = function(storeId, promoRuleId, opts) {\n    return this.getPromoRuleWithHttpInfo(storeId, promoRuleId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update store\n   * Update a store.\n   * @param {String} storeId The store id.\n   * @param {module:model/EcommerceStore2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceStore} and HTTP response\n   */\n  this.updateStoreWithHttpInfo = function(storeId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update store\n   * Update a store.\n   * @param {String} storeId The store id.\n   * @param {module:model/EcommerceStore2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceStore}\n   */\n  this.updateStore = function(storeId, body) {\n    return this.updateStoreWithHttpInfo(storeId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update cart\n   * Update a specific cart.\n   * @param {String} storeId The store id.\n   * @param {String} cartId The id for the cart.\n   * @param {module:model/EcommerceCart2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceCart} and HTTP response\n   */\n  this.updateStoreCartWithHttpInfo = function(storeId, cartId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'cartId' is set\n    if (cartId === undefined || cartId === null) {\n      throw new Error(\"Missing the required parameter 'cartId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'cart_id': cartId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/carts/{cart_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update cart\n   * Update a specific cart.\n   * @param {String} storeId The store id.\n   * @param {String} cartId The id for the cart.\n   * @param {module:model/EcommerceCart2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceCart}\n   */\n  this.updateStoreCart = function(storeId, cartId, body) {\n    return this.updateStoreCartWithHttpInfo(storeId, cartId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update cart line item\n   * Update a specific cart line item.\n   * @param {String} storeId The store id.\n   * @param {String} cartId The id for the cart.\n   * @param {String} lineId The id for the line item of a cart.\n   * @param {module:model/EcommerceCartLineItem4} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceCartLineItem} and HTTP response\n   */\n  this.updateCartLineItemWithHttpInfo = function(storeId, cartId, lineId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'cartId' is set\n    if (cartId === undefined || cartId === null) {\n      throw new Error(\"Missing the required parameter 'cartId' when calling \");\n    }\n\n    // verify the required parameter 'lineId' is set\n    if (lineId === undefined || lineId === null) {\n      throw new Error(\"Missing the required parameter 'lineId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'cart_id': cartId,\n      'line_id': lineId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/carts/{cart_id}/lines/{line_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update cart line item\n   * Update a specific cart line item.\n   * @param {String} storeId The store id.\n   * @param {String} cartId The id for the cart.\n   * @param {String} lineId The id for the line item of a cart.\n   * @param {module:model/EcommerceCartLineItem4} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceCartLineItem}\n   */\n  this.updateCartLineItem = function(storeId, cartId, lineId, body) {\n    return this.updateCartLineItemWithHttpInfo(storeId, cartId, lineId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update customer\n   * Update a customer.\n   * @param {String} storeId The store id.\n   * @param {String} customerId The id for the customer of a store.\n   * @param {module:model/EcommerceCustomer5} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceCustomer} and HTTP response\n   */\n  this.updateStoreCustomerWithHttpInfo = function(storeId, customerId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'customerId' is set\n    if (customerId === undefined || customerId === null) {\n      throw new Error(\"Missing the required parameter 'customerId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'customer_id': customerId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/customers/{customer_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update customer\n   * Update a customer.\n   * @param {String} storeId The store id.\n   * @param {String} customerId The id for the customer of a store.\n   * @param {module:model/EcommerceCustomer5} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceCustomer}\n   */\n  this.updateStoreCustomer = function(storeId, customerId, body) {\n    return this.updateStoreCustomerWithHttpInfo(storeId, customerId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update order\n   * Update a specific order.\n   * @param {String} storeId The store id.\n   * @param {String} orderId The id for the order in a store.\n   * @param {module:model/EcommerceOrder2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceOrder} and HTTP response\n   */\n  this.updateOrderWithHttpInfo = function(storeId, orderId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'orderId' is set\n    if (orderId === undefined || orderId === null) {\n      throw new Error(\"Missing the required parameter 'orderId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'order_id': orderId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/orders/{order_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update order\n   * Update a specific order.\n   * @param {String} storeId The store id.\n   * @param {String} orderId The id for the order in a store.\n   * @param {module:model/EcommerceOrder2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceOrder}\n   */\n  this.updateOrder = function(storeId, orderId, body) {\n    return this.updateOrderWithHttpInfo(storeId, orderId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update order line item\n   * Update a specific order line item.\n   * @param {String} storeId The store id.\n   * @param {String} orderId The id for the order in a store.\n   * @param {String} lineId The id for the line item of an order.\n   * @param {module:model/EcommerceOrderLineItem4} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceOrderLineItem} and HTTP response\n   */\n  this.updateOrderLineItemWithHttpInfo = function(storeId, orderId, lineId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'orderId' is set\n    if (orderId === undefined || orderId === null) {\n      throw new Error(\"Missing the required parameter 'orderId' when calling \");\n    }\n\n    // verify the required parameter 'lineId' is set\n    if (lineId === undefined || lineId === null) {\n      throw new Error(\"Missing the required parameter 'lineId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'order_id': orderId,\n      'line_id': lineId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/orders/{order_id}/lines/{line_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update order line item\n   * Update a specific order line item.\n   * @param {String} storeId The store id.\n   * @param {String} orderId The id for the order in a store.\n   * @param {String} lineId The id for the line item of an order.\n   * @param {module:model/EcommerceOrderLineItem4} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceOrderLineItem}\n   */\n  this.updateOrderLineItem = function(storeId, orderId, lineId, body) {\n    return this.updateOrderLineItemWithHttpInfo(storeId, orderId, lineId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update product\n   * Update a specific product.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {module:model/EcommerceProduct2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceProduct} and HTTP response\n   */\n  this.updateStoreProductWithHttpInfo = function(storeId, productId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'productId' is set\n    if (productId === undefined || productId === null) {\n      throw new Error(\"Missing the required parameter 'productId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'product_id': productId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/products/{product_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update product\n   * Update a specific product.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {module:model/EcommerceProduct2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceProduct}\n   */\n  this.updateStoreProduct = function(storeId, productId, body) {\n    return this.updateStoreProductWithHttpInfo(storeId, productId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update product image\n   * Update a product image.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {String} imageId The id for the product image.\n   * @param {module:model/EcommerceProductImage4} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceProductImage} and HTTP response\n   */\n  this.updateProductImageWithHttpInfo = function(storeId, productId, imageId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'productId' is set\n    if (productId === undefined || productId === null) {\n      throw new Error(\"Missing the required parameter 'productId' when calling \");\n    }\n\n    // verify the required parameter 'imageId' is set\n    if (imageId === undefined || imageId === null) {\n      throw new Error(\"Missing the required parameter 'imageId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'product_id': productId,\n      'image_id': imageId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/products/{product_id}/images/{image_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update product image\n   * Update a product image.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {String} imageId The id for the product image.\n   * @param {module:model/EcommerceProductImage4} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceProductImage}\n   */\n  this.updateProductImage = function(storeId, productId, imageId, body) {\n    return this.updateProductImageWithHttpInfo(storeId, productId, imageId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update product variant\n   * Update a product variant.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {String} variantId The id for the product variant.\n   * @param {module:model/EcommerceProductVariant5} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceProductVariant} and HTTP response\n   */\n  this.updateProductVariantWithHttpInfo = function(storeId, productId, variantId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'productId' is set\n    if (productId === undefined || productId === null) {\n      throw new Error(\"Missing the required parameter 'productId' when calling \");\n    }\n\n    // verify the required parameter 'variantId' is set\n    if (variantId === undefined || variantId === null) {\n      throw new Error(\"Missing the required parameter 'variantId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'product_id': productId,\n      'variant_id': variantId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/products/{product_id}/variants/{variant_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update product variant\n   * Update a product variant.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {String} variantId The id for the product variant.\n   * @param {module:model/EcommerceProductVariant5} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceProductVariant}\n   */\n  this.updateProductVariant = function(storeId, productId, variantId, body) {\n    return this.updateProductVariantWithHttpInfo(storeId, productId, variantId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update promo code\n   * Update a promo code.\n   * @param {String} storeId The store id.\n   * @param {String} promoRuleId The id for the promo rule of a store.\n   * @param {String} promoCodeId The id for the promo code of a store.\n   * @param {module:model/EcommercePromoCode2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommercePromoCode} and HTTP response\n   */\n  this.updatePromoCodeWithHttpInfo = function(storeId, promoRuleId, promoCodeId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'promoRuleId' is set\n    if (promoRuleId === undefined || promoRuleId === null) {\n      throw new Error(\"Missing the required parameter 'promoRuleId' when calling \");\n    }\n\n    // verify the required parameter 'promoCodeId' is set\n    if (promoCodeId === undefined || promoCodeId === null) {\n      throw new Error(\"Missing the required parameter 'promoCodeId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'promo_rule_id': promoRuleId,\n      'promo_code_id': promoCodeId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}/promo-codes/{promo_code_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update promo code\n   * Update a promo code.\n   * @param {String} storeId The store id.\n   * @param {String} promoRuleId The id for the promo rule of a store.\n   * @param {String} promoCodeId The id for the promo code of a store.\n   * @param {module:model/EcommercePromoCode2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommercePromoCode}\n   */\n  this.updatePromoCode = function(storeId, promoRuleId, promoCodeId, body) {\n    return this.updatePromoCodeWithHttpInfo(storeId, promoRuleId, promoCodeId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update promo rule\n   * Update a promo rule.\n   * @param {String} storeId The store id.\n   * @param {String} promoRuleId The id for the promo rule of a store.\n   * @param {module:model/EcommercePromoRule2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommercePromoRule} and HTTP response\n   */\n  this.updatePromoRuleWithHttpInfo = function(storeId, promoRuleId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'promoRuleId' is set\n    if (promoRuleId === undefined || promoRuleId === null) {\n      throw new Error(\"Missing the required parameter 'promoRuleId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'promo_rule_id': promoRuleId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update promo rule\n   * Update a promo rule.\n   * @param {String} storeId The store id.\n   * @param {String} promoRuleId The id for the promo rule of a store.\n   * @param {module:model/EcommercePromoRule2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommercePromoRule}\n   */\n  this.updatePromoRule = function(storeId, promoRuleId, body) {\n    return this.updatePromoRuleWithHttpInfo(storeId, promoRuleId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add store\n   * Add a new store to your Mailchimp account.\n   * @param {module:model/EcommerceStore1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceStore} and HTTP response\n   */\n  this.addStoreWithHttpInfo = function(body) {\n    var postBody = body;\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add store\n   * Add a new store to your Mailchimp account.\n   * @param {module:model/EcommerceStore1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceStore}\n   */\n  this.addStore = function(body) {\n    return this.addStoreWithHttpInfo(body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add cart\n   * Add a new cart to a store.\n   * @param {String} storeId The store id.\n   * @param {module:model/EcommerceCart1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceCart} and HTTP response\n   */\n  this.addStoreCartWithHttpInfo = function(storeId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/carts', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add cart\n   * Add a new cart to a store.\n   * @param {String} storeId The store id.\n   * @param {module:model/EcommerceCart1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceCart}\n   */\n  this.addStoreCart = function(storeId, body) {\n    return this.addStoreCartWithHttpInfo(storeId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add cart line item\n   * Add a new line item to an existing cart.\n   * @param {String} storeId The store id.\n   * @param {String} cartId The id for the cart.\n   * @param {module:model/EcommerceCartLineItem3} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceCartLineItem} and HTTP response\n   */\n  this.addCartLineItemWithHttpInfo = function(storeId, cartId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'cartId' is set\n    if (cartId === undefined || cartId === null) {\n      throw new Error(\"Missing the required parameter 'cartId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'cart_id': cartId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/carts/{cart_id}/lines', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add cart line item\n   * Add a new line item to an existing cart.\n   * @param {String} storeId The store id.\n   * @param {String} cartId The id for the cart.\n   * @param {module:model/EcommerceCartLineItem3} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceCartLineItem}\n   */\n  this.addCartLineItem = function(storeId, cartId, body) {\n    return this.addCartLineItemWithHttpInfo(storeId, cartId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add customer\n   * Add a new customer to a store.\n   * @param {String} storeId The store id.\n   * @param {module:model/EcommerceCustomer3} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceCustomer} and HTTP response\n   */\n  this.addStoreCustomerWithHttpInfo = function(storeId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/customers', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add customer\n   * Add a new customer to a store.\n   * @param {String} storeId The store id.\n   * @param {module:model/EcommerceCustomer3} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceCustomer}\n   */\n  this.addStoreCustomer = function(storeId, body) {\n    return this.addStoreCustomerWithHttpInfo(storeId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add order\n   * Add a new order to a store.\n   * @param {String} storeId The store id.\n   * @param {module:model/EcommerceOrder1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceOrder} and HTTP response\n   */\n  this.addStoreOrderWithHttpInfo = function(storeId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/orders', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add order\n   * Add a new order to a store.\n   * @param {String} storeId The store id.\n   * @param {module:model/EcommerceOrder1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceOrder}\n   */\n  this.addStoreOrder = function(storeId, body) {\n    return this.addStoreOrderWithHttpInfo(storeId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add order line item\n   * Add a new line item to an existing order.\n   * @param {String} storeId The store id.\n   * @param {String} orderId The id for the order in a store.\n   * @param {module:model/EcommerceOrderLineItem3} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceOrderLineItem} and HTTP response\n   */\n  this.addOrderLineItemWithHttpInfo = function(storeId, orderId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'orderId' is set\n    if (orderId === undefined || orderId === null) {\n      throw new Error(\"Missing the required parameter 'orderId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'order_id': orderId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/orders/{order_id}/lines', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add order line item\n   * Add a new line item to an existing order.\n   * @param {String} storeId The store id.\n   * @param {String} orderId The id for the order in a store.\n   * @param {module:model/EcommerceOrderLineItem3} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceOrderLineItem}\n   */\n  this.addOrderLineItem = function(storeId, orderId, body) {\n    return this.addOrderLineItemWithHttpInfo(storeId, orderId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add product\n   * Add a new product to a store.\n   * @param {String} storeId The store id.\n   * @param {module:model/EcommerceProduct1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceProduct} and HTTP response\n   */\n  this.addStoreProductWithHttpInfo = function(storeId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/products', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add product\n   * Add a new product to a store.\n   * @param {String} storeId The store id.\n   * @param {module:model/EcommerceProduct1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceProduct}\n   */\n  this.addStoreProduct = function(storeId, body) {\n    return this.addStoreProductWithHttpInfo(storeId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add product image\n   * Add a new image to the product.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {module:model/EcommerceProductImage3} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceProductImage} and HTTP response\n   */\n  this.addProductImageWithHttpInfo = function(storeId, productId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'productId' is set\n    if (productId === undefined || productId === null) {\n      throw new Error(\"Missing the required parameter 'productId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'product_id': productId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/products/{product_id}/images', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add product image\n   * Add a new image to the product.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {module:model/EcommerceProductImage3} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceProductImage}\n   */\n  this.addProductImage = function(storeId, productId, body) {\n    return this.addProductImageWithHttpInfo(storeId, productId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add product variant\n   * Add a new variant to the product.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {module:model/EcommerceProductVariant3} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceProductVariant} and HTTP response\n   */\n  this.addProductVariantsWithHttpInfo = function(storeId, productId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'productId' is set\n    if (productId === undefined || productId === null) {\n      throw new Error(\"Missing the required parameter 'productId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'product_id': productId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/products/{product_id}/variants', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add product variant\n   * Add a new variant to the product.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {module:model/EcommerceProductVariant3} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceProductVariant}\n   */\n  this.addProductVariants = function(storeId, productId, body) {\n    return this.addProductVariantsWithHttpInfo(storeId, productId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add promo code\n   * Add a new promo code to a store.\n   * @param {String} storeId The store id.\n   * @param {String} promoRuleId The id for the promo rule of a store.\n   * @param {module:model/EcommercePromoCode1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommercePromoCode} and HTTP response\n   */\n  this.addPromoCodeWithHttpInfo = function(storeId, promoRuleId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'promoRuleId' is set\n    if (promoRuleId === undefined || promoRuleId === null) {\n      throw new Error(\"Missing the required parameter 'promoRuleId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'promo_rule_id': promoRuleId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}/promo-codes', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add promo code\n   * Add a new promo code to a store.\n   * @param {String} storeId The store id.\n   * @param {String} promoRuleId The id for the promo rule of a store.\n   * @param {module:model/EcommercePromoCode1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommercePromoCode}\n   */\n  this.addPromoCode = function(storeId, promoRuleId, body) {\n    return this.addPromoCodeWithHttpInfo(storeId, promoRuleId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add promo rule\n   * Add a new promo rule to a store.\n   * @param {String} storeId The store id.\n   * @param {module:model/EcommercePromoRule1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommercePromoRule} and HTTP response\n   */\n  this.addPromoRulesWithHttpInfo = function(storeId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/promo-rules', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add promo rule\n   * Add a new promo rule to a store.\n   * @param {String} storeId The store id.\n   * @param {module:model/EcommercePromoRule1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommercePromoRule}\n   */\n  this.addPromoRules = function(storeId, body) {\n    return this.addPromoRulesWithHttpInfo(storeId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add or update customer\n   * Add or update a customer.\n   * @param {String} storeId The store id.\n   * @param {String} customerId The id for the customer of a store.\n   * @param {module:model/EcommerceCustomer4} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceCustomer} and HTTP response\n   */\n  this.setStoreCustomerWithHttpInfo = function(storeId, customerId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'customerId' is set\n    if (customerId === undefined || customerId === null) {\n      throw new Error(\"Missing the required parameter 'customerId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'customer_id': customerId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/customers/{customer_id}', 'PUT',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add or update customer\n   * Add or update a customer.\n   * @param {String} storeId The store id.\n   * @param {String} customerId The id for the customer of a store.\n   * @param {module:model/EcommerceCustomer4} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceCustomer}\n   */\n  this.setStoreCustomer = function(storeId, customerId, body) {\n    return this.setStoreCustomerWithHttpInfo(storeId, customerId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add or update product variant\n   * Add or update a product variant.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {String} variantId The id for the product variant.\n   * @param {module:model/EcommerceProductVariant4} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceProductVariant} and HTTP response\n   */\n  this.addProductVariantWithHttpInfo = function(storeId, productId, variantId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'productId' is set\n    if (productId === undefined || productId === null) {\n      throw new Error(\"Missing the required parameter 'productId' when calling \");\n    }\n\n    // verify the required parameter 'variantId' is set\n    if (variantId === undefined || variantId === null) {\n      throw new Error(\"Missing the required parameter 'variantId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'product_id': productId,\n      'variant_id': variantId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/products/{product_id}/variants/{variant_id}', 'PUT',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add or update product variant\n   * Add or update a product variant.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {String} variantId The id for the product variant.\n   * @param {module:model/EcommerceProductVariant4} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceProductVariant}\n   */\n  this.addProductVariant = function(storeId, productId, variantId, body) {\n    return this.addProductVariantWithHttpInfo(storeId, productId, variantId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n};\n\n\n//# sourceURL=webpack://invisibles23/./node_modules/@mailchimp/mailchimp_marketing/src/api/EcommerceApi.js?");

/***/ }),

/***/ "./node_modules/@mailchimp/mailchimp_marketing/src/api/FacebookAdsApi.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@mailchimp/mailchimp_marketing/src/api/FacebookAdsApi.js ***!
  \*******************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n * Mailchimp Marketing API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.80\n * Contact: apihelp@mailchimp.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.12\n *\n * Do not edit the class manually.\n *\n */\n\n\n\nvar ApiClient = __webpack_require__(/*! ../ApiClient */ \"./node_modules/@mailchimp/mailchimp_marketing/src/ApiClient.js\");\n\n/**\n * FacebookAds service.\n * @module api/FacebookAdsApi\n */\n\n/**\n * Constructs a new FacebookAdsApi. \n * @alias module:api/FacebookAdsApi\n * @class\n * @param {module:ApiClient} apiClient Optional API client implementation to use,\n * default to {@link module:ApiClient#instance} if unspecified.\n */\nmodule.exports = function(apiClient) {\n  this.apiClient = apiClient || ApiClient.instance;\n\n  /**\n   * List facebook ads\n   * Get list of Facebook ads.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {module:model/String} opts.sortField Returns files sorted by the specified field.\n   * @param {module:model/String} opts.sortDir Determines the order direction for sorted results.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2008} and HTTP response\n   */\n  this.listWithHttpInfo = function(opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset']),\n      'sort_field': ( opts['sortField'] ? opts['sortField'] : opts['sort_field']),\n      'sort_dir': ( opts['sortDir'] ? opts['sortDir'] : opts['sort_dir'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/facebook-ads', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List facebook ads\n   * Get list of Facebook ads.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {module:model/String} opts.sortField Returns files sorted by the specified field.\n   * @param {module:model/String} opts.sortDir Determines the order direction for sorted results.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2008}\n   */\n  this.list = function(opts) {\n    return this.listWithHttpInfo(opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get facebook ad info\n   * Get details of a Facebook ad.\n   * @param {String} outreachId The outreach id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2009} and HTTP response\n   */\n  this.getAdWithHttpInfo = function(outreachId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'outreachId' is set\n    if (outreachId === undefined || outreachId === null) {\n      throw new Error(\"Missing the required parameter 'outreachId' when calling \");\n    }\n\n    var pathParams = {\n      'outreach_id': outreachId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/facebook-ads/{outreach_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get facebook ad info\n   * Get details of a Facebook ad.\n   * @param {String} outreachId The outreach id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2009}\n   */\n  this.getAd = function(outreachId, opts) {\n    return this.getAdWithHttpInfo(outreachId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n};\n\n\n//# sourceURL=webpack://invisibles23/./node_modules/@mailchimp/mailchimp_marketing/src/api/FacebookAdsApi.js?");

/***/ }),

/***/ "./node_modules/@mailchimp/mailchimp_marketing/src/api/FileManagerApi.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@mailchimp/mailchimp_marketing/src/api/FileManagerApi.js ***!
  \*******************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n * Mailchimp Marketing API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.80\n * Contact: apihelp@mailchimp.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.12\n *\n * Do not edit the class manually.\n *\n */\n\n\n\nvar ApiClient = __webpack_require__(/*! ../ApiClient */ \"./node_modules/@mailchimp/mailchimp_marketing/src/ApiClient.js\");\n\n/**\n * FileManager service.\n * @module api/FileManagerApi\n */\n\n/**\n * Constructs a new FileManagerApi. \n * @alias module:api/FileManagerApi\n * @class\n * @param {module:ApiClient} apiClient Optional API client implementation to use,\n * default to {@link module:ApiClient#instance} if unspecified.\n */\nmodule.exports = function(apiClient) {\n  this.apiClient = apiClient || ApiClient.instance;\n\n  /**\n   * Delete file\n   * Remove a specific file from the File Manager.\n   * @param {String} fileId The unique id for the File Manager file.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.deleteFileWithHttpInfo = function(fileId) {\n    var postBody = null;\n\n    // verify the required parameter 'fileId' is set\n    if (fileId === undefined || fileId === null) {\n      throw new Error(\"Missing the required parameter 'fileId' when calling \");\n    }\n\n    var pathParams = {\n      'file_id': fileId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/file-manager/files/{file_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete file\n   * Remove a specific file from the File Manager.\n   * @param {String} fileId The unique id for the File Manager file.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.deleteFile = function(fileId) {\n    return this.deleteFileWithHttpInfo(fileId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Delete folder\n   * Delete a specific folder in the File Manager.\n   * @param {String} folderId The unique id for the File Manager folder.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.deleteFolderWithHttpInfo = function(folderId) {\n    var postBody = null;\n\n    // verify the required parameter 'folderId' is set\n    if (folderId === undefined || folderId === null) {\n      throw new Error(\"Missing the required parameter 'folderId' when calling \");\n    }\n\n    var pathParams = {\n      'folder_id': folderId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/file-manager/folders/{folder_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete folder\n   * Delete a specific folder in the File Manager.\n   * @param {String} folderId The unique id for the File Manager folder.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.deleteFolder = function(folderId) {\n    return this.deleteFolderWithHttpInfo(folderId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List stored files\n   * Get a list of available images and files stored in the File Manager for the account.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {String} opts.type The file type for the File Manager file.\n   * @param {String} opts.createdBy The Mailchimp account user who created the File Manager file.\n   * @param {String} opts.beforeCreatedAt Restrict the response to files created before the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.sinceCreatedAt Restrict the response to files created after the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {module:model/String} opts.sortField Returns files sorted by the specified field.\n   * @param {module:model/String} opts.sortDir Determines the order direction for sorted results.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FileManager} and HTTP response\n   */\n  this.filesWithHttpInfo = function(opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset']),\n      'type': ( opts['type'] ? opts['type'] : opts['type']),\n      'created_by': ( opts['createdBy'] ? opts['createdBy'] : opts['created_by']),\n      'before_created_at': ( opts['beforeCreatedAt'] ? opts['beforeCreatedAt'] : opts['before_created_at']),\n      'since_created_at': ( opts['sinceCreatedAt'] ? opts['sinceCreatedAt'] : opts['since_created_at']),\n      'sort_field': ( opts['sortField'] ? opts['sortField'] : opts['sort_field']),\n      'sort_dir': ( opts['sortDir'] ? opts['sortDir'] : opts['sort_dir'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/file-manager/files', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List stored files\n   * Get a list of available images and files stored in the File Manager for the account.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {String} opts.type The file type for the File Manager file.\n   * @param {String} opts.createdBy The Mailchimp account user who created the File Manager file.\n   * @param {String} opts.beforeCreatedAt Restrict the response to files created before the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.sinceCreatedAt Restrict the response to files created after the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {module:model/String} opts.sortField Returns files sorted by the specified field.\n   * @param {module:model/String} opts.sortDir Determines the order direction for sorted results.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/FileManager}\n   */\n  this.files = function(opts) {\n    return this.filesWithHttpInfo(opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get file\n   * Get information about a specific file in the File Manager.\n   * @param {String} fileId The unique id for the File Manager file.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GalleryFile} and HTTP response\n   */\n  this.getFileWithHttpInfo = function(fileId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'fileId' is set\n    if (fileId === undefined || fileId === null) {\n      throw new Error(\"Missing the required parameter 'fileId' when calling \");\n    }\n\n    var pathParams = {\n      'file_id': fileId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/file-manager/files/{file_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get file\n   * Get information about a specific file in the File Manager.\n   * @param {String} fileId The unique id for the File Manager file.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GalleryFile}\n   */\n  this.getFile = function(fileId, opts) {\n    return this.getFileWithHttpInfo(fileId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List folders\n   * Get a list of all folders in the File Manager.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {String} opts.createdBy The Mailchimp account user who created the File Manager file.\n   * @param {String} opts.beforeCreatedAt Restrict the response to files created before the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.sinceCreatedAt Restrict the response to files created after the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FileManagerFolders} and HTTP response\n   */\n  this.listFoldersWithHttpInfo = function(opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset']),\n      'created_by': ( opts['createdBy'] ? opts['createdBy'] : opts['created_by']),\n      'before_created_at': ( opts['beforeCreatedAt'] ? opts['beforeCreatedAt'] : opts['before_created_at']),\n      'since_created_at': ( opts['sinceCreatedAt'] ? opts['sinceCreatedAt'] : opts['since_created_at'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/file-manager/folders', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List folders\n   * Get a list of all folders in the File Manager.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {String} opts.createdBy The Mailchimp account user who created the File Manager file.\n   * @param {String} opts.beforeCreatedAt Restrict the response to files created before the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.sinceCreatedAt Restrict the response to files created after the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/FileManagerFolders}\n   */\n  this.listFolders = function(opts) {\n    return this.listFoldersWithHttpInfo(opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get folder\n   * Get information about a specific folder in the File Manager.\n   * @param {String} folderId The unique id for the File Manager folder.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GalleryFolder} and HTTP response\n   */\n  this.getFolderWithHttpInfo = function(folderId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'folderId' is set\n    if (folderId === undefined || folderId === null) {\n      throw new Error(\"Missing the required parameter 'folderId' when calling \");\n    }\n\n    var pathParams = {\n      'folder_id': folderId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/file-manager/folders/{folder_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get folder\n   * Get information about a specific folder in the File Manager.\n   * @param {String} folderId The unique id for the File Manager folder.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GalleryFolder}\n   */\n  this.getFolder = function(folderId, opts) {\n    return this.getFolderWithHttpInfo(folderId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update file\n   * Update a file in the File Manager.\n   * @param {String} fileId The unique id for the File Manager file.\n   * @param {module:model/GalleryFile2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GalleryFile} and HTTP response\n   */\n  this.updateFileWithHttpInfo = function(fileId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'fileId' is set\n    if (fileId === undefined || fileId === null) {\n      throw new Error(\"Missing the required parameter 'fileId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'file_id': fileId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/file-manager/files/{file_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update file\n   * Update a file in the File Manager.\n   * @param {String} fileId The unique id for the File Manager file.\n   * @param {module:model/GalleryFile2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GalleryFile}\n   */\n  this.updateFile = function(fileId, body) {\n    return this.updateFileWithHttpInfo(fileId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update folder\n   * Update a specific File Manager folder.\n   * @param {String} folderId The unique id for the File Manager folder.\n   * @param {module:model/GalleryFolder2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GalleryFolder} and HTTP response\n   */\n  this.updateFolderWithHttpInfo = function(folderId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'folderId' is set\n    if (folderId === undefined || folderId === null) {\n      throw new Error(\"Missing the required parameter 'folderId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'folder_id': folderId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/file-manager/folders/{folder_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update folder\n   * Update a specific File Manager folder.\n   * @param {String} folderId The unique id for the File Manager folder.\n   * @param {module:model/GalleryFolder2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GalleryFolder}\n   */\n  this.updateFolder = function(folderId, body) {\n    return this.updateFolderWithHttpInfo(folderId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add file\n   * Upload a new image or file to the File Manager.\n   * @param {module:model/GalleryFile1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GalleryFile} and HTTP response\n   */\n  this.uploadWithHttpInfo = function(body) {\n    var postBody = body;\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/file-manager/files', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add file\n   * Upload a new image or file to the File Manager.\n   * @param {module:model/GalleryFile1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GalleryFile}\n   */\n  this.upload = function(body) {\n    return this.uploadWithHttpInfo(body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add folder\n   * Create a new folder in the File Manager.\n   * @param {module:model/GalleryFolder1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GalleryFolder} and HTTP response\n   */\n  this.createFolderWithHttpInfo = function(body) {\n    var postBody = body;\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/file-manager/folders', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add folder\n   * Create a new folder in the File Manager.\n   * @param {module:model/GalleryFolder1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GalleryFolder}\n   */\n  this.createFolder = function(body) {\n    return this.createFolderWithHttpInfo(body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n};\n\n\n//# sourceURL=webpack://invisibles23/./node_modules/@mailchimp/mailchimp_marketing/src/api/FileManagerApi.js?");

/***/ }),

/***/ "./node_modules/@mailchimp/mailchimp_marketing/src/api/LandingPagesApi.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@mailchimp/mailchimp_marketing/src/api/LandingPagesApi.js ***!
  \********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n * Mailchimp Marketing API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.80\n * Contact: apihelp@mailchimp.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.12\n *\n * Do not edit the class manually.\n *\n */\n\n\n\nvar ApiClient = __webpack_require__(/*! ../ApiClient */ \"./node_modules/@mailchimp/mailchimp_marketing/src/ApiClient.js\");\n\n/**\n * LandingPages service.\n * @module api/LandingPagesApi\n */\n\n/**\n * Constructs a new LandingPagesApi. \n * @alias module:api/LandingPagesApi\n * @class\n * @param {module:ApiClient} apiClient Optional API client implementation to use,\n * default to {@link module:ApiClient#instance} if unspecified.\n */\nmodule.exports = function(apiClient) {\n  this.apiClient = apiClient || ApiClient.instance;\n\n  /**\n   * Delete landing page\n   * Delete a landing page.\n   * @param {String} pageId The unique id for the page.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.deletePageWithHttpInfo = function(pageId) {\n    var postBody = null;\n\n    // verify the required parameter 'pageId' is set\n    if (pageId === undefined || pageId === null) {\n      throw new Error(\"Missing the required parameter 'pageId' when calling \");\n    }\n\n    var pathParams = {\n      'page_id': pageId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/landing-pages/{page_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete landing page\n   * Delete a landing page.\n   * @param {String} pageId The unique id for the page.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.deletePage = function(pageId) {\n    return this.deletePageWithHttpInfo(pageId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List landing pages\n   * Get all landing pages.\n   * @param {Object} opts Optional parameters\n   * @param {module:model/String} opts.sortDir Determines the order direction for sorted results.\n   * @param {module:model/String} opts.sortField Returns files sorted by the specified field.\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2006} and HTTP response\n   */\n  this.getAllWithHttpInfo = function(opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'sort_dir': ( opts['sortDir'] ? opts['sortDir'] : opts['sort_dir']),\n      'sort_field': ( opts['sortField'] ? opts['sortField'] : opts['sort_field']),\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/landing-pages', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List landing pages\n   * Get all landing pages.\n   * @param {Object} opts Optional parameters\n   * @param {module:model/String} opts.sortDir Determines the order direction for sorted results.\n   * @param {module:model/String} opts.sortField Returns files sorted by the specified field.\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2006}\n   */\n  this.getAll = function(opts) {\n    return this.getAllWithHttpInfo(opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get landing page info\n   * Get information about a specific page.\n   * @param {String} pageId The unique id for the page.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LandingPage} and HTTP response\n   */\n  this.getPageWithHttpInfo = function(pageId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'pageId' is set\n    if (pageId === undefined || pageId === null) {\n      throw new Error(\"Missing the required parameter 'pageId' when calling \");\n    }\n\n    var pathParams = {\n      'page_id': pageId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/landing-pages/{page_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get landing page info\n   * Get information about a specific page.\n   * @param {String} pageId The unique id for the page.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LandingPage}\n   */\n  this.getPage = function(pageId, opts) {\n    return this.getPageWithHttpInfo(pageId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get landing page content\n   * Get the the HTML for your landing page.\n   * @param {String} pageId The unique id for the page.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LandingPageContent} and HTTP response\n   */\n  this.getPageContentWithHttpInfo = function(pageId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'pageId' is set\n    if (pageId === undefined || pageId === null) {\n      throw new Error(\"Missing the required parameter 'pageId' when calling \");\n    }\n\n    var pathParams = {\n      'page_id': pageId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/landing-pages/{page_id}/content', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get landing page content\n   * Get the the HTML for your landing page.\n   * @param {String} pageId The unique id for the page.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LandingPageContent}\n   */\n  this.getPageContent = function(pageId, opts) {\n    return this.getPageContentWithHttpInfo(pageId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update landing page\n   * Update a landing page.\n   * @param {String} pageId The unique id for the page.\n   * @param {module:model/LandingPage2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LandingPage} and HTTP response\n   */\n  this.updatePageWithHttpInfo = function(pageId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'pageId' is set\n    if (pageId === undefined || pageId === null) {\n      throw new Error(\"Missing the required parameter 'pageId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'page_id': pageId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/landing-pages/{page_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update landing page\n   * Update a landing page.\n   * @param {String} pageId The unique id for the page.\n   * @param {module:model/LandingPage2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LandingPage}\n   */\n  this.updatePage = function(pageId, body) {\n    return this.updatePageWithHttpInfo(pageId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add landing page\n   * Create a new Mailchimp landing page.\n   * @param {module:model/LandingPage1} body \n   * @param {Object} opts Optional parameters\n   * @param {Boolean} opts.useDefaultList Will create the Landing Page using the account's Default List instead of requiring a list_id.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LandingPage} and HTTP response\n   */\n  this.createWithHttpInfo = function(body, opts) {\n    opts = opts || {};\n    var postBody = body;\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'use_default_list': ( opts['useDefaultList'] ? opts['useDefaultList'] : opts['use_default_list'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/landing-pages', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add landing page\n   * Create a new Mailchimp landing page.\n   * @param {module:model/LandingPage1} body \n   * @param {Object} opts Optional parameters\n   * @param {Boolean} opts.useDefaultList Will create the Landing Page using the account's Default List instead of requiring a list_id.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LandingPage}\n   */\n  this.create = function(body, opts) {\n    return this.createWithHttpInfo(body, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Publish landing page\n   * Publish a landing page that is in draft, unpublished, or has been previously published and edited.\n   * @param {String} pageId The unique id for the page.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.publishPageWithHttpInfo = function(pageId) {\n    var postBody = null;\n\n    // verify the required parameter 'pageId' is set\n    if (pageId === undefined || pageId === null) {\n      throw new Error(\"Missing the required parameter 'pageId' when calling \");\n    }\n\n    var pathParams = {\n      'page_id': pageId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/landing-pages/{page_id}/actions/publish', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Publish landing page\n   * Publish a landing page that is in draft, unpublished, or has been previously published and edited.\n   * @param {String} pageId The unique id for the page.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.publishPage = function(pageId) {\n    return this.publishPageWithHttpInfo(pageId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Unpublish landing page\n   * Unpublish a landing page that is in draft or has been published.\n   * @param {String} pageId The unique id for the page.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.unpublishPageWithHttpInfo = function(pageId) {\n    var postBody = null;\n\n    // verify the required parameter 'pageId' is set\n    if (pageId === undefined || pageId === null) {\n      throw new Error(\"Missing the required parameter 'pageId' when calling \");\n    }\n\n    var pathParams = {\n      'page_id': pageId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/landing-pages/{page_id}/actions/unpublish', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Unpublish landing page\n   * Unpublish a landing page that is in draft or has been published.\n   * @param {String} pageId The unique id for the page.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.unpublishPage = function(pageId) {\n    return this.unpublishPageWithHttpInfo(pageId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n};\n\n\n//# sourceURL=webpack://invisibles23/./node_modules/@mailchimp/mailchimp_marketing/src/api/LandingPagesApi.js?");

/***/ }),

/***/ "./node_modules/@mailchimp/mailchimp_marketing/src/api/ListsApi.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@mailchimp/mailchimp_marketing/src/api/ListsApi.js ***!
  \*************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n * Mailchimp Marketing API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.80\n * Contact: apihelp@mailchimp.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.12\n *\n * Do not edit the class manually.\n *\n */\n\n\n\nvar ApiClient = __webpack_require__(/*! ../ApiClient */ \"./node_modules/@mailchimp/mailchimp_marketing/src/ApiClient.js\");\n\n/**\n * Lists service.\n * @module api/ListsApi\n */\n\n/**\n * Constructs a new ListsApi. \n * @alias module:api/ListsApi\n * @class\n * @param {module:ApiClient} apiClient Optional API client implementation to use,\n * default to {@link module:ApiClient#instance} if unspecified.\n */\nmodule.exports = function(apiClient) {\n  this.apiClient = apiClient || ApiClient.instance;\n\n  /**\n   * Delete list\n   * Delete a list from your Mailchimp account. If you delete a list, you'll lose the list history—including subscriber activity, unsubscribes, complaints, and bounces. You’ll also lose subscribers’ email addresses, unless you exported and backed up your list.\n   * @param {String} listId The unique ID for the list.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.deleteListWithHttpInfo = function(listId) {\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete list\n   * Delete a list from your Mailchimp account. If you delete a list, you'll lose the list history—including subscriber activity, unsubscribes, complaints, and bounces. You’ll also lose subscribers’ email addresses, unless you exported and backed up your list.\n   * @param {String} listId The unique ID for the list.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.deleteList = function(listId) {\n    return this.deleteListWithHttpInfo(listId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Delete interest category\n   * Delete a specific interest category.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} interestCategoryId The unique ID for the interest category.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.deleteInterestCategoryWithHttpInfo = function(listId, interestCategoryId) {\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'interestCategoryId' is set\n    if (interestCategoryId === undefined || interestCategoryId === null) {\n      throw new Error(\"Missing the required parameter 'interestCategoryId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'interest_category_id': interestCategoryId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/interest-categories/{interest_category_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete interest category\n   * Delete a specific interest category.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} interestCategoryId The unique ID for the interest category.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.deleteInterestCategory = function(listId, interestCategoryId) {\n    return this.deleteInterestCategoryWithHttpInfo(listId, interestCategoryId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Delete interest in category\n   * Delete interests or group names in a specific category.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} interestCategoryId The unique ID for the interest category.\n   * @param {String} interestId The specific interest or 'group name'.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.deleteInterestCategoryInterestWithHttpInfo = function(listId, interestCategoryId, interestId) {\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'interestCategoryId' is set\n    if (interestCategoryId === undefined || interestCategoryId === null) {\n      throw new Error(\"Missing the required parameter 'interestCategoryId' when calling \");\n    }\n\n    // verify the required parameter 'interestId' is set\n    if (interestId === undefined || interestId === null) {\n      throw new Error(\"Missing the required parameter 'interestId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'interest_category_id': interestCategoryId,\n      'interest_id': interestId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/interest-categories/{interest_category_id}/interests/{interest_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete interest in category\n   * Delete interests or group names in a specific category.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} interestCategoryId The unique ID for the interest category.\n   * @param {String} interestId The specific interest or 'group name'.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.deleteInterestCategoryInterest = function(listId, interestCategoryId, interestId) {\n    return this.deleteInterestCategoryInterestWithHttpInfo(listId, interestCategoryId, interestId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Archive list member\n   * Archive a list member. To permanently delete, use the delete-permanent action.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.deleteListMemberWithHttpInfo = function(listId, subscriberHash) {\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'subscriberHash' is set\n    if (subscriberHash === undefined || subscriberHash === null) {\n      throw new Error(\"Missing the required parameter 'subscriberHash' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'subscriber_hash': subscriberHash\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/members/{subscriber_hash}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Archive list member\n   * Archive a list member. To permanently delete, use the delete-permanent action.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.deleteListMember = function(listId, subscriberHash) {\n    return this.deleteListMemberWithHttpInfo(listId, subscriberHash)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Delete note\n   * Delete a specific note for a specific list member.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.\n   * @param {String} noteId The id for the note.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.deleteListMemberNoteWithHttpInfo = function(listId, subscriberHash, noteId) {\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'subscriberHash' is set\n    if (subscriberHash === undefined || subscriberHash === null) {\n      throw new Error(\"Missing the required parameter 'subscriberHash' when calling \");\n    }\n\n    // verify the required parameter 'noteId' is set\n    if (noteId === undefined || noteId === null) {\n      throw new Error(\"Missing the required parameter 'noteId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'subscriber_hash': subscriberHash,\n      'note_id': noteId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/members/{subscriber_hash}/notes/{note_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete note\n   * Delete a specific note for a specific list member.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.\n   * @param {String} noteId The id for the note.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.deleteListMemberNote = function(listId, subscriberHash, noteId) {\n    return this.deleteListMemberNoteWithHttpInfo(listId, subscriberHash, noteId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Delete merge field\n   * Delete a specific merge field.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} mergeId The id for the merge field.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.deleteListMergeFieldWithHttpInfo = function(listId, mergeId) {\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'mergeId' is set\n    if (mergeId === undefined || mergeId === null) {\n      throw new Error(\"Missing the required parameter 'mergeId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'merge_id': mergeId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/merge-fields/{merge_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete merge field\n   * Delete a specific merge field.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} mergeId The id for the merge field.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.deleteListMergeField = function(listId, mergeId) {\n    return this.deleteListMergeFieldWithHttpInfo(listId, mergeId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Delete segment\n   * Delete a specific segment in a list.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} segmentId The unique id for the segment.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.deleteSegmentWithHttpInfo = function(listId, segmentId) {\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'segmentId' is set\n    if (segmentId === undefined || segmentId === null) {\n      throw new Error(\"Missing the required parameter 'segmentId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'segment_id': segmentId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/segments/{segment_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete segment\n   * Delete a specific segment in a list.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} segmentId The unique id for the segment.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.deleteSegment = function(listId, segmentId) {\n    return this.deleteSegmentWithHttpInfo(listId, segmentId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Remove list member from segment\n   * Remove a member from the specified static segment.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} segmentId The unique id for the segment.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.removeSegmentMemberWithHttpInfo = function(listId, segmentId, subscriberHash) {\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'segmentId' is set\n    if (segmentId === undefined || segmentId === null) {\n      throw new Error(\"Missing the required parameter 'segmentId' when calling \");\n    }\n\n    // verify the required parameter 'subscriberHash' is set\n    if (subscriberHash === undefined || subscriberHash === null) {\n      throw new Error(\"Missing the required parameter 'subscriberHash' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'segment_id': segmentId,\n      'subscriber_hash': subscriberHash\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/segments/{segment_id}/members/{subscriber_hash}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Remove list member from segment\n   * Remove a member from the specified static segment.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} segmentId The unique id for the segment.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.removeSegmentMember = function(listId, segmentId, subscriberHash) {\n    return this.removeSegmentMemberWithHttpInfo(listId, segmentId, subscriberHash)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Delete webhook\n   * Delete a specific webhook in a list.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} webhookId The webhook's id.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.deleteListWebhookWithHttpInfo = function(listId, webhookId) {\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'webhookId' is set\n    if (webhookId === undefined || webhookId === null) {\n      throw new Error(\"Missing the required parameter 'webhookId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'webhook_id': webhookId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/webhooks/{webhook_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete webhook\n   * Delete a specific webhook in a list.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} webhookId The webhook's id.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.deleteListWebhook = function(listId, webhookId) {\n    return this.deleteListWebhookWithHttpInfo(listId, webhookId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List member tags\n   * Get the tags on a list member.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CollectionOfTags} and HTTP response\n   */\n  this.getListMemberTagsWithHttpInfo = function(listId, subscriberHash, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'subscriberHash' is set\n    if (subscriberHash === undefined || subscriberHash === null) {\n      throw new Error(\"Missing the required parameter 'subscriberHash' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'subscriber_hash': subscriberHash\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/members/{subscriber_hash}/tags', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List member tags\n   * Get the tags on a list member.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CollectionOfTags}\n   */\n  this.getListMemberTags = function(listId, subscriberHash, opts) {\n    return this.getListMemberTagsWithHttpInfo(listId, subscriberHash, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get lists info\n   * Get information about all lists in the account.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {String} opts.beforeDateCreated Restrict response to lists created before the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.sinceDateCreated Restrict results to lists created after the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.beforeCampaignLastSent Restrict results to lists created before the last campaign send date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.sinceCampaignLastSent Restrict results to lists created after the last campaign send date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.email Restrict results to lists that include a specific subscriber's email address.\n   * @param {module:model/String} opts.sortField Returns files sorted by the specified field.\n   * @param {module:model/String} opts.sortDir Determines the order direction for sorted results.\n   * @param {Boolean} opts.hasEcommerceStore Restrict results to lists that contain an active, connected, undeleted ecommerce store.\n   * @param {Boolean} opts.includeTotalContacts Return the total_contacts field in the stats response, which contains an approximate count of all contacts in any state.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SubscriberLists} and HTTP response\n   */\n  this.getAllListsWithHttpInfo = function(opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset']),\n      'before_date_created': ( opts['beforeDateCreated'] ? opts['beforeDateCreated'] : opts['before_date_created']),\n      'since_date_created': ( opts['sinceDateCreated'] ? opts['sinceDateCreated'] : opts['since_date_created']),\n      'before_campaign_last_sent': ( opts['beforeCampaignLastSent'] ? opts['beforeCampaignLastSent'] : opts['before_campaign_last_sent']),\n      'since_campaign_last_sent': ( opts['sinceCampaignLastSent'] ? opts['sinceCampaignLastSent'] : opts['since_campaign_last_sent']),\n      'email': ( opts['email'] ? opts['email'] : opts['email']),\n      'sort_field': ( opts['sortField'] ? opts['sortField'] : opts['sort_field']),\n      'sort_dir': ( opts['sortDir'] ? opts['sortDir'] : opts['sort_dir']),\n      'has_ecommerce_store': ( opts['hasEcommerceStore'] ? opts['hasEcommerceStore'] : opts['has_ecommerce_store']),\n      'include_total_contacts': ( opts['includeTotalContacts'] ? opts['includeTotalContacts'] : opts['include_total_contacts'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get lists info\n   * Get information about all lists in the account.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {String} opts.beforeDateCreated Restrict response to lists created before the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.sinceDateCreated Restrict results to lists created after the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.beforeCampaignLastSent Restrict results to lists created before the last campaign send date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.sinceCampaignLastSent Restrict results to lists created after the last campaign send date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.email Restrict results to lists that include a specific subscriber's email address.\n   * @param {module:model/String} opts.sortField Returns files sorted by the specified field.\n   * @param {module:model/String} opts.sortDir Determines the order direction for sorted results.\n   * @param {Boolean} opts.hasEcommerceStore Restrict results to lists that contain an active, connected, undeleted ecommerce store.\n   * @param {Boolean} opts.includeTotalContacts Return the total_contacts field in the stats response, which contains an approximate count of all contacts in any state.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SubscriberLists}\n   */\n  this.getAllLists = function(opts) {\n    return this.getAllListsWithHttpInfo(opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get list info\n   * Get information about a specific list in your Mailchimp account. Results include list members who have signed up but haven't confirmed their subscription yet and unsubscribed or cleaned.\n   * @param {String} listId The unique ID for the list.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Boolean} opts.includeTotalContacts Return the total_contacts field in the stats response, which contains an approximate count of all contacts in any state.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SubscriberList} and HTTP response\n   */\n  this.getListWithHttpInfo = function(listId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'include_total_contacts': ( opts['includeTotalContacts'] ? opts['includeTotalContacts'] : opts['include_total_contacts'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get list info\n   * Get information about a specific list in your Mailchimp account. Results include list members who have signed up but haven't confirmed their subscription yet and unsubscribed or cleaned.\n   * @param {String} listId The unique ID for the list.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Boolean} opts.includeTotalContacts Return the total_contacts field in the stats response, which contains an approximate count of all contacts in any state.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SubscriberList}\n   */\n  this.getList = function(listId, opts) {\n    return this.getListWithHttpInfo(listId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List abuse reports\n   * Get all abuse reports for a specific list.\n   * @param {String} listId The unique ID for the list.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AbuseComplaints} and HTTP response\n   */\n  this.getListAbuseReportsWithHttpInfo = function(listId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/abuse-reports', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List abuse reports\n   * Get all abuse reports for a specific list.\n   * @param {String} listId The unique ID for the list.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AbuseComplaints}\n   */\n  this.getListAbuseReports = function(listId, opts) {\n    return this.getListAbuseReportsWithHttpInfo(listId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get abuse report\n   * Get details about a specific abuse report.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} reportId The id for the abuse report.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AbuseComplaint} and HTTP response\n   */\n  this.getListAbuseReportDetailsWithHttpInfo = function(listId, reportId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'reportId' is set\n    if (reportId === undefined || reportId === null) {\n      throw new Error(\"Missing the required parameter 'reportId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'report_id': reportId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/abuse-reports/{report_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get abuse report\n   * Get details about a specific abuse report.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} reportId The id for the abuse report.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AbuseComplaint}\n   */\n  this.getListAbuseReportDetails = function(listId, reportId, opts) {\n    return this.getListAbuseReportDetailsWithHttpInfo(listId, reportId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List recent activity\n   * Get up to the previous 180 days of daily detailed aggregated activity stats for a list, not including Automation activity.\n   * @param {String} listId The unique ID for the list.\n   * @param {Object} opts Optional parameters\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListActivity} and HTTP response\n   */\n  this.getListRecentActivityWithHttpInfo = function(listId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset']),\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/activity', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List recent activity\n   * Get up to the previous 180 days of daily detailed aggregated activity stats for a list, not including Automation activity.\n   * @param {String} listId The unique ID for the list.\n   * @param {Object} opts Optional parameters\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListActivity}\n   */\n  this.getListRecentActivity = function(listId, opts) {\n    return this.getListRecentActivityWithHttpInfo(listId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List top email clients\n   * Get a list of the top email clients based on user-agent strings.\n   * @param {String} listId The unique ID for the list.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EmailClients} and HTTP response\n   */\n  this.getListClientsWithHttpInfo = function(listId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/clients', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List top email clients\n   * Get a list of the top email clients based on user-agent strings.\n   * @param {String} listId The unique ID for the list.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EmailClients}\n   */\n  this.getListClients = function(listId, opts) {\n    return this.getListClientsWithHttpInfo(listId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List growth history data\n   * Get a month-by-month summary of a specific list's growth activity.\n   * @param {String} listId The unique ID for the list.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {module:model/String} opts.sortField Returns files sorted by the specified field.\n   * @param {module:model/String} opts.sortDir Determines the order direction for sorted results.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GrowthHistory} and HTTP response\n   */\n  this.getListGrowthHistoryWithHttpInfo = function(listId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset']),\n      'sort_field': ( opts['sortField'] ? opts['sortField'] : opts['sort_field']),\n      'sort_dir': ( opts['sortDir'] ? opts['sortDir'] : opts['sort_dir'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/growth-history', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List growth history data\n   * Get a month-by-month summary of a specific list's growth activity.\n   * @param {String} listId The unique ID for the list.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {module:model/String} opts.sortField Returns files sorted by the specified field.\n   * @param {module:model/String} opts.sortDir Determines the order direction for sorted results.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GrowthHistory}\n   */\n  this.getListGrowthHistory = function(listId, opts) {\n    return this.getListGrowthHistoryWithHttpInfo(listId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get growth history by month\n   * Get a summary of a specific list's growth activity for a specific month and year.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} month A specific month of list growth history.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GrowthHistory} and HTTP response\n   */\n  this.getListGrowthHistoryByMonthWithHttpInfo = function(listId, month, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'month' is set\n    if (month === undefined || month === null) {\n      throw new Error(\"Missing the required parameter 'month' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'month': month\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/growth-history/{month}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get growth history by month\n   * Get a summary of a specific list's growth activity for a specific month and year.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} month A specific month of list growth history.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GrowthHistory}\n   */\n  this.getListGrowthHistoryByMonth = function(listId, month, opts) {\n    return this.getListGrowthHistoryByMonthWithHttpInfo(listId, month, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List interest categories\n   * Get information about a list's interest categories.\n   * @param {String} listId The unique ID for the list.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {String} opts.type Restrict results a type of interest group\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InterestGroupings} and HTTP response\n   */\n  this.getListInterestCategoriesWithHttpInfo = function(listId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset']),\n      'type': ( opts['type'] ? opts['type'] : opts['type'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/interest-categories', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List interest categories\n   * Get information about a list's interest categories.\n   * @param {String} listId The unique ID for the list.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {String} opts.type Restrict results a type of interest group\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InterestGroupings}\n   */\n  this.getListInterestCategories = function(listId, opts) {\n    return this.getListInterestCategoriesWithHttpInfo(listId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get interest category info\n   * Get information about a specific interest category.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} interestCategoryId The unique ID for the interest category.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InterestCategory} and HTTP response\n   */\n  this.getInterestCategoryWithHttpInfo = function(listId, interestCategoryId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'interestCategoryId' is set\n    if (interestCategoryId === undefined || interestCategoryId === null) {\n      throw new Error(\"Missing the required parameter 'interestCategoryId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'interest_category_id': interestCategoryId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/interest-categories/{interest_category_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get interest category info\n   * Get information about a specific interest category.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} interestCategoryId The unique ID for the interest category.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InterestCategory}\n   */\n  this.getInterestCategory = function(listId, interestCategoryId, opts) {\n    return this.getInterestCategoryWithHttpInfo(listId, interestCategoryId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List interests in category\n   * Get a list of this category's interests.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} interestCategoryId The unique ID for the interest category.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Interests} and HTTP response\n   */\n  this.listInterestCategoryInterestsWithHttpInfo = function(listId, interestCategoryId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'interestCategoryId' is set\n    if (interestCategoryId === undefined || interestCategoryId === null) {\n      throw new Error(\"Missing the required parameter 'interestCategoryId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'interest_category_id': interestCategoryId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/interest-categories/{interest_category_id}/interests', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List interests in category\n   * Get a list of this category's interests.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} interestCategoryId The unique ID for the interest category.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Interests}\n   */\n  this.listInterestCategoryInterests = function(listId, interestCategoryId, opts) {\n    return this.listInterestCategoryInterestsWithHttpInfo(listId, interestCategoryId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get interest in category\n   * Get interests or 'group names' for a specific category.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} interestCategoryId The unique ID for the interest category.\n   * @param {String} interestId The specific interest or 'group name'.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Interest} and HTTP response\n   */\n  this.getInterestCategoryInterestWithHttpInfo = function(listId, interestCategoryId, interestId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'interestCategoryId' is set\n    if (interestCategoryId === undefined || interestCategoryId === null) {\n      throw new Error(\"Missing the required parameter 'interestCategoryId' when calling \");\n    }\n\n    // verify the required parameter 'interestId' is set\n    if (interestId === undefined || interestId === null) {\n      throw new Error(\"Missing the required parameter 'interestId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'interest_category_id': interestCategoryId,\n      'interest_id': interestId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/interest-categories/{interest_category_id}/interests/{interest_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get interest in category\n   * Get interests or 'group names' for a specific category.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} interestCategoryId The unique ID for the interest category.\n   * @param {String} interestId The specific interest or 'group name'.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Interest}\n   */\n  this.getInterestCategoryInterest = function(listId, interestCategoryId, interestId, opts) {\n    return this.getInterestCategoryInterestWithHttpInfo(listId, interestCategoryId, interestId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List locations\n   * Get the locations (countries) that the list's subscribers have been tagged to based on geocoding their IP address.\n   * @param {String} listId The unique ID for the list.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListLocations} and HTTP response\n   */\n  this.getListLocationsWithHttpInfo = function(listId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/locations', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List locations\n   * Get the locations (countries) that the list's subscribers have been tagged to based on geocoding their IP address.\n   * @param {String} listId The unique ID for the list.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListLocations}\n   */\n  this.getListLocations = function(listId, opts) {\n    return this.getListLocationsWithHttpInfo(listId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List members info\n   * Get information about members in a specific Mailchimp list.\n   * @param {String} listId The unique ID for the list.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {String} opts.emailType The email type.\n   * @param {module:model/String} opts.status The subscriber's status.\n   * @param {String} opts.sinceTimestampOpt Restrict results to subscribers who opted-in after the set timeframe. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.beforeTimestampOpt Restrict results to subscribers who opted-in before the set timeframe. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.sinceLastChanged Restrict results to subscribers whose information changed after the set timeframe. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.beforeLastChanged Restrict results to subscribers whose information changed before the set timeframe. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.uniqueEmailId A unique identifier for the email address across all Mailchimp lists.\n   * @param {Boolean} opts.vipOnly A filter to return only the list's VIP members. Passing `true` will restrict results to VIP list members, passing `false` will return all list members.\n   * @param {String} opts.interestCategoryId The unique id for the interest category.\n   * @param {String} opts.interestIds Used to filter list members by interests. Must be accompanied by interest_category_id and interest_match. The value must be a comma separated list of interest ids present for any supplied interest categories.\n   * @param {module:model/String} opts.interestMatch Used to filter list members by interests. Must be accompanied by interest_category_id and interest_ids. \\\"any\\\" will match a member with any of the interest supplied, \\\"all\\\" will only match members with every interest supplied, and \\\"none\\\" will match members without any of the interest supplied.\n   * @param {module:model/String} opts.sortField Returns files sorted by the specified field.\n   * @param {module:model/String} opts.sortDir Determines the order direction for sorted results.\n   * @param {Boolean} opts.sinceLastCampaign Filter subscribers by those subscribed/unsubscribed/pending/cleaned since last email campaign send. Member status is required to use this filter.\n   * @param {String} opts.unsubscribedSince Filter subscribers by those unsubscribed since a specific date. Using any status other than unsubscribed with this filter will result in an error.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListMembers2} and HTTP response\n   */\n  this.getListMembersInfoWithHttpInfo = function(listId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset']),\n      'email_type': ( opts['emailType'] ? opts['emailType'] : opts['email_type']),\n      'status': ( opts['status'] ? opts['status'] : opts['status']),\n      'since_timestamp_opt': ( opts['sinceTimestampOpt'] ? opts['sinceTimestampOpt'] : opts['since_timestamp_opt']),\n      'before_timestamp_opt': ( opts['beforeTimestampOpt'] ? opts['beforeTimestampOpt'] : opts['before_timestamp_opt']),\n      'since_last_changed': ( opts['sinceLastChanged'] ? opts['sinceLastChanged'] : opts['since_last_changed']),\n      'before_last_changed': ( opts['beforeLastChanged'] ? opts['beforeLastChanged'] : opts['before_last_changed']),\n      'unique_email_id': ( opts['uniqueEmailId'] ? opts['uniqueEmailId'] : opts['unique_email_id']),\n      'vip_only': ( opts['vipOnly'] ? opts['vipOnly'] : opts['vip_only']),\n      'interest_category_id': ( opts['interestCategoryId'] ? opts['interestCategoryId'] : opts['interest_category_id']),\n      'interest_ids': ( opts['interestIds'] ? opts['interestIds'] : opts['interest_ids']),\n      'interest_match': ( opts['interestMatch'] ? opts['interestMatch'] : opts['interest_match']),\n      'sort_field': ( opts['sortField'] ? opts['sortField'] : opts['sort_field']),\n      'sort_dir': ( opts['sortDir'] ? opts['sortDir'] : opts['sort_dir']),\n      'since_last_campaign': ( opts['sinceLastCampaign'] ? opts['sinceLastCampaign'] : opts['since_last_campaign']),\n      'unsubscribed_since': ( opts['unsubscribedSince'] ? opts['unsubscribedSince'] : opts['unsubscribed_since'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/members', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List members info\n   * Get information about members in a specific Mailchimp list.\n   * @param {String} listId The unique ID for the list.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {String} opts.emailType The email type.\n   * @param {module:model/String} opts.status The subscriber's status.\n   * @param {String} opts.sinceTimestampOpt Restrict results to subscribers who opted-in after the set timeframe. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.beforeTimestampOpt Restrict results to subscribers who opted-in before the set timeframe. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.sinceLastChanged Restrict results to subscribers whose information changed after the set timeframe. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.beforeLastChanged Restrict results to subscribers whose information changed before the set timeframe. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.uniqueEmailId A unique identifier for the email address across all Mailchimp lists.\n   * @param {Boolean} opts.vipOnly A filter to return only the list's VIP members. Passing `true` will restrict results to VIP list members, passing `false` will return all list members.\n   * @param {String} opts.interestCategoryId The unique id for the interest category.\n   * @param {String} opts.interestIds Used to filter list members by interests. Must be accompanied by interest_category_id and interest_match. The value must be a comma separated list of interest ids present for any supplied interest categories.\n   * @param {module:model/String} opts.interestMatch Used to filter list members by interests. Must be accompanied by interest_category_id and interest_ids. \\\"any\\\" will match a member with any of the interest supplied, \\\"all\\\" will only match members with every interest supplied, and \\\"none\\\" will match members without any of the interest supplied.\n   * @param {module:model/String} opts.sortField Returns files sorted by the specified field.\n   * @param {module:model/String} opts.sortDir Determines the order direction for sorted results.\n   * @param {Boolean} opts.sinceLastCampaign Filter subscribers by those subscribed/unsubscribed/pending/cleaned since last email campaign send. Member status is required to use this filter.\n   * @param {String} opts.unsubscribedSince Filter subscribers by those unsubscribed since a specific date. Using any status other than unsubscribed with this filter will result in an error.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListMembers2}\n   */\n  this.getListMembersInfo = function(listId, opts) {\n    return this.getListMembersInfoWithHttpInfo(listId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get member info\n   * Get information about a specific list member, including a currently subscribed, unsubscribed, or bounced member.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListMembers2} and HTTP response\n   */\n  this.getListMemberWithHttpInfo = function(listId, subscriberHash, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'subscriberHash' is set\n    if (subscriberHash === undefined || subscriberHash === null) {\n      throw new Error(\"Missing the required parameter 'subscriberHash' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'subscriber_hash': subscriberHash\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/members/{subscriber_hash}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get member info\n   * Get information about a specific list member, including a currently subscribed, unsubscribed, or bounced member.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListMembers2}\n   */\n  this.getListMember = function(listId, subscriberHash, opts) {\n    return this.getListMemberWithHttpInfo(listId, subscriberHash, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * View recent activity 50\n   * Get the last 50 events of a member's activity on a specific list, including opens, clicks, and unsubscribes.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.action A comma seperated list of actions to return.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MemberActivityEvents} and HTTP response\n   */\n  this.getListMemberActivityWithHttpInfo = function(listId, subscriberHash, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'subscriberHash' is set\n    if (subscriberHash === undefined || subscriberHash === null) {\n      throw new Error(\"Missing the required parameter 'subscriberHash' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'subscriber_hash': subscriberHash\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'action': this.apiClient.buildCollectionParam(opts['action'] ? opts['action'] : opts['action'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/members/{subscriber_hash}/activity', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * View recent activity 50\n   * Get the last 50 events of a member's activity on a specific list, including opens, clicks, and unsubscribes.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.action A comma seperated list of actions to return.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MemberActivityEvents}\n   */\n  this.getListMemberActivity = function(listId, subscriberHash, opts) {\n    return this.getListMemberActivityWithHttpInfo(listId, subscriberHash, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * View recent activity\n   * Get a member's activity on a specific list, including opens, clicks, and unsubscribes.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {Array.<String>} opts.activityFilters A comma-separated list of activity filters that correspond to a set of activity types, e.g \\\"?activity_filters=open,bounce,click\\\".\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MemberActivityEvents1} and HTTP response\n   */\n  this.getListMemberActivityFeedWithHttpInfo = function(listId, subscriberHash, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'subscriberHash' is set\n    if (subscriberHash === undefined || subscriberHash === null) {\n      throw new Error(\"Missing the required parameter 'subscriberHash' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'subscriber_hash': subscriberHash\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset']),\n      'activity_filters': this.apiClient.buildCollectionParam(opts['activityFilters'] ? opts['activityFilters'] : opts['activity_filters'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/members/{subscriber_hash}/activity-feed', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * View recent activity\n   * Get a member's activity on a specific list, including opens, clicks, and unsubscribes.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {Array.<String>} opts.activityFilters A comma-separated list of activity filters that correspond to a set of activity types, e.g \\\"?activity_filters=open,bounce,click\\\".\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MemberActivityEvents1}\n   */\n  this.getListMemberActivityFeed = function(listId, subscriberHash, opts) {\n    return this.getListMemberActivityFeedWithHttpInfo(listId, subscriberHash, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List member events\n   * Get events for a contact.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.\n   * @param {Object} opts Optional parameters\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CollectionOfEvents} and HTTP response\n   */\n  this.getListMemberEventsWithHttpInfo = function(listId, subscriberHash, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'subscriberHash' is set\n    if (subscriberHash === undefined || subscriberHash === null) {\n      throw new Error(\"Missing the required parameter 'subscriberHash' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'subscriber_hash': subscriberHash\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset']),\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/members/{subscriber_hash}/events', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List member events\n   * Get events for a contact.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.\n   * @param {Object} opts Optional parameters\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CollectionOfEvents}\n   */\n  this.getListMemberEvents = function(listId, subscriberHash, opts) {\n    return this.getListMemberEventsWithHttpInfo(listId, subscriberHash, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List member goal events\n   * Get the last 50 Goal events for a member on a specific list.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CollectionOfMemberActivityEvents} and HTTP response\n   */\n  this.getListMemberGoalsWithHttpInfo = function(listId, subscriberHash, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'subscriberHash' is set\n    if (subscriberHash === undefined || subscriberHash === null) {\n      throw new Error(\"Missing the required parameter 'subscriberHash' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'subscriber_hash': subscriberHash\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/members/{subscriber_hash}/goals', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List member goal events\n   * Get the last 50 Goal events for a member on a specific list.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CollectionOfMemberActivityEvents}\n   */\n  this.getListMemberGoals = function(listId, subscriberHash, opts) {\n    return this.getListMemberGoalsWithHttpInfo(listId, subscriberHash, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List recent member notes\n   * Get recent notes for a specific list member.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address.\n   * @param {Object} opts Optional parameters\n   * @param {module:model/String} opts.sortField Returns notes sorted by the specified field.\n   * @param {module:model/String} opts.sortDir Determines the order direction for sorted results.\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CollectionOfNotes} and HTTP response\n   */\n  this.getListMemberNotesWithHttpInfo = function(listId, subscriberHash, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'subscriberHash' is set\n    if (subscriberHash === undefined || subscriberHash === null) {\n      throw new Error(\"Missing the required parameter 'subscriberHash' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'subscriber_hash': subscriberHash\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'sort_field': ( opts['sortField'] ? opts['sortField'] : opts['sort_field']),\n      'sort_dir': ( opts['sortDir'] ? opts['sortDir'] : opts['sort_dir']),\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/members/{subscriber_hash}/notes', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List recent member notes\n   * Get recent notes for a specific list member.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address.\n   * @param {Object} opts Optional parameters\n   * @param {module:model/String} opts.sortField Returns notes sorted by the specified field.\n   * @param {module:model/String} opts.sortDir Determines the order direction for sorted results.\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CollectionOfNotes}\n   */\n  this.getListMemberNotes = function(listId, subscriberHash, opts) {\n    return this.getListMemberNotesWithHttpInfo(listId, subscriberHash, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get member note\n   * Get a specific note for a specific list member.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.\n   * @param {String} noteId The id for the note.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MemberNotes} and HTTP response\n   */\n  this.getListMemberNoteWithHttpInfo = function(listId, subscriberHash, noteId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'subscriberHash' is set\n    if (subscriberHash === undefined || subscriberHash === null) {\n      throw new Error(\"Missing the required parameter 'subscriberHash' when calling \");\n    }\n\n    // verify the required parameter 'noteId' is set\n    if (noteId === undefined || noteId === null) {\n      throw new Error(\"Missing the required parameter 'noteId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'subscriber_hash': subscriberHash,\n      'note_id': noteId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/members/{subscriber_hash}/notes/{note_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get member note\n   * Get a specific note for a specific list member.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.\n   * @param {String} noteId The id for the note.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MemberNotes}\n   */\n  this.getListMemberNote = function(listId, subscriberHash, noteId, opts) {\n    return this.getListMemberNoteWithHttpInfo(listId, subscriberHash, noteId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List merge fields\n   * Get a list of all merge fields for an audience.\n   * @param {String} listId The unique ID for the list.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {String} opts.type The merge field type.\n   * @param {Boolean} opts.required Whether it's a required merge field.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CollectionOfMergeFields} and HTTP response\n   */\n  this.getListMergeFieldsWithHttpInfo = function(listId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset']),\n      'type': ( opts['type'] ? opts['type'] : opts['type']),\n      'required': ( opts['required'] ? opts['required'] : opts['required'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/merge-fields', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List merge fields\n   * Get a list of all merge fields for an audience.\n   * @param {String} listId The unique ID for the list.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {String} opts.type The merge field type.\n   * @param {Boolean} opts.required Whether it's a required merge field.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CollectionOfMergeFields}\n   */\n  this.getListMergeFields = function(listId, opts) {\n    return this.getListMergeFieldsWithHttpInfo(listId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get merge field\n   * Get information about a specific merge field.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} mergeId The id for the merge field.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MergeField} and HTTP response\n   */\n  this.getListMergeFieldWithHttpInfo = function(listId, mergeId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'mergeId' is set\n    if (mergeId === undefined || mergeId === null) {\n      throw new Error(\"Missing the required parameter 'mergeId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'merge_id': mergeId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/merge-fields/{merge_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get merge field\n   * Get information about a specific merge field.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} mergeId The id for the merge field.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MergeField}\n   */\n  this.getListMergeField = function(listId, mergeId, opts) {\n    return this.getListMergeFieldWithHttpInfo(listId, mergeId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get segment info\n   * Get information about a specific segment.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} segmentId The unique id for the segment.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Boolean} opts.includeCleaned Include cleaned members in response\n   * @param {Boolean} opts.includeTransactional Include transactional members in response\n   * @param {Boolean} opts.includeUnsubscribed Include unsubscribed members in response\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/List7} and HTTP response\n   */\n  this.getSegmentWithHttpInfo = function(listId, segmentId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'segmentId' is set\n    if (segmentId === undefined || segmentId === null) {\n      throw new Error(\"Missing the required parameter 'segmentId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'segment_id': segmentId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'include_cleaned': ( opts['includeCleaned'] ? opts['includeCleaned'] : opts['include_cleaned']),\n      'include_transactional': ( opts['includeTransactional'] ? opts['includeTransactional'] : opts['include_transactional']),\n      'include_unsubscribed': ( opts['includeUnsubscribed'] ? opts['includeUnsubscribed'] : opts['include_unsubscribed'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/segments/{segment_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get segment info\n   * Get information about a specific segment.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} segmentId The unique id for the segment.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Boolean} opts.includeCleaned Include cleaned members in response\n   * @param {Boolean} opts.includeTransactional Include transactional members in response\n   * @param {Boolean} opts.includeUnsubscribed Include unsubscribed members in response\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/List7}\n   */\n  this.getSegment = function(listId, segmentId, opts) {\n    return this.getSegmentWithHttpInfo(listId, segmentId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List members in segment\n   * Get information about members in a saved segment.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} segmentId The unique id for the segment.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {Boolean} opts.includeCleaned Include cleaned members in response\n   * @param {Boolean} opts.includeTransactional Include transactional members in response\n   * @param {Boolean} opts.includeUnsubscribed Include unsubscribed members in response\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SegmentMembers} and HTTP response\n   */\n  this.getSegmentMembersListWithHttpInfo = function(listId, segmentId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'segmentId' is set\n    if (segmentId === undefined || segmentId === null) {\n      throw new Error(\"Missing the required parameter 'segmentId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'segment_id': segmentId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset']),\n      'include_cleaned': ( opts['includeCleaned'] ? opts['includeCleaned'] : opts['include_cleaned']),\n      'include_transactional': ( opts['includeTransactional'] ? opts['includeTransactional'] : opts['include_transactional']),\n      'include_unsubscribed': ( opts['includeUnsubscribed'] ? opts['includeUnsubscribed'] : opts['include_unsubscribed'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/segments/{segment_id}/members', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List members in segment\n   * Get information about members in a saved segment.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} segmentId The unique id for the segment.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {Boolean} opts.includeCleaned Include cleaned members in response\n   * @param {Boolean} opts.includeTransactional Include transactional members in response\n   * @param {Boolean} opts.includeUnsubscribed Include unsubscribed members in response\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SegmentMembers}\n   */\n  this.getSegmentMembersList = function(listId, segmentId, opts) {\n    return this.getSegmentMembersListWithHttpInfo(listId, segmentId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List signup forms\n   * Get signup forms for a specific list.\n   * @param {String} listId The unique ID for the list.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListSignupForms} and HTTP response\n   */\n  this.getListSignupFormsWithHttpInfo = function(listId) {\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/signup-forms', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List signup forms\n   * Get signup forms for a specific list.\n   * @param {String} listId The unique ID for the list.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListSignupForms}\n   */\n  this.getListSignupForms = function(listId) {\n    return this.getListSignupFormsWithHttpInfo(listId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get information about all surveys for a list\n   * Get information about all available surveys for a specific list.\n   * @param {String} listId The unique ID for the list.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.getAllSurveysForListWithHttpInfo = function(listId) {\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/surveys', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get information about all surveys for a list\n   * Get information about all available surveys for a specific list.\n   * @param {String} listId The unique ID for the list.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.getAllSurveysForList = function(listId) {\n    return this.getAllSurveysForListWithHttpInfo(listId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get survey\n   * Get details about a specific survey.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} surveyId The ID of the survey.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.getSurveyWithHttpInfo = function(listId, surveyId) {\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'surveyId' is set\n    if (surveyId === undefined || surveyId === null) {\n      throw new Error(\"Missing the required parameter 'surveyId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'survey_id': surveyId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/surveys/{survey_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get survey\n   * Get details about a specific survey.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} surveyId The ID of the survey.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.getSurvey = function(listId, surveyId) {\n    return this.getSurveyWithHttpInfo(listId, surveyId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List webhooks\n   * Get information about all webhooks for a specific list.\n   * @param {String} listId The unique ID for the list.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListWebhooks} and HTTP response\n   */\n  this.getListWebhooksWithHttpInfo = function(listId) {\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/webhooks', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List webhooks\n   * Get information about all webhooks for a specific list.\n   * @param {String} listId The unique ID for the list.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListWebhooks}\n   */\n  this.getListWebhooks = function(listId) {\n    return this.getListWebhooksWithHttpInfo(listId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get webhook info\n   * Get information about a specific webhook.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} webhookId The webhook's id.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListWebhooks} and HTTP response\n   */\n  this.getListWebhookWithHttpInfo = function(listId, webhookId) {\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'webhookId' is set\n    if (webhookId === undefined || webhookId === null) {\n      throw new Error(\"Missing the required parameter 'webhookId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'webhook_id': webhookId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/webhooks/{webhook_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get webhook info\n   * Get information about a specific webhook.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} webhookId The webhook's id.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListWebhooks}\n   */\n  this.getListWebhook = function(listId, webhookId) {\n    return this.getListWebhookWithHttpInfo(listId, webhookId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update lists\n   * Update the settings for a specific list.\n   * @param {String} listId The unique ID for the list.\n   * @param {module:model/SubscriberList2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SubscriberList} and HTTP response\n   */\n  this.updateListWithHttpInfo = function(listId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update lists\n   * Update the settings for a specific list.\n   * @param {String} listId The unique ID for the list.\n   * @param {module:model/SubscriberList2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SubscriberList}\n   */\n  this.updateList = function(listId, body) {\n    return this.updateListWithHttpInfo(listId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update interest category\n   * Update a specific interest category.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} interestCategoryId The unique ID for the interest category.\n   * @param {module:model/InterestCategory2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InterestCategory} and HTTP response\n   */\n  this.updateInterestCategoryWithHttpInfo = function(listId, interestCategoryId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'interestCategoryId' is set\n    if (interestCategoryId === undefined || interestCategoryId === null) {\n      throw new Error(\"Missing the required parameter 'interestCategoryId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'interest_category_id': interestCategoryId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/interest-categories/{interest_category_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update interest category\n   * Update a specific interest category.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} interestCategoryId The unique ID for the interest category.\n   * @param {module:model/InterestCategory2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InterestCategory}\n   */\n  this.updateInterestCategory = function(listId, interestCategoryId, body) {\n    return this.updateInterestCategoryWithHttpInfo(listId, interestCategoryId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update interest in category\n   * Update interests or 'group names' for a specific category.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} interestCategoryId The unique ID for the interest category.\n   * @param {String} interestId The specific interest or 'group name'.\n   * @param {module:model/Interest2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Interest} and HTTP response\n   */\n  this.updateInterestCategoryInterestWithHttpInfo = function(listId, interestCategoryId, interestId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'interestCategoryId' is set\n    if (interestCategoryId === undefined || interestCategoryId === null) {\n      throw new Error(\"Missing the required parameter 'interestCategoryId' when calling \");\n    }\n\n    // verify the required parameter 'interestId' is set\n    if (interestId === undefined || interestId === null) {\n      throw new Error(\"Missing the required parameter 'interestId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'interest_category_id': interestCategoryId,\n      'interest_id': interestId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/interest-categories/{interest_category_id}/interests/{interest_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update interest in category\n   * Update interests or 'group names' for a specific category.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} interestCategoryId The unique ID for the interest category.\n   * @param {String} interestId The specific interest or 'group name'.\n   * @param {module:model/Interest2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Interest}\n   */\n  this.updateInterestCategoryInterest = function(listId, interestCategoryId, interestId, body) {\n    return this.updateInterestCategoryInterestWithHttpInfo(listId, interestCategoryId, interestId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update list member\n   * Update information for a specific list member.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.\n   * @param {module:model/AddListMembers3} body \n   * @param {Object} opts Optional parameters\n   * @param {Boolean} opts.skipMergeValidation If skip_merge_validation is true, member data will be accepted without merge field values, even if the merge field is usually required. This defaults to false.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListMembers2} and HTTP response\n   */\n  this.updateListMemberWithHttpInfo = function(listId, subscriberHash, body, opts) {\n    opts = opts || {};\n    var postBody = body;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'subscriberHash' is set\n    if (subscriberHash === undefined || subscriberHash === null) {\n      throw new Error(\"Missing the required parameter 'subscriberHash' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'subscriber_hash': subscriberHash\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'skip_merge_validation': ( opts['skipMergeValidation'] ? opts['skipMergeValidation'] : opts['skip_merge_validation'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/members/{subscriber_hash}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update list member\n   * Update information for a specific list member.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.\n   * @param {module:model/AddListMembers3} body \n   * @param {Object} opts Optional parameters\n   * @param {Boolean} opts.skipMergeValidation If skip_merge_validation is true, member data will be accepted without merge field values, even if the merge field is usually required. This defaults to false.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListMembers2}\n   */\n  this.updateListMember = function(listId, subscriberHash, body, opts) {\n    return this.updateListMemberWithHttpInfo(listId, subscriberHash, body, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update note\n   * Update a specific note for a specific list member.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.\n   * @param {String} noteId The id for the note.\n   * @param {module:model/MemberNotes2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MemberNotes} and HTTP response\n   */\n  this.updateListMemberNoteWithHttpInfo = function(listId, subscriberHash, noteId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'subscriberHash' is set\n    if (subscriberHash === undefined || subscriberHash === null) {\n      throw new Error(\"Missing the required parameter 'subscriberHash' when calling \");\n    }\n\n    // verify the required parameter 'noteId' is set\n    if (noteId === undefined || noteId === null) {\n      throw new Error(\"Missing the required parameter 'noteId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'subscriber_hash': subscriberHash,\n      'note_id': noteId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/members/{subscriber_hash}/notes/{note_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update note\n   * Update a specific note for a specific list member.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.\n   * @param {String} noteId The id for the note.\n   * @param {module:model/MemberNotes2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MemberNotes}\n   */\n  this.updateListMemberNote = function(listId, subscriberHash, noteId, body) {\n    return this.updateListMemberNoteWithHttpInfo(listId, subscriberHash, noteId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update merge field\n   * Update a specific merge field.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} mergeId The id for the merge field.\n   * @param {module:model/MergeField2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MergeField} and HTTP response\n   */\n  this.updateListMergeFieldWithHttpInfo = function(listId, mergeId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'mergeId' is set\n    if (mergeId === undefined || mergeId === null) {\n      throw new Error(\"Missing the required parameter 'mergeId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'merge_id': mergeId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/merge-fields/{merge_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update merge field\n   * Update a specific merge field.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} mergeId The id for the merge field.\n   * @param {module:model/MergeField2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MergeField}\n   */\n  this.updateListMergeField = function(listId, mergeId, body) {\n    return this.updateListMergeFieldWithHttpInfo(listId, mergeId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update segment\n   * Update a specific segment in a list.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} segmentId The unique id for the segment.\n   * @param {module:model/List9} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/List7} and HTTP response\n   */\n  this.updateSegmentWithHttpInfo = function(listId, segmentId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'segmentId' is set\n    if (segmentId === undefined || segmentId === null) {\n      throw new Error(\"Missing the required parameter 'segmentId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'segment_id': segmentId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/segments/{segment_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update segment\n   * Update a specific segment in a list.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} segmentId The unique id for the segment.\n   * @param {module:model/List9} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/List7}\n   */\n  this.updateSegment = function(listId, segmentId, body) {\n    return this.updateSegmentWithHttpInfo(listId, segmentId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update webhook\n   * Update the settings for an existing webhook.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} webhookId The webhook's id.\n   * @param {module:model/AddWebhook1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListWebhooks} and HTTP response\n   */\n  this.updateListWebhookWithHttpInfo = function(listId, webhookId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'webhookId' is set\n    if (webhookId === undefined || webhookId === null) {\n      throw new Error(\"Missing the required parameter 'webhookId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'webhook_id': webhookId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/webhooks/{webhook_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update webhook\n   * Update the settings for an existing webhook.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} webhookId The webhook's id.\n   * @param {module:model/AddWebhook1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListWebhooks}\n   */\n  this.updateListWebhook = function(listId, webhookId, body) {\n    return this.updateListWebhookWithHttpInfo(listId, webhookId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add event\n   * Add an event for a list member.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.\n   * @param {module:model/Events} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.createListMemberEventWithHttpInfo = function(listId, subscriberHash, body) {\n    var postBody = body;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'subscriberHash' is set\n    if (subscriberHash === undefined || subscriberHash === null) {\n      throw new Error(\"Missing the required parameter 'subscriberHash' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'subscriber_hash': subscriberHash\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/members/{subscriber_hash}/events', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add event\n   * Add an event for a list member.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.\n   * @param {module:model/Events} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.createListMemberEvent = function(listId, subscriberHash, body) {\n    return this.createListMemberEventWithHttpInfo(listId, subscriberHash, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add or remove member tags\n   * Add or remove tags from a list member. If a tag that does not exist is passed in and set as 'active', a new tag will be created.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address.\n   * @param {module:model/MemberTags} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.updateListMemberTagsWithHttpInfo = function(listId, subscriberHash, body) {\n    var postBody = body;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'subscriberHash' is set\n    if (subscriberHash === undefined || subscriberHash === null) {\n      throw new Error(\"Missing the required parameter 'subscriberHash' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'subscriber_hash': subscriberHash\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/members/{subscriber_hash}/tags', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add or remove member tags\n   * Add or remove tags from a list member. If a tag that does not exist is passed in and set as 'active', a new tag will be created.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address.\n   * @param {module:model/MemberTags} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.updateListMemberTags = function(listId, subscriberHash, body) {\n    return this.updateListMemberTagsWithHttpInfo(listId, subscriberHash, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add list\n   * Create a new list in your Mailchimp account.\n   * @param {module:model/SubscriberList1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SubscriberList} and HTTP response\n   */\n  this.createListWithHttpInfo = function(body) {\n    var postBody = body;\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add list\n   * Create a new list in your Mailchimp account.\n   * @param {module:model/SubscriberList1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SubscriberList}\n   */\n  this.createList = function(body) {\n    return this.createListWithHttpInfo(body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Batch subscribe or unsubscribe\n   * Batch subscribe or unsubscribe list members.\n   * @param {String} listId The unique ID for the list.\n   * @param {module:model/MembersToSubscribeUnsubscribeTofromAListInBatch} body \n   * @param {Object} opts Optional parameters\n   * @param {Boolean} opts.skipMergeValidation If skip_merge_validation is true, member data will be accepted without merge field values, even if the merge field is usually required. This defaults to false.\n   * @param {Boolean} opts.skipDuplicateCheck If skip_duplicate_check is true, we will ignore duplicates sent in the request when using the batch sub/unsub on the lists endpoint. The status of the first appearance in the request will be saved. This defaults to false.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BatchUpdateListMembers} and HTTP response\n   */\n  this.batchListMembersWithHttpInfo = function(listId, body, opts) {\n    opts = opts || {};\n    var postBody = body;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'skip_merge_validation': ( opts['skipMergeValidation'] ? opts['skipMergeValidation'] : opts['skip_merge_validation']),\n      'skip_duplicate_check': ( opts['skipDuplicateCheck'] ? opts['skipDuplicateCheck'] : opts['skip_duplicate_check'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Batch subscribe or unsubscribe\n   * Batch subscribe or unsubscribe list members.\n   * @param {String} listId The unique ID for the list.\n   * @param {module:model/MembersToSubscribeUnsubscribeTofromAListInBatch} body \n   * @param {Object} opts Optional parameters\n   * @param {Boolean} opts.skipMergeValidation If skip_merge_validation is true, member data will be accepted without merge field values, even if the merge field is usually required. This defaults to false.\n   * @param {Boolean} opts.skipDuplicateCheck If skip_duplicate_check is true, we will ignore duplicates sent in the request when using the batch sub/unsub on the lists endpoint. The status of the first appearance in the request will be saved. This defaults to false.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BatchUpdateListMembers}\n   */\n  this.batchListMembers = function(listId, body, opts) {\n    return this.batchListMembersWithHttpInfo(listId, body, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add interest category\n   * Create a new interest category.\n   * @param {String} listId The unique ID for the list.\n   * @param {module:model/InterestCategory1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InterestCategory} and HTTP response\n   */\n  this.createListInterestCategoryWithHttpInfo = function(listId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/interest-categories', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add interest category\n   * Create a new interest category.\n   * @param {String} listId The unique ID for the list.\n   * @param {module:model/InterestCategory1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InterestCategory}\n   */\n  this.createListInterestCategory = function(listId, body) {\n    return this.createListInterestCategoryWithHttpInfo(listId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add interest in category\n   * Create a new interest or 'group name' for a specific category.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} interestCategoryId The unique ID for the interest category.\n   * @param {module:model/Interest1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Interest} and HTTP response\n   */\n  this.createInterestCategoryInterestWithHttpInfo = function(listId, interestCategoryId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'interestCategoryId' is set\n    if (interestCategoryId === undefined || interestCategoryId === null) {\n      throw new Error(\"Missing the required parameter 'interestCategoryId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'interest_category_id': interestCategoryId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/interest-categories/{interest_category_id}/interests', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add interest in category\n   * Create a new interest or 'group name' for a specific category.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} interestCategoryId The unique ID for the interest category.\n   * @param {module:model/Interest1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Interest}\n   */\n  this.createInterestCategoryInterest = function(listId, interestCategoryId, body) {\n    return this.createInterestCategoryInterestWithHttpInfo(listId, interestCategoryId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add member to list\n   * Add a new member to the list.\n   * @param {String} listId The unique ID for the list.\n   * @param {module:model/AddListMembers1} body \n   * @param {Object} opts Optional parameters\n   * @param {Boolean} opts.skipMergeValidation If skip_merge_validation is true, member data will be accepted without merge field values, even if the merge field is usually required. This defaults to false.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListMembers2} and HTTP response\n   */\n  this.addListMemberWithHttpInfo = function(listId, body, opts) {\n    opts = opts || {};\n    var postBody = body;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'skip_merge_validation': ( opts['skipMergeValidation'] ? opts['skipMergeValidation'] : opts['skip_merge_validation'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/members', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add member to list\n   * Add a new member to the list.\n   * @param {String} listId The unique ID for the list.\n   * @param {module:model/AddListMembers1} body \n   * @param {Object} opts Optional parameters\n   * @param {Boolean} opts.skipMergeValidation If skip_merge_validation is true, member data will be accepted without merge field values, even if the merge field is usually required. This defaults to false.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListMembers2}\n   */\n  this.addListMember = function(listId, body, opts) {\n    return this.addListMemberWithHttpInfo(listId, body, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Delete list member\n   * Delete all personally identifiable information related to a list member, and remove them from a list. This will make it impossible to re-import the list member.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.deleteListMemberPermanentWithHttpInfo = function(listId, subscriberHash) {\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'subscriberHash' is set\n    if (subscriberHash === undefined || subscriberHash === null) {\n      throw new Error(\"Missing the required parameter 'subscriberHash' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'subscriber_hash': subscriberHash\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/members/{subscriber_hash}/actions/delete-permanent', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete list member\n   * Delete all personally identifiable information related to a list member, and remove them from a list. This will make it impossible to re-import the list member.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.deleteListMemberPermanent = function(listId, subscriberHash) {\n    return this.deleteListMemberPermanentWithHttpInfo(listId, subscriberHash)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add member note\n   * Add a new note for a specific subscriber.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address.\n   * @param {module:model/MemberNotes1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MemberNotes} and HTTP response\n   */\n  this.createListMemberNoteWithHttpInfo = function(listId, subscriberHash, body) {\n    var postBody = body;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'subscriberHash' is set\n    if (subscriberHash === undefined || subscriberHash === null) {\n      throw new Error(\"Missing the required parameter 'subscriberHash' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'subscriber_hash': subscriberHash\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/members/{subscriber_hash}/notes', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add member note\n   * Add a new note for a specific subscriber.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address.\n   * @param {module:model/MemberNotes1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MemberNotes}\n   */\n  this.createListMemberNote = function(listId, subscriberHash, body) {\n    return this.createListMemberNoteWithHttpInfo(listId, subscriberHash, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add merge field\n   * Add a new merge field for a specific audience.\n   * @param {String} listId The unique ID for the list.\n   * @param {module:model/MergeField1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MergeField} and HTTP response\n   */\n  this.addListMergeFieldWithHttpInfo = function(listId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/merge-fields', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add merge field\n   * Add a new merge field for a specific audience.\n   * @param {String} listId The unique ID for the list.\n   * @param {module:model/MergeField1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MergeField}\n   */\n  this.addListMergeField = function(listId, body) {\n    return this.addListMergeFieldWithHttpInfo(listId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add segment\n   * Create a new segment in a specific list.\n   * @param {String} listId The unique ID for the list.\n   * @param {module:model/List8} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/List7} and HTTP response\n   */\n  this.createSegmentWithHttpInfo = function(listId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/segments', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add segment\n   * Create a new segment in a specific list.\n   * @param {String} listId The unique ID for the list.\n   * @param {module:model/List8} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/List7}\n   */\n  this.createSegment = function(listId, body) {\n    return this.createSegmentWithHttpInfo(listId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Batch add or remove members\n   * Batch add/remove list members to static segment\n   * @param {module:model/MembersToAddremoveTofromAStaticSegment} body \n   * @param {String} listId The unique ID for the list.\n   * @param {String} segmentId The unique id for the segment.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BatchAddremoveListMembersTofromStaticSegment} and HTTP response\n   */\n  this.batchSegmentMembersWithHttpInfo = function(body, listId, segmentId) {\n    var postBody = body;\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'segmentId' is set\n    if (segmentId === undefined || segmentId === null) {\n      throw new Error(\"Missing the required parameter 'segmentId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'segment_id': segmentId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/segments/{segment_id}', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Batch add or remove members\n   * Batch add/remove list members to static segment\n   * @param {module:model/MembersToAddremoveTofromAStaticSegment} body \n   * @param {String} listId The unique ID for the list.\n   * @param {String} segmentId The unique id for the segment.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BatchAddremoveListMembersTofromStaticSegment}\n   */\n  this.batchSegmentMembers = function(body, listId, segmentId) {\n    return this.batchSegmentMembersWithHttpInfo(body, listId, segmentId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add member to segment\n   * Add a member to a static segment.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} segmentId The unique id for the segment.\n   * @param {module:model/Body3} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListMembers1} and HTTP response\n   */\n  this.createSegmentMemberWithHttpInfo = function(listId, segmentId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'segmentId' is set\n    if (segmentId === undefined || segmentId === null) {\n      throw new Error(\"Missing the required parameter 'segmentId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'segment_id': segmentId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/segments/{segment_id}/members', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add member to segment\n   * Add a member to a static segment.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} segmentId The unique id for the segment.\n   * @param {module:model/Body3} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListMembers1}\n   */\n  this.createSegmentMember = function(listId, segmentId, body) {\n    return this.createSegmentMemberWithHttpInfo(listId, segmentId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Customize signup form\n   * Customize a list's default signup form.\n   * @param {String} listId The unique ID for the list.\n   * @param {module:model/SignupForm1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SignupForm} and HTTP response\n   */\n  this.updateListSignupFormWithHttpInfo = function(listId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/signup-forms', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Customize signup form\n   * Customize a list's default signup form.\n   * @param {String} listId The unique ID for the list.\n   * @param {module:model/SignupForm1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SignupForm}\n   */\n  this.updateListSignupForm = function(listId, body) {\n    return this.updateListSignupFormWithHttpInfo(listId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add webhook\n   * Create a new webhook for a specific list.\n   * @param {String} listId The unique ID for the list.\n   * @param {module:model/AddWebhook} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListWebhooks} and HTTP response\n   */\n  this.createListWebhookWithHttpInfo = function(listId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/webhooks', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add webhook\n   * Create a new webhook for a specific list.\n   * @param {String} listId The unique ID for the list.\n   * @param {module:model/AddWebhook} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListWebhooks}\n   */\n  this.createListWebhook = function(listId, body) {\n    return this.createListWebhookWithHttpInfo(listId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List segments\n   * Get information about all available segments for a specific list.\n   * @param {String} listId The unique ID for the list.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {String} opts.type Limit results based on segment type.\n   * @param {String} opts.sinceCreatedAt Restrict results to segments created after the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.beforeCreatedAt Restrict results to segments created before the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {Boolean} opts.includeCleaned Include cleaned members in response\n   * @param {Boolean} opts.includeTransactional Include transactional members in response\n   * @param {Boolean} opts.includeUnsubscribed Include unsubscribed members in response\n   * @param {String} opts.sinceUpdatedAt Restrict results to segments update after the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.beforeUpdatedAt Restrict results to segments update before the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CollectionOfSegments} and HTTP response\n   */\n  this.listSegmentsWithHttpInfo = function(listId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset']),\n      'type': ( opts['type'] ? opts['type'] : opts['type']),\n      'since_created_at': ( opts['sinceCreatedAt'] ? opts['sinceCreatedAt'] : opts['since_created_at']),\n      'before_created_at': ( opts['beforeCreatedAt'] ? opts['beforeCreatedAt'] : opts['before_created_at']),\n      'include_cleaned': ( opts['includeCleaned'] ? opts['includeCleaned'] : opts['include_cleaned']),\n      'include_transactional': ( opts['includeTransactional'] ? opts['includeTransactional'] : opts['include_transactional']),\n      'include_unsubscribed': ( opts['includeUnsubscribed'] ? opts['includeUnsubscribed'] : opts['include_unsubscribed']),\n      'since_updated_at': ( opts['sinceUpdatedAt'] ? opts['sinceUpdatedAt'] : opts['since_updated_at']),\n      'before_updated_at': ( opts['beforeUpdatedAt'] ? opts['beforeUpdatedAt'] : opts['before_updated_at'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/segments', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List segments\n   * Get information about all available segments for a specific list.\n   * @param {String} listId The unique ID for the list.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {String} opts.type Limit results based on segment type.\n   * @param {String} opts.sinceCreatedAt Restrict results to segments created after the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.beforeCreatedAt Restrict results to segments created before the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {Boolean} opts.includeCleaned Include cleaned members in response\n   * @param {Boolean} opts.includeTransactional Include transactional members in response\n   * @param {Boolean} opts.includeUnsubscribed Include unsubscribed members in response\n   * @param {String} opts.sinceUpdatedAt Restrict results to segments update after the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.beforeUpdatedAt Restrict results to segments update before the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CollectionOfSegments}\n   */\n  this.listSegments = function(listId, opts) {\n    return this.listSegmentsWithHttpInfo(listId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add or update list member\n   * Add or update a list member.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.\n   * @param {module:model/AddListMembers2} body \n   * @param {Object} opts Optional parameters\n   * @param {Boolean} opts.skipMergeValidation If skip_merge_validation is true, member data will be accepted without merge field values, even if the merge field is usually required. This defaults to false.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListMembers2} and HTTP response\n   */\n  this.setListMemberWithHttpInfo = function(listId, subscriberHash, body, opts) {\n    opts = opts || {};\n    var postBody = body;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'subscriberHash' is set\n    if (subscriberHash === undefined || subscriberHash === null) {\n      throw new Error(\"Missing the required parameter 'subscriberHash' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'subscriber_hash': subscriberHash\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'skip_merge_validation': ( opts['skipMergeValidation'] ? opts['skipMergeValidation'] : opts['skip_merge_validation'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/members/{subscriber_hash}', 'PUT',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add or update list member\n   * Add or update a list member.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.\n   * @param {module:model/AddListMembers2} body \n   * @param {Object} opts Optional parameters\n   * @param {Boolean} opts.skipMergeValidation If skip_merge_validation is true, member data will be accepted without merge field values, even if the merge field is usually required. This defaults to false.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListMembers2}\n   */\n  this.setListMember = function(listId, subscriberHash, body, opts) {\n    return this.setListMemberWithHttpInfo(listId, subscriberHash, body, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Search for tags on a list by name.\n   * Search for tags on a list by name. If no name is provided, will return all tags on the list.\n   * @param {String} listId The unique ID for the list.\n   * @param {Object} opts Optional parameters\n   * @param {String} opts.name The search query used to filter tags.  The search query will be compared to each tag as a prefix, so all tags that have a name starting with this field will be returned.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TagSearchResults} and HTTP response\n   */\n  this.tagSearchWithHttpInfo = function(listId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'name': ( opts['name'] ? opts['name'] : opts['name'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/tag-search', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Search for tags on a list by name.\n   * Search for tags on a list by name. If no name is provided, will return all tags on the list.\n   * @param {String} listId The unique ID for the list.\n   * @param {Object} opts Optional parameters\n   * @param {String} opts.name The search query used to filter tags.  The search query will be compared to each tag as a prefix, so all tags that have a name starting with this field will be returned.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TagSearchResults}\n   */\n  this.tagSearch = function(listId, opts) {\n    return this.tagSearchWithHttpInfo(listId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n};\n\n\n//# sourceURL=webpack://invisibles23/./node_modules/@mailchimp/mailchimp_marketing/src/api/ListsApi.js?");

/***/ }),

/***/ "./node_modules/@mailchimp/mailchimp_marketing/src/api/PingApi.js":
/*!************************************************************************!*\
  !*** ./node_modules/@mailchimp/mailchimp_marketing/src/api/PingApi.js ***!
  \************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n * Mailchimp Marketing API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.80\n * Contact: apihelp@mailchimp.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.12\n *\n * Do not edit the class manually.\n *\n */\n\n\n\nvar ApiClient = __webpack_require__(/*! ../ApiClient */ \"./node_modules/@mailchimp/mailchimp_marketing/src/ApiClient.js\");\n\n/**\n * Ping service.\n * @module api/PingApi\n */\n\n/**\n * Constructs a new PingApi. \n * @alias module:api/PingApi\n * @class\n * @param {module:ApiClient} apiClient Optional API client implementation to use,\n * default to {@link module:ApiClient#instance} if unspecified.\n */\nmodule.exports = function(apiClient) {\n  this.apiClient = apiClient || ApiClient.instance;\n\n  /**\n   * Ping\n   * A health check for the API that won't return any account-specific information.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/APIHealthStatus} and HTTP response\n   */\n  this.getWithHttpInfo = function() {\n    var postBody = null;\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ping', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Ping\n   * A health check for the API that won't return any account-specific information.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/APIHealthStatus}\n   */\n  this.get = function() {\n    return this.getWithHttpInfo()\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n};\n\n\n//# sourceURL=webpack://invisibles23/./node_modules/@mailchimp/mailchimp_marketing/src/api/PingApi.js?");

/***/ }),

/***/ "./node_modules/@mailchimp/mailchimp_marketing/src/api/ReportingApi.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@mailchimp/mailchimp_marketing/src/api/ReportingApi.js ***!
  \*****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n * Mailchimp Marketing API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.80\n * Contact: apihelp@mailchimp.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.12\n *\n * Do not edit the class manually.\n *\n */\n\n\n\nvar ApiClient = __webpack_require__(/*! ../ApiClient */ \"./node_modules/@mailchimp/mailchimp_marketing/src/ApiClient.js\");\n\n/**\n * Reporting service.\n * @module api/ReportingApi\n */\n\n/**\n * Constructs a new ReportingApi. \n * @alias module:api/ReportingApi\n * @class\n * @param {module:ApiClient} apiClient Optional API client implementation to use,\n * default to {@link module:ApiClient#instance} if unspecified.\n */\nmodule.exports = function(apiClient) {\n  this.apiClient = apiClient || ApiClient.instance;\n\n  /**\n   * List facebook ads reports\n   * Get reports of Facebook ads.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {module:model/String} opts.sortField Returns files sorted by the specified field.\n   * @param {module:model/String} opts.sortDir Determines the order direction for sorted results.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20010} and HTTP response\n   */\n  this.getFacebookAdsReportAllWithHttpInfo = function(opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset']),\n      'sort_field': ( opts['sortField'] ? opts['sortField'] : opts['sort_field']),\n      'sort_dir': ( opts['sortDir'] ? opts['sortDir'] : opts['sort_dir'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reporting/facebook-ads', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List facebook ads reports\n   * Get reports of Facebook ads.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {module:model/String} opts.sortField Returns files sorted by the specified field.\n   * @param {module:model/String} opts.sortDir Determines the order direction for sorted results.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20010}\n   */\n  this.getFacebookAdsReportAll = function(opts) {\n    return this.getFacebookAdsReportAllWithHttpInfo(opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get facebook ad report\n   * Get report of a Facebook ad.\n   * @param {String} outreachId The outreach id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20011} and HTTP response\n   */\n  this.getFacebookAdReportWithHttpInfo = function(outreachId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'outreachId' is set\n    if (outreachId === undefined || outreachId === null) {\n      throw new Error(\"Missing the required parameter 'outreachId' when calling \");\n    }\n\n    var pathParams = {\n      'outreach_id': outreachId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reporting/facebook-ads/{outreach_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get facebook ad report\n   * Get report of a Facebook ad.\n   * @param {String} outreachId The outreach id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20011}\n   */\n  this.getFacebookAdReport = function(outreachId, opts) {\n    return this.getFacebookAdReportWithHttpInfo(outreachId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List facebook ecommerce report\n   * Get breakdown of product activity for an outreach.\n   * @param {String} outreachId The outreach id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {module:model/String} opts.sortField Returns files sorted by the specified field.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2007} and HTTP response\n   */\n  this.getFacebookAdProductActivityReportWithHttpInfo = function(outreachId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'outreachId' is set\n    if (outreachId === undefined || outreachId === null) {\n      throw new Error(\"Missing the required parameter 'outreachId' when calling \");\n    }\n\n    var pathParams = {\n      'outreach_id': outreachId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset']),\n      'sort_field': ( opts['sortField'] ? opts['sortField'] : opts['sort_field'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reporting/facebook-ads/{outreach_id}/ecommerce-product-activity', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List facebook ecommerce report\n   * Get breakdown of product activity for an outreach.\n   * @param {String} outreachId The outreach id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {module:model/String} opts.sortField Returns files sorted by the specified field.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2007}\n   */\n  this.getFacebookAdProductActivityReport = function(outreachId, opts) {\n    return this.getFacebookAdProductActivityReportWithHttpInfo(outreachId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List landing pages reports\n   * Get reports of landing pages.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20012} and HTTP response\n   */\n  this.getLandingPageReportsAllWithHttpInfo = function(opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reporting/landing-pages', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List landing pages reports\n   * Get reports of landing pages.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20012}\n   */\n  this.getLandingPageReportsAll = function(opts) {\n    return this.getLandingPageReportsAllWithHttpInfo(opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get landing page report\n   * Get report of a landing page.\n   * @param {String} outreachId The outreach id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LandingPageReport} and HTTP response\n   */\n  this.getLandingPageReportWithHttpInfo = function(outreachId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'outreachId' is set\n    if (outreachId === undefined || outreachId === null) {\n      throw new Error(\"Missing the required parameter 'outreachId' when calling \");\n    }\n\n    var pathParams = {\n      'outreach_id': outreachId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reporting/landing-pages/{outreach_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get landing page report\n   * Get report of a landing page.\n   * @param {String} outreachId The outreach id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LandingPageReport}\n   */\n  this.getLandingPageReport = function(outreachId, opts) {\n    return this.getLandingPageReportWithHttpInfo(outreachId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List survey reports\n   * Get reports for surveys.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20013} and HTTP response\n   */\n  this.getSurveyReportsAllWithHttpInfo = function(opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reporting/surveys', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List survey reports\n   * Get reports for surveys.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20013}\n   */\n  this.getSurveyReportsAll = function(opts) {\n    return this.getSurveyReportsAllWithHttpInfo(opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get survey report\n   * Get report for a survey.\n   * @param {String} outreachId The outreach id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SurveyReport} and HTTP response\n   */\n  this.getSurveyReportWithHttpInfo = function(outreachId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'outreachId' is set\n    if (outreachId === undefined || outreachId === null) {\n      throw new Error(\"Missing the required parameter 'outreachId' when calling \");\n    }\n\n    var pathParams = {\n      'outreach_id': outreachId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reporting/surveys/{outreach_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get survey report\n   * Get report for a survey.\n   * @param {String} outreachId The outreach id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SurveyReport}\n   */\n  this.getSurveyReport = function(outreachId, opts) {\n    return this.getSurveyReportWithHttpInfo(outreachId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List survey question reports\n   * Get reports for survey questions.\n   * @param {String} outreachId The outreach id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20014} and HTTP response\n   */\n  this.getSurveyQuestionReportsAllWithHttpInfo = function(outreachId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'outreachId' is set\n    if (outreachId === undefined || outreachId === null) {\n      throw new Error(\"Missing the required parameter 'outreachId' when calling \");\n    }\n\n    var pathParams = {\n      'outreach_id': outreachId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reporting/surveys/{outreach_id}/questions', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List survey question reports\n   * Get reports for survey questions.\n   * @param {String} outreachId The outreach id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20014}\n   */\n  this.getSurveyQuestionReportsAll = function(outreachId, opts) {\n    return this.getSurveyQuestionReportsAllWithHttpInfo(outreachId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get survey question report\n   * Get report for a survey question.\n   * @param {String} outreachId The outreach id.\n   * @param {String} questionId The ID of the survey question.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SurveyQuestionReport} and HTTP response\n   */\n  this.getSurveyQuestionReportWithHttpInfo = function(outreachId, questionId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'outreachId' is set\n    if (outreachId === undefined || outreachId === null) {\n      throw new Error(\"Missing the required parameter 'outreachId' when calling \");\n    }\n\n    // verify the required parameter 'questionId' is set\n    if (questionId === undefined || questionId === null) {\n      throw new Error(\"Missing the required parameter 'questionId' when calling \");\n    }\n\n    var pathParams = {\n      'outreach_id': outreachId,\n      'question_id': questionId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reporting/surveys/{outreach_id}/questions/{question_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get survey question report\n   * Get report for a survey question.\n   * @param {String} outreachId The outreach id.\n   * @param {String} questionId The ID of the survey question.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SurveyQuestionReport}\n   */\n  this.getSurveyQuestionReport = function(outreachId, questionId, opts) {\n    return this.getSurveyQuestionReportWithHttpInfo(outreachId, questionId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List answers for question\n   * Get answers for a survey question.\n   * @param {String} outreachId The outreach id.\n   * @param {String} questionId The ID of the survey question.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {module:model/String} opts.respondentFamiliarityIs Filter survey responses by familiarity of the respondents.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20015} and HTTP response\n   */\n  this.getSurveyQuestionAnswersWithHttpInfo = function(outreachId, questionId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'outreachId' is set\n    if (outreachId === undefined || outreachId === null) {\n      throw new Error(\"Missing the required parameter 'outreachId' when calling \");\n    }\n\n    // verify the required parameter 'questionId' is set\n    if (questionId === undefined || questionId === null) {\n      throw new Error(\"Missing the required parameter 'questionId' when calling \");\n    }\n\n    var pathParams = {\n      'outreach_id': outreachId,\n      'question_id': questionId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'respondent_familiarity_is': ( opts['respondentFamiliarityIs'] ? opts['respondentFamiliarityIs'] : opts['respondent_familiarity_is'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reporting/surveys/{outreach_id}/questions/{question_id}/answers', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List answers for question\n   * Get answers for a survey question.\n   * @param {String} outreachId The outreach id.\n   * @param {String} questionId The ID of the survey question.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {module:model/String} opts.respondentFamiliarityIs Filter survey responses by familiarity of the respondents.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20015}\n   */\n  this.getSurveyQuestionAnswers = function(outreachId, questionId, opts) {\n    return this.getSurveyQuestionAnswersWithHttpInfo(outreachId, questionId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List survey responses\n   * Get responses to a survey.\n   * @param {String} outreachId The outreach id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.answeredQuestion The ID of the question that was answered.\n   * @param {String} opts.choseAnswer The ID of the option chosen to filter responses on.\n   * @param {module:model/String} opts.respondentFamiliarityIs Filter survey responses by familiarity of the respondents.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20016} and HTTP response\n   */\n  this.getSurveyResponsesAllWithHttpInfo = function(outreachId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'outreachId' is set\n    if (outreachId === undefined || outreachId === null) {\n      throw new Error(\"Missing the required parameter 'outreachId' when calling \");\n    }\n\n    var pathParams = {\n      'outreach_id': outreachId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'answered_question': ( opts['answeredQuestion'] ? opts['answeredQuestion'] : opts['answered_question']),\n      'chose_answer': ( opts['choseAnswer'] ? opts['choseAnswer'] : opts['chose_answer']),\n      'respondent_familiarity_is': ( opts['respondentFamiliarityIs'] ? opts['respondentFamiliarityIs'] : opts['respondent_familiarity_is'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reporting/surveys/{outreach_id}/responses', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List survey responses\n   * Get responses to a survey.\n   * @param {String} outreachId The outreach id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.answeredQuestion The ID of the question that was answered.\n   * @param {String} opts.choseAnswer The ID of the option chosen to filter responses on.\n   * @param {module:model/String} opts.respondentFamiliarityIs Filter survey responses by familiarity of the respondents.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20016}\n   */\n  this.getSurveyResponsesAll = function(outreachId, opts) {\n    return this.getSurveyResponsesAllWithHttpInfo(outreachId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get survey response\n   * Get a single survey response.\n   * @param {String} outreachId The outreach id.\n   * @param {String} responseId The ID of the survey response.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SurveyResponse} and HTTP response\n   */\n  this.getSurveyResponseWithHttpInfo = function(outreachId, responseId) {\n    var postBody = null;\n\n    // verify the required parameter 'outreachId' is set\n    if (outreachId === undefined || outreachId === null) {\n      throw new Error(\"Missing the required parameter 'outreachId' when calling \");\n    }\n\n    // verify the required parameter 'responseId' is set\n    if (responseId === undefined || responseId === null) {\n      throw new Error(\"Missing the required parameter 'responseId' when calling \");\n    }\n\n    var pathParams = {\n      'outreach_id': outreachId,\n      'response_id': responseId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reporting/surveys/{outreach_id}/responses/{response_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get survey response\n   * Get a single survey response.\n   * @param {String} outreachId The outreach id.\n   * @param {String} responseId The ID of the survey response.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SurveyResponse}\n   */\n  this.getSurveyResponse = function(outreachId, responseId) {\n    return this.getSurveyResponseWithHttpInfo(outreachId, responseId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n};\n\n\n//# sourceURL=webpack://invisibles23/./node_modules/@mailchimp/mailchimp_marketing/src/api/ReportingApi.js?");

/***/ }),

/***/ "./node_modules/@mailchimp/mailchimp_marketing/src/api/ReportsApi.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@mailchimp/mailchimp_marketing/src/api/ReportsApi.js ***!
  \***************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n * Mailchimp Marketing API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.80\n * Contact: apihelp@mailchimp.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.12\n *\n * Do not edit the class manually.\n *\n */\n\n\n\nvar ApiClient = __webpack_require__(/*! ../ApiClient */ \"./node_modules/@mailchimp/mailchimp_marketing/src/ApiClient.js\");\n\n/**\n * Reports service.\n * @module api/ReportsApi\n */\n\n/**\n * Constructs a new ReportsApi. \n * @alias module:api/ReportsApi\n * @class\n * @param {module:ApiClient} apiClient Optional API client implementation to use,\n * default to {@link module:ApiClient#instance} if unspecified.\n */\nmodule.exports = function(apiClient) {\n  this.apiClient = apiClient || ApiClient.instance;\n\n  /**\n   * List campaign reports\n   * Get campaign reports.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {module:model/String} opts.type The campaign type.\n   * @param {Date} opts.beforeSendTime Restrict the response to campaigns sent before the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {Date} opts.sinceSendTime Restrict the response to campaigns sent after the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CampaignReports1} and HTTP response\n   */\n  this.getAllCampaignReportsWithHttpInfo = function(opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset']),\n      'type': ( opts['type'] ? opts['type'] : opts['type']),\n      'before_send_time': ( opts['beforeSendTime'] ? opts['beforeSendTime'] : opts['before_send_time']),\n      'since_send_time': ( opts['sinceSendTime'] ? opts['sinceSendTime'] : opts['since_send_time'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reports', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List campaign reports\n   * Get campaign reports.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {module:model/String} opts.type The campaign type.\n   * @param {Date} opts.beforeSendTime Restrict the response to campaigns sent before the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {Date} opts.sinceSendTime Restrict the response to campaigns sent after the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CampaignReports1}\n   */\n  this.getAllCampaignReports = function(opts) {\n    return this.getAllCampaignReportsWithHttpInfo(opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get campaign report\n   * Get report details for a specific sent campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CampaignReport} and HTTP response\n   */\n  this.getCampaignReportWithHttpInfo = function(campaignId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reports/{campaign_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get campaign report\n   * Get report details for a specific sent campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CampaignReport}\n   */\n  this.getCampaignReport = function(campaignId, opts) {\n    return this.getCampaignReportWithHttpInfo(campaignId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List abuse reports\n   * Get a list of abuse complaints for a specific campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AbuseComplaints1} and HTTP response\n   */\n  this.getCampaignAbuseReportsWithHttpInfo = function(campaignId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reports/{campaign_id}/abuse-reports', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List abuse reports\n   * Get a list of abuse complaints for a specific campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AbuseComplaints1}\n   */\n  this.getCampaignAbuseReports = function(campaignId, opts) {\n    return this.getCampaignAbuseReportsWithHttpInfo(campaignId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get abuse report\n   * Get information about a specific abuse report for a campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {String} reportId The id for the abuse report.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AbuseComplaint1} and HTTP response\n   */\n  this.getCampaignAbuseReportWithHttpInfo = function(campaignId, reportId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    // verify the required parameter 'reportId' is set\n    if (reportId === undefined || reportId === null) {\n      throw new Error(\"Missing the required parameter 'reportId' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId,\n      'report_id': reportId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reports/{campaign_id}/abuse-reports/{report_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get abuse report\n   * Get information about a specific abuse report for a campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {String} reportId The id for the abuse report.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AbuseComplaint1}\n   */\n  this.getCampaignAbuseReport = function(campaignId, reportId, opts) {\n    return this.getCampaignAbuseReportWithHttpInfo(campaignId, reportId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List campaign feedback\n   * Get feedback based on a campaign's statistics. Advice feedback is based on campaign stats like opens, clicks, unsubscribes, bounces, and more.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CampaignAdviceReport} and HTTP response\n   */\n  this.getCampaignAdviceWithHttpInfo = function(campaignId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reports/{campaign_id}/advice', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List campaign feedback\n   * Get feedback based on a campaign's statistics. Advice feedback is based on campaign stats like opens, clicks, unsubscribes, bounces, and more.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CampaignAdviceReport}\n   */\n  this.getCampaignAdvice = function(campaignId, opts) {\n    return this.getCampaignAdviceWithHttpInfo(campaignId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List campaign details\n   * Get information about clicks on specific links in your Mailchimp campaigns.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ClickDetailReport} and HTTP response\n   */\n  this.getCampaignClickDetailsWithHttpInfo = function(campaignId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reports/{campaign_id}/click-details', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List campaign details\n   * Get information about clicks on specific links in your Mailchimp campaigns.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ClickDetailReport}\n   */\n  this.getCampaignClickDetails = function(campaignId, opts) {\n    return this.getCampaignClickDetailsWithHttpInfo(campaignId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get campaign link details\n   * Get click details for a specific link in a campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {String} linkId The id for the link.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ClickDetailReport} and HTTP response\n   */\n  this.getCampaignClickDetailsForLinkWithHttpInfo = function(campaignId, linkId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    // verify the required parameter 'linkId' is set\n    if (linkId === undefined || linkId === null) {\n      throw new Error(\"Missing the required parameter 'linkId' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId,\n      'link_id': linkId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reports/{campaign_id}/click-details/{link_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get campaign link details\n   * Get click details for a specific link in a campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {String} linkId The id for the link.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ClickDetailReport}\n   */\n  this.getCampaignClickDetailsForLink = function(campaignId, linkId, opts) {\n    return this.getCampaignClickDetailsForLinkWithHttpInfo(campaignId, linkId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List clicked link subscribers\n   * Get information about list members who clicked on a specific link in a campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {String} linkId The id for the link.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ClickDetailMembers} and HTTP response\n   */\n  this.getSubscribersInfoWithHttpInfo = function(campaignId, linkId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    // verify the required parameter 'linkId' is set\n    if (linkId === undefined || linkId === null) {\n      throw new Error(\"Missing the required parameter 'linkId' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId,\n      'link_id': linkId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reports/{campaign_id}/click-details/{link_id}/members', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List clicked link subscribers\n   * Get information about list members who clicked on a specific link in a campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {String} linkId The id for the link.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ClickDetailMembers}\n   */\n  this.getSubscribersInfo = function(campaignId, linkId, opts) {\n    return this.getSubscribersInfoWithHttpInfo(campaignId, linkId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get clicked link subscriber\n   * Get information about a specific subscriber who clicked a link in a specific campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {String} linkId The id for the link.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ClickDetailMember} and HTTP response\n   */\n  this.getSubscriberInfoWithHttpInfo = function(campaignId, linkId, subscriberHash, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    // verify the required parameter 'linkId' is set\n    if (linkId === undefined || linkId === null) {\n      throw new Error(\"Missing the required parameter 'linkId' when calling \");\n    }\n\n    // verify the required parameter 'subscriberHash' is set\n    if (subscriberHash === undefined || subscriberHash === null) {\n      throw new Error(\"Missing the required parameter 'subscriberHash' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId,\n      'link_id': linkId,\n      'subscriber_hash': subscriberHash\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reports/{campaign_id}/click-details/{link_id}/members/{subscriber_hash}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get clicked link subscriber\n   * Get information about a specific subscriber who clicked a link in a specific campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {String} linkId The id for the link.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ClickDetailMember}\n   */\n  this.getSubscriberInfo = function(campaignId, linkId, subscriberHash, opts) {\n    return this.getSubscriberInfoWithHttpInfo(campaignId, linkId, subscriberHash, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List domain performance stats\n   * Get statistics for the top-performing email domains in a campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DomainPerformance} and HTTP response\n   */\n  this.getDomainPerformanceForCampaignWithHttpInfo = function(campaignId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reports/{campaign_id}/domain-performance', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List domain performance stats\n   * Get statistics for the top-performing email domains in a campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DomainPerformance}\n   */\n  this.getDomainPerformanceForCampaign = function(campaignId, opts) {\n    return this.getDomainPerformanceForCampaignWithHttpInfo(campaignId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List campaign product activity\n   * Get breakdown of product activity for a campaign\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {module:model/String} opts.sortField Returns files sorted by the specified field.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2007} and HTTP response\n   */\n  this.getEcommerceProductActivityForCampaignWithHttpInfo = function(campaignId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset']),\n      'sort_field': ( opts['sortField'] ? opts['sortField'] : opts['sort_field'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reports/{campaign_id}/ecommerce-product-activity', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List campaign product activity\n   * Get breakdown of product activity for a campaign\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {module:model/String} opts.sortField Returns files sorted by the specified field.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2007}\n   */\n  this.getEcommerceProductActivityForCampaign = function(campaignId, opts) {\n    return this.getEcommerceProductActivityForCampaignWithHttpInfo(campaignId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List EepURL activity\n   * Get a summary of social activity for the campaign, tracked by EepURL.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EepurlActivity} and HTTP response\n   */\n  this.getEepurlActivityForCampaignWithHttpInfo = function(campaignId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reports/{campaign_id}/eepurl', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List EepURL activity\n   * Get a summary of social activity for the campaign, tracked by EepURL.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EepurlActivity}\n   */\n  this.getEepurlActivityForCampaign = function(campaignId, opts) {\n    return this.getEepurlActivityForCampaignWithHttpInfo(campaignId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List email activity\n   * Get a list of member's subscriber activity in a specific campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {String} opts.since Restrict results to email activity events that occur after a specific time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EmailActivity} and HTTP response\n   */\n  this.getEmailActivityForCampaignWithHttpInfo = function(campaignId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset']),\n      'since': ( opts['since'] ? opts['since'] : opts['since'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reports/{campaign_id}/email-activity', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List email activity\n   * Get a list of member's subscriber activity in a specific campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {String} opts.since Restrict results to email activity events that occur after a specific time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EmailActivity}\n   */\n  this.getEmailActivityForCampaign = function(campaignId, opts) {\n    return this.getEmailActivityForCampaignWithHttpInfo(campaignId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get subscriber email activity\n   * Get a specific list member's activity in a campaign including opens, clicks, and bounces.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {String} opts.since Restrict results to email activity events that occur after a specific time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EmailActivity} and HTTP response\n   */\n  this.getEmailActivityForSubscriberWithHttpInfo = function(campaignId, subscriberHash, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    // verify the required parameter 'subscriberHash' is set\n    if (subscriberHash === undefined || subscriberHash === null) {\n      throw new Error(\"Missing the required parameter 'subscriberHash' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId,\n      'subscriber_hash': subscriberHash\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'since': ( opts['since'] ? opts['since'] : opts['since'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reports/{campaign_id}/email-activity/{subscriber_hash}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get subscriber email activity\n   * Get a specific list member's activity in a campaign including opens, clicks, and bounces.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {String} opts.since Restrict results to email activity events that occur after a specific time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EmailActivity}\n   */\n  this.getEmailActivityForSubscriber = function(campaignId, subscriberHash, opts) {\n    return this.getEmailActivityForSubscriberWithHttpInfo(campaignId, subscriberHash, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List top open activities\n   * Get top open locations for a specific campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/OpenLocations} and HTTP response\n   */\n  this.getLocationsForCampaignWithHttpInfo = function(campaignId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reports/{campaign_id}/locations', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List top open activities\n   * Get top open locations for a specific campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/OpenLocations}\n   */\n  this.getLocationsForCampaign = function(campaignId, opts) {\n    return this.getLocationsForCampaignWithHttpInfo(campaignId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List campaign open details\n   * Get detailed information about any campaign emails that were opened by a list member.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {String} opts.since Restrict results to campaign open events that occur after a specific time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/OpenDetailReport} and HTTP response\n   */\n  this.getCampaignOpenDetailsWithHttpInfo = function(campaignId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset']),\n      'since': ( opts['since'] ? opts['since'] : opts['since'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reports/{campaign_id}/open-details', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List campaign open details\n   * Get detailed information about any campaign emails that were opened by a list member.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {String} opts.since Restrict results to campaign open events that occur after a specific time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/OpenDetailReport}\n   */\n  this.getCampaignOpenDetails = function(campaignId, opts) {\n    return this.getCampaignOpenDetailsWithHttpInfo(campaignId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get opened campaign subscriber\n   * Get information about a specific subscriber who opened a campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/OpenActivity} and HTTP response\n   */\n  this.getSubscriberInfoForOpenedCampaignWithHttpInfo = function(campaignId, subscriberHash, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    // verify the required parameter 'subscriberHash' is set\n    if (subscriberHash === undefined || subscriberHash === null) {\n      throw new Error(\"Missing the required parameter 'subscriberHash' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId,\n      'subscriber_hash': subscriberHash\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reports/{campaign_id}/open-details/{subscriber_hash}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get opened campaign subscriber\n   * Get information about a specific subscriber who opened a campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/OpenActivity}\n   */\n  this.getSubscriberInfoForOpenedCampaign = function(campaignId, subscriberHash, opts) {\n    return this.getSubscriberInfoForOpenedCampaignWithHttpInfo(campaignId, subscriberHash, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List campaign recipients\n   * Get information about campaign recipients.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SentTo} and HTTP response\n   */\n  this.getCampaignRecipientsWithHttpInfo = function(campaignId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reports/{campaign_id}/sent-to', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List campaign recipients\n   * Get information about campaign recipients.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SentTo}\n   */\n  this.getCampaignRecipients = function(campaignId, opts) {\n    return this.getCampaignRecipientsWithHttpInfo(campaignId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get campaign recipient info\n   * Get information about a specific campaign recipient.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SentTo} and HTTP response\n   */\n  this.getCampaignRecipientWithHttpInfo = function(campaignId, subscriberHash, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    // verify the required parameter 'subscriberHash' is set\n    if (subscriberHash === undefined || subscriberHash === null) {\n      throw new Error(\"Missing the required parameter 'subscriberHash' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId,\n      'subscriber_hash': subscriberHash\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reports/{campaign_id}/sent-to/{subscriber_hash}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get campaign recipient info\n   * Get information about a specific campaign recipient.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SentTo}\n   */\n  this.getCampaignRecipient = function(campaignId, subscriberHash, opts) {\n    return this.getCampaignRecipientWithHttpInfo(campaignId, subscriberHash, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List child campaign reports\n   * Get a list of reports with child campaigns for a specific parent campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CampaignSubReports} and HTTP response\n   */\n  this.getSubReportsForCampaignWithHttpInfo = function(campaignId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reports/{campaign_id}/sub-reports', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List child campaign reports\n   * Get a list of reports with child campaigns for a specific parent campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CampaignSubReports}\n   */\n  this.getSubReportsForCampaign = function(campaignId, opts) {\n    return this.getSubReportsForCampaignWithHttpInfo(campaignId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List unsubscribed members\n   * Get information about members who have unsubscribed from a specific campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Unsubscribes} and HTTP response\n   */\n  this.getUnsubscribedListForCampaignWithHttpInfo = function(campaignId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reports/{campaign_id}/unsubscribed', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List unsubscribed members\n   * Get information about members who have unsubscribed from a specific campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Unsubscribes}\n   */\n  this.getUnsubscribedListForCampaign = function(campaignId, opts) {\n    return this.getUnsubscribedListForCampaignWithHttpInfo(campaignId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get unsubscribed member\n   * Get information about a specific list member who unsubscribed from a campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Unsubscribes} and HTTP response\n   */\n  this.getUnsubscribedListMemberWithHttpInfo = function(campaignId, subscriberHash, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    // verify the required parameter 'subscriberHash' is set\n    if (subscriberHash === undefined || subscriberHash === null) {\n      throw new Error(\"Missing the required parameter 'subscriberHash' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId,\n      'subscriber_hash': subscriberHash\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reports/{campaign_id}/unsubscribed/{subscriber_hash}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get unsubscribed member\n   * Get information about a specific list member who unsubscribed from a campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Unsubscribes}\n   */\n  this.getUnsubscribedListMember = function(campaignId, subscriberHash, opts) {\n    return this.getUnsubscribedListMemberWithHttpInfo(campaignId, subscriberHash, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n};\n\n\n//# sourceURL=webpack://invisibles23/./node_modules/@mailchimp/mailchimp_marketing/src/api/ReportsApi.js?");

/***/ }),

/***/ "./node_modules/@mailchimp/mailchimp_marketing/src/api/RootApi.js":
/*!************************************************************************!*\
  !*** ./node_modules/@mailchimp/mailchimp_marketing/src/api/RootApi.js ***!
  \************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n * Mailchimp Marketing API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.80\n * Contact: apihelp@mailchimp.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.12\n *\n * Do not edit the class manually.\n *\n */\n\n\n\nvar ApiClient = __webpack_require__(/*! ../ApiClient */ \"./node_modules/@mailchimp/mailchimp_marketing/src/ApiClient.js\");\n\n/**\n * Root service.\n * @module api/RootApi\n */\n\n/**\n * Constructs a new RootApi. \n * @alias module:api/RootApi\n * @class\n * @param {module:ApiClient} apiClient Optional API client implementation to use,\n * default to {@link module:ApiClient#instance} if unspecified.\n */\nmodule.exports = function(apiClient) {\n  this.apiClient = apiClient || ApiClient.instance;\n\n  /**\n   * List api root resources\n   * Get links to all other resources available in the API.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/APIRoot} and HTTP response\n   */\n  this.getRootWithHttpInfo = function(opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List api root resources\n   * Get links to all other resources available in the API.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/APIRoot}\n   */\n  this.getRoot = function(opts) {\n    return this.getRootWithHttpInfo(opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n};\n\n\n//# sourceURL=webpack://invisibles23/./node_modules/@mailchimp/mailchimp_marketing/src/api/RootApi.js?");

/***/ }),

/***/ "./node_modules/@mailchimp/mailchimp_marketing/src/api/SearchCampaignsApi.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@mailchimp/mailchimp_marketing/src/api/SearchCampaignsApi.js ***!
  \***********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n * Mailchimp Marketing API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.80\n * Contact: apihelp@mailchimp.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.12\n *\n * Do not edit the class manually.\n *\n */\n\n\n\nvar ApiClient = __webpack_require__(/*! ../ApiClient */ \"./node_modules/@mailchimp/mailchimp_marketing/src/ApiClient.js\");\n\n/**\n * SearchCampaigns service.\n * @module api/SearchCampaignsApi\n */\n\n/**\n * Constructs a new SearchCampaignsApi. \n * @alias module:api/SearchCampaignsApi\n * @class\n * @param {module:ApiClient} apiClient Optional API client implementation to use,\n * default to {@link module:ApiClient#instance} if unspecified.\n */\nmodule.exports = function(apiClient) {\n  this.apiClient = apiClient || ApiClient.instance;\n\n  /**\n   * Search campaigns\n   * Search all campaigns for the specified query terms.\n   * @param {String} query The search query used to filter results.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Campaigns} and HTTP response\n   */\n  this.searchWithHttpInfo = function(query, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'query' is set\n    if (query === undefined || query === null) {\n      throw new Error(\"Missing the required parameter 'query' when calling \");\n    }\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'query': query\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/search-campaigns', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Search campaigns\n   * Search all campaigns for the specified query terms.\n   * @param {String} query The search query used to filter results.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Campaigns}\n   */\n  this.search = function(query, opts) {\n    return this.searchWithHttpInfo(query, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n};\n\n\n//# sourceURL=webpack://invisibles23/./node_modules/@mailchimp/mailchimp_marketing/src/api/SearchCampaignsApi.js?");

/***/ }),

/***/ "./node_modules/@mailchimp/mailchimp_marketing/src/api/SearchMembersApi.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@mailchimp/mailchimp_marketing/src/api/SearchMembersApi.js ***!
  \*********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n * Mailchimp Marketing API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.80\n * Contact: apihelp@mailchimp.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.12\n *\n * Do not edit the class manually.\n *\n */\n\n\n\nvar ApiClient = __webpack_require__(/*! ../ApiClient */ \"./node_modules/@mailchimp/mailchimp_marketing/src/ApiClient.js\");\n\n/**\n * SearchMembers service.\n * @module api/SearchMembersApi\n */\n\n/**\n * Constructs a new SearchMembersApi. \n * @alias module:api/SearchMembersApi\n * @class\n * @param {module:ApiClient} apiClient Optional API client implementation to use,\n * default to {@link module:ApiClient#instance} if unspecified.\n */\nmodule.exports = function(apiClient) {\n  this.apiClient = apiClient || ApiClient.instance;\n\n  /**\n   * Search members\n   * Search for list members. This search can be restricted to a specific list, or can be used to search across all lists in an account.\n   * @param {String} query The search query used to filter results. Query should be a valid email, or a string representing a contact's first or last name.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {String} opts.listId The unique id for the list.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Members} and HTTP response\n   */\n  this.searchWithHttpInfo = function(query, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'query' is set\n    if (query === undefined || query === null) {\n      throw new Error(\"Missing the required parameter 'query' when calling \");\n    }\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'query': query,\n      'list_id': ( opts['listId'] ? opts['listId'] : opts['list_id'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/search-members', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Search members\n   * Search for list members. This search can be restricted to a specific list, or can be used to search across all lists in an account.\n   * @param {String} query The search query used to filter results. Query should be a valid email, or a string representing a contact's first or last name.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {String} opts.listId The unique id for the list.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Members}\n   */\n  this.search = function(query, opts) {\n    return this.searchWithHttpInfo(query, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n};\n\n\n//# sourceURL=webpack://invisibles23/./node_modules/@mailchimp/mailchimp_marketing/src/api/SearchMembersApi.js?");

/***/ }),

/***/ "./node_modules/@mailchimp/mailchimp_marketing/src/api/SurveysApi.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@mailchimp/mailchimp_marketing/src/api/SurveysApi.js ***!
  \***************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n * Mailchimp Marketing API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.80\n * Contact: apihelp@mailchimp.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.12\n *\n * Do not edit the class manually.\n *\n */\n\n\n\nvar ApiClient = __webpack_require__(/*! ../ApiClient */ \"./node_modules/@mailchimp/mailchimp_marketing/src/ApiClient.js\");\n\n/**\n * Surveys service.\n * @module api/SurveysApi\n */\n\n/**\n * Constructs a new SurveysApi. \n * @alias module:api/SurveysApi\n * @class\n * @param {module:ApiClient} apiClient Optional API client implementation to use,\n * default to {@link module:ApiClient#instance} if unspecified.\n */\nmodule.exports = function(apiClient) {\n  this.apiClient = apiClient || ApiClient.instance;\n\n  /**\n   * Publish a Survey\n   * Publish a survey that is in draft, unpublished, or has been previously published and edited.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} surveyId The ID of the survey.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.publishSurveyWithHttpInfo = function(listId, surveyId) {\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'surveyId' is set\n    if (surveyId === undefined || surveyId === null) {\n      throw new Error(\"Missing the required parameter 'surveyId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'survey_id': surveyId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/surveys/{survey_id}/actions/publish', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Publish a Survey\n   * Publish a survey that is in draft, unpublished, or has been previously published and edited.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} surveyId The ID of the survey.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.publishSurvey = function(listId, surveyId) {\n    return this.publishSurveyWithHttpInfo(listId, surveyId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Unpublish a Survey\n   * Unpublish a survey that has been published.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} surveyId The ID of the survey.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.unpublishSurveyWithHttpInfo = function(listId, surveyId) {\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'surveyId' is set\n    if (surveyId === undefined || surveyId === null) {\n      throw new Error(\"Missing the required parameter 'surveyId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'survey_id': surveyId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/surveys/{survey_id}/actions/unpublish', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Unpublish a Survey\n   * Unpublish a survey that has been published.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} surveyId The ID of the survey.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.unpublishSurvey = function(listId, surveyId) {\n    return this.unpublishSurveyWithHttpInfo(listId, surveyId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n};\n\n\n//# sourceURL=webpack://invisibles23/./node_modules/@mailchimp/mailchimp_marketing/src/api/SurveysApi.js?");

/***/ }),

/***/ "./node_modules/@mailchimp/mailchimp_marketing/src/api/TemplateFoldersApi.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@mailchimp/mailchimp_marketing/src/api/TemplateFoldersApi.js ***!
  \***********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n * Mailchimp Marketing API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.80\n * Contact: apihelp@mailchimp.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.12\n *\n * Do not edit the class manually.\n *\n */\n\n\n\nvar ApiClient = __webpack_require__(/*! ../ApiClient */ \"./node_modules/@mailchimp/mailchimp_marketing/src/ApiClient.js\");\n\n/**\n * TemplateFolders service.\n * @module api/TemplateFoldersApi\n */\n\n/**\n * Constructs a new TemplateFoldersApi. \n * @alias module:api/TemplateFoldersApi\n * @class\n * @param {module:ApiClient} apiClient Optional API client implementation to use,\n * default to {@link module:ApiClient#instance} if unspecified.\n */\nmodule.exports = function(apiClient) {\n  this.apiClient = apiClient || ApiClient.instance;\n\n  /**\n   * Delete template folder\n   * Delete a specific template folder, and mark all the templates in the folder as 'unfiled'.\n   * @param {String} folderId The unique id for the template folder.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.removeWithHttpInfo = function(folderId) {\n    var postBody = null;\n\n    // verify the required parameter 'folderId' is set\n    if (folderId === undefined || folderId === null) {\n      throw new Error(\"Missing the required parameter 'folderId' when calling \");\n    }\n\n    var pathParams = {\n      'folder_id': folderId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/template-folders/{folder_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete template folder\n   * Delete a specific template folder, and mark all the templates in the folder as 'unfiled'.\n   * @param {String} folderId The unique id for the template folder.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.remove = function(folderId) {\n    return this.removeWithHttpInfo(folderId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List template folders\n   * Get all folders used to organize templates.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TemplateFolders} and HTTP response\n   */\n  this.listWithHttpInfo = function(opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/template-folders', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List template folders\n   * Get all folders used to organize templates.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TemplateFolders}\n   */\n  this.list = function(opts) {\n    return this.listWithHttpInfo(opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get template folder\n   * Get information about a specific folder used to organize templates.\n   * @param {String} folderId The unique id for the template folder.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TemplateFolder} and HTTP response\n   */\n  this.getWithHttpInfo = function(folderId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'folderId' is set\n    if (folderId === undefined || folderId === null) {\n      throw new Error(\"Missing the required parameter 'folderId' when calling \");\n    }\n\n    var pathParams = {\n      'folder_id': folderId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/template-folders/{folder_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get template folder\n   * Get information about a specific folder used to organize templates.\n   * @param {String} folderId The unique id for the template folder.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TemplateFolder}\n   */\n  this.get = function(folderId, opts) {\n    return this.getWithHttpInfo(folderId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update template folder\n   * Update a specific folder used to organize templates.\n   * @param {String} folderId The unique id for the template folder.\n   * @param {module:model/TemplateFolder2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TemplateFolder} and HTTP response\n   */\n  this.updateWithHttpInfo = function(folderId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'folderId' is set\n    if (folderId === undefined || folderId === null) {\n      throw new Error(\"Missing the required parameter 'folderId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'folder_id': folderId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/template-folders/{folder_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update template folder\n   * Update a specific folder used to organize templates.\n   * @param {String} folderId The unique id for the template folder.\n   * @param {module:model/TemplateFolder2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TemplateFolder}\n   */\n  this.update = function(folderId, body) {\n    return this.updateWithHttpInfo(folderId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add template folder\n   * Create a new template folder.\n   * @param {module:model/TemplateFolder1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TemplateFolder} and HTTP response\n   */\n  this.createWithHttpInfo = function(body) {\n    var postBody = body;\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/template-folders', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add template folder\n   * Create a new template folder.\n   * @param {module:model/TemplateFolder1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TemplateFolder}\n   */\n  this.create = function(body) {\n    return this.createWithHttpInfo(body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n};\n\n\n//# sourceURL=webpack://invisibles23/./node_modules/@mailchimp/mailchimp_marketing/src/api/TemplateFoldersApi.js?");

/***/ }),

/***/ "./node_modules/@mailchimp/mailchimp_marketing/src/api/TemplatesApi.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@mailchimp/mailchimp_marketing/src/api/TemplatesApi.js ***!
  \*****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n * Mailchimp Marketing API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.80\n * Contact: apihelp@mailchimp.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.12\n *\n * Do not edit the class manually.\n *\n */\n\n\n\nvar ApiClient = __webpack_require__(/*! ../ApiClient */ \"./node_modules/@mailchimp/mailchimp_marketing/src/ApiClient.js\");\n\n/**\n * Templates service.\n * @module api/TemplatesApi\n */\n\n/**\n * Constructs a new TemplatesApi. \n * @alias module:api/TemplatesApi\n * @class\n * @param {module:ApiClient} apiClient Optional API client implementation to use,\n * default to {@link module:ApiClient#instance} if unspecified.\n */\nmodule.exports = function(apiClient) {\n  this.apiClient = apiClient || ApiClient.instance;\n\n  /**\n   * Delete template\n   * Delete a specific template.\n   * @param {String} templateId The unique id for the template.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.deleteTemplateWithHttpInfo = function(templateId) {\n    var postBody = null;\n\n    // verify the required parameter 'templateId' is set\n    if (templateId === undefined || templateId === null) {\n      throw new Error(\"Missing the required parameter 'templateId' when calling \");\n    }\n\n    var pathParams = {\n      'template_id': templateId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/templates/{template_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete template\n   * Delete a specific template.\n   * @param {String} templateId The unique id for the template.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.deleteTemplate = function(templateId) {\n    return this.deleteTemplateWithHttpInfo(templateId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List templates\n   * Get a list of an account's available templates.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {String} opts.createdBy The Mailchimp account user who created the template.\n   * @param {String} opts.sinceDateCreated Restrict the response to templates created after the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.beforeDateCreated Restrict the response to templates created before the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.type Limit results based on template type.\n   * @param {String} opts.category Limit results based on category.\n   * @param {String} opts.folderId The unique folder id.\n   * @param {module:model/String} opts.sortField Returns user templates sorted by the specified field.\n   * @param {module:model/String} opts.sortDir Determines the order direction for sorted results.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Templates} and HTTP response\n   */\n  this.listWithHttpInfo = function(opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset']),\n      'created_by': ( opts['createdBy'] ? opts['createdBy'] : opts['created_by']),\n      'since_date_created': ( opts['sinceDateCreated'] ? opts['sinceDateCreated'] : opts['since_date_created']),\n      'before_date_created': ( opts['beforeDateCreated'] ? opts['beforeDateCreated'] : opts['before_date_created']),\n      'type': ( opts['type'] ? opts['type'] : opts['type']),\n      'category': ( opts['category'] ? opts['category'] : opts['category']),\n      'folder_id': ( opts['folderId'] ? opts['folderId'] : opts['folder_id']),\n      'sort_field': ( opts['sortField'] ? opts['sortField'] : opts['sort_field']),\n      'sort_dir': ( opts['sortDir'] ? opts['sortDir'] : opts['sort_dir'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/templates', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List templates\n   * Get a list of an account's available templates.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {String} opts.createdBy The Mailchimp account user who created the template.\n   * @param {String} opts.sinceDateCreated Restrict the response to templates created after the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.beforeDateCreated Restrict the response to templates created before the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.type Limit results based on template type.\n   * @param {String} opts.category Limit results based on category.\n   * @param {String} opts.folderId The unique folder id.\n   * @param {module:model/String} opts.sortField Returns user templates sorted by the specified field.\n   * @param {module:model/String} opts.sortDir Determines the order direction for sorted results.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Templates}\n   */\n  this.list = function(opts) {\n    return this.listWithHttpInfo(opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get template info\n   * Get information about a specific template.\n   * @param {String} templateId The unique id for the template.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TemplateInstance} and HTTP response\n   */\n  this.getTemplateWithHttpInfo = function(templateId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'templateId' is set\n    if (templateId === undefined || templateId === null) {\n      throw new Error(\"Missing the required parameter 'templateId' when calling \");\n    }\n\n    var pathParams = {\n      'template_id': templateId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/templates/{template_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get template info\n   * Get information about a specific template.\n   * @param {String} templateId The unique id for the template.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TemplateInstance}\n   */\n  this.getTemplate = function(templateId, opts) {\n    return this.getTemplateWithHttpInfo(templateId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * View default content\n   * Get the sections that you can edit in a template, including each section's default content.\n   * @param {String} templateId The unique id for the template.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TemplateDefaultContent} and HTTP response\n   */\n  this.getDefaultContentForTemplateWithHttpInfo = function(templateId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'templateId' is set\n    if (templateId === undefined || templateId === null) {\n      throw new Error(\"Missing the required parameter 'templateId' when calling \");\n    }\n\n    var pathParams = {\n      'template_id': templateId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/templates/{template_id}/default-content', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * View default content\n   * Get the sections that you can edit in a template, including each section's default content.\n   * @param {String} templateId The unique id for the template.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TemplateDefaultContent}\n   */\n  this.getDefaultContentForTemplate = function(templateId, opts) {\n    return this.getDefaultContentForTemplateWithHttpInfo(templateId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update template\n   * Update the name, HTML, or `folder_id` of an existing template.\n   * @param {String} templateId The unique id for the template.\n   * @param {module:model/TemplateInstance2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TemplateInstance} and HTTP response\n   */\n  this.updateTemplateWithHttpInfo = function(templateId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'templateId' is set\n    if (templateId === undefined || templateId === null) {\n      throw new Error(\"Missing the required parameter 'templateId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'template_id': templateId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/templates/{template_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update template\n   * Update the name, HTML, or `folder_id` of an existing template.\n   * @param {String} templateId The unique id for the template.\n   * @param {module:model/TemplateInstance2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TemplateInstance}\n   */\n  this.updateTemplate = function(templateId, body) {\n    return this.updateTemplateWithHttpInfo(templateId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add template\n   * Create a new template for the account. Only Classic templates are supported.\n   * @param {module:model/TemplateInstance1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TemplateInstance} and HTTP response\n   */\n  this.createWithHttpInfo = function(body) {\n    var postBody = body;\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/templates', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add template\n   * Create a new template for the account. Only Classic templates are supported.\n   * @param {module:model/TemplateInstance1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TemplateInstance}\n   */\n  this.create = function(body) {\n    return this.createWithHttpInfo(body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n};\n\n\n//# sourceURL=webpack://invisibles23/./node_modules/@mailchimp/mailchimp_marketing/src/api/TemplatesApi.js?");

/***/ }),

/***/ "./node_modules/@mailchimp/mailchimp_marketing/src/api/VerifiedDomainsApi.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@mailchimp/mailchimp_marketing/src/api/VerifiedDomainsApi.js ***!
  \***********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n * Mailchimp Marketing API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.80\n * Contact: apihelp@mailchimp.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.12\n *\n * Do not edit the class manually.\n *\n */\n\n\n\nvar ApiClient = __webpack_require__(/*! ../ApiClient */ \"./node_modules/@mailchimp/mailchimp_marketing/src/ApiClient.js\");\n\n/**\n * VerifiedDomains service.\n * @module api/VerifiedDomainsApi\n */\n\n/**\n * Constructs a new VerifiedDomainsApi. \n * @alias module:api/VerifiedDomainsApi\n * @class\n * @param {module:ApiClient} apiClient Optional API client implementation to use,\n * default to {@link module:ApiClient#instance} if unspecified.\n */\nmodule.exports = function(apiClient) {\n  this.apiClient = apiClient || ApiClient.instance;\n\n  /**\n   * Add domain to account\n   * Add a domain to the account.\n   * @param {module:model/VerifiedDomains2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VerifiedDomains} and HTTP response\n   */\n  this.createVerifiedDomainWithHttpInfo = function(body) {\n    var postBody = body;\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/verified-domains', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add domain to account\n   * Add a domain to the account.\n   * @param {module:model/VerifiedDomains2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VerifiedDomains}\n   */\n  this.createVerifiedDomain = function(body) {\n    return this.createVerifiedDomainWithHttpInfo(body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Delete domain\n   * Delete a verified domain from the account.\n   * @param {String} domainName The domain name.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.deleteDomainWithHttpInfo = function(domainName) {\n    var postBody = null;\n\n    // verify the required parameter 'domainName' is set\n    if (domainName === undefined || domainName === null) {\n      throw new Error(\"Missing the required parameter 'domainName' when calling \");\n    }\n\n    var pathParams = {\n      'domain_name': domainName\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/verified-domains/{domain_name}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete domain\n   * Delete a verified domain from the account.\n   * @param {String} domainName The domain name.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.deleteDomain = function(domainName) {\n    return this.deleteDomainWithHttpInfo(domainName)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get domain info\n   * Get the details for a single domain on the account.\n   * @param {String} domainName The domain name.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VerifiedDomains} and HTTP response\n   */\n  this.getDomainWithHttpInfo = function(domainName) {\n    var postBody = null;\n\n    // verify the required parameter 'domainName' is set\n    if (domainName === undefined || domainName === null) {\n      throw new Error(\"Missing the required parameter 'domainName' when calling \");\n    }\n\n    var pathParams = {\n      'domain_name': domainName\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/verified-domains/{domain_name}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get domain info\n   * Get the details for a single domain on the account.\n   * @param {String} domainName The domain name.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VerifiedDomains}\n   */\n  this.getDomain = function(domainName) {\n    return this.getDomainWithHttpInfo(domainName)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List sending domains\n   * Get all of the sending domains on the account.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VerifiedDomains1} and HTTP response\n   */\n  this.getVerifiedDomainsAllWithHttpInfo = function() {\n    var postBody = null;\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/verified-domains', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List sending domains\n   * Get all of the sending domains on the account.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VerifiedDomains1}\n   */\n  this.getVerifiedDomainsAll = function() {\n    return this.getVerifiedDomainsAllWithHttpInfo()\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Verify domain\n   * Verify a domain for sending.\n   * @param {String} domainName The domain name.\n   * @param {module:model/VerifyADomainForSending_} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VerifiedDomains} and HTTP response\n   */\n  this.submitDomainVerificationWithHttpInfo = function(domainName, body) {\n    var postBody = body;\n\n    // verify the required parameter 'domainName' is set\n    if (domainName === undefined || domainName === null) {\n      throw new Error(\"Missing the required parameter 'domainName' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'domain_name': domainName\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/verified-domains/{domain_name}/actions/verify', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Verify domain\n   * Verify a domain for sending.\n   * @param {String} domainName The domain name.\n   * @param {module:model/VerifyADomainForSending_} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VerifiedDomains}\n   */\n  this.submitDomainVerification = function(domainName, body) {\n    return this.submitDomainVerificationWithHttpInfo(domainName, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n};\n\n\n//# sourceURL=webpack://invisibles23/./node_modules/@mailchimp/mailchimp_marketing/src/api/VerifiedDomainsApi.js?");

/***/ }),

/***/ "./node_modules/@mailchimp/mailchimp_marketing/src/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@mailchimp/mailchimp_marketing/src/index.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var ApiClient = __webpack_require__(/*! ./ApiClient */ \"./node_modules/@mailchimp/mailchimp_marketing/src/ApiClient.js\");\n\nmodule.exports = ApiClient.instance;\n\n\n//# sourceURL=webpack://invisibles23/./node_modules/@mailchimp/mailchimp_marketing/src/index.js?");

/***/ }),

/***/ "./node_modules/assert/build/assert.js":
/*!*********************************************!*\
  !*** ./node_modules/assert/build/assert.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/* provided dependency */ var process = __webpack_require__(/*! ./node_modules/process/browser.js */ \"./node_modules/process/browser.js\");\n/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/console-browserify/index.js */ \"./node_modules/console-browserify/index.js\");\n// Currently in sync with Node.js lib/assert.js\n// https://github.com/nodejs/node/commit/2a51ae424a513ec9a6aa3466baa0cc1d55dd4f3b\n// Originally from narwhal.js (http://narwhaljs.org)\n// Copyright (c) 2009 Thomas Robinson <280north.com>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the 'Software'), to\n// deal in the Software without restriction, including without limitation the\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n// sell copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar _require = __webpack_require__(/*! ./internal/errors */ \"./node_modules/assert/build/internal/errors.js\"),\n    _require$codes = _require.codes,\n    ERR_AMBIGUOUS_ARGUMENT = _require$codes.ERR_AMBIGUOUS_ARGUMENT,\n    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,\n    ERR_INVALID_ARG_VALUE = _require$codes.ERR_INVALID_ARG_VALUE,\n    ERR_INVALID_RETURN_VALUE = _require$codes.ERR_INVALID_RETURN_VALUE,\n    ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS;\n\nvar AssertionError = __webpack_require__(/*! ./internal/assert/assertion_error */ \"./node_modules/assert/build/internal/assert/assertion_error.js\");\n\nvar _require2 = __webpack_require__(/*! util/ */ \"./node_modules/util/util.js\"),\n    inspect = _require2.inspect;\n\nvar _require$types = (__webpack_require__(/*! util/ */ \"./node_modules/util/util.js\").types),\n    isPromise = _require$types.isPromise,\n    isRegExp = _require$types.isRegExp;\n\nvar objectAssign = Object.assign ? Object.assign : (__webpack_require__(/*! es6-object-assign */ \"./node_modules/es6-object-assign/index.js\").assign);\nvar objectIs = Object.is ? Object.is : __webpack_require__(/*! object-is */ \"./node_modules/object-is/index.js\");\nvar errorCache = new Map();\nvar isDeepEqual;\nvar isDeepStrictEqual;\nvar parseExpressionAt;\nvar findNodeAround;\nvar decoder;\n\nfunction lazyLoadComparison() {\n  var comparison = __webpack_require__(/*! ./internal/util/comparisons */ \"./node_modules/assert/build/internal/util/comparisons.js\");\n\n  isDeepEqual = comparison.isDeepEqual;\n  isDeepStrictEqual = comparison.isDeepStrictEqual;\n} // Escape control characters but not \\n and \\t to keep the line breaks and\n// indentation intact.\n// eslint-disable-next-line no-control-regex\n\n\nvar escapeSequencesRegExp = /[\\x00-\\x08\\x0b\\x0c\\x0e-\\x1f]/g;\nvar meta = [\"\\\\u0000\", \"\\\\u0001\", \"\\\\u0002\", \"\\\\u0003\", \"\\\\u0004\", \"\\\\u0005\", \"\\\\u0006\", \"\\\\u0007\", '\\\\b', '', '', \"\\\\u000b\", '\\\\f', '', \"\\\\u000e\", \"\\\\u000f\", \"\\\\u0010\", \"\\\\u0011\", \"\\\\u0012\", \"\\\\u0013\", \"\\\\u0014\", \"\\\\u0015\", \"\\\\u0016\", \"\\\\u0017\", \"\\\\u0018\", \"\\\\u0019\", \"\\\\u001a\", \"\\\\u001b\", \"\\\\u001c\", \"\\\\u001d\", \"\\\\u001e\", \"\\\\u001f\"];\n\nvar escapeFn = function escapeFn(str) {\n  return meta[str.charCodeAt(0)];\n};\n\nvar warned = false; // The assert module provides functions that throw\n// AssertionError's when particular conditions are not met. The\n// assert module must conform to the following interface.\n\nvar assert = module.exports = ok;\nvar NO_EXCEPTION_SENTINEL = {}; // All of the following functions must throw an AssertionError\n// when a corresponding condition is not met, with a message that\n// may be undefined if not provided. All assertion methods provide\n// both the actual and expected values to the assertion error for\n// display purposes.\n\nfunction innerFail(obj) {\n  if (obj.message instanceof Error) throw obj.message;\n  throw new AssertionError(obj);\n}\n\nfunction fail(actual, expected, message, operator, stackStartFn) {\n  var argsLen = arguments.length;\n  var internalMessage;\n\n  if (argsLen === 0) {\n    internalMessage = 'Failed';\n  } else if (argsLen === 1) {\n    message = actual;\n    actual = undefined;\n  } else {\n    if (warned === false) {\n      warned = true;\n      var warn = process.emitWarning ? process.emitWarning : console.warn.bind(console);\n      warn('assert.fail() with more than one argument is deprecated. ' + 'Please use assert.strictEqual() instead or only pass a message.', 'DeprecationWarning', 'DEP0094');\n    }\n\n    if (argsLen === 2) operator = '!=';\n  }\n\n  if (message instanceof Error) throw message;\n  var errArgs = {\n    actual: actual,\n    expected: expected,\n    operator: operator === undefined ? 'fail' : operator,\n    stackStartFn: stackStartFn || fail\n  };\n\n  if (message !== undefined) {\n    errArgs.message = message;\n  }\n\n  var err = new AssertionError(errArgs);\n\n  if (internalMessage) {\n    err.message = internalMessage;\n    err.generatedMessage = true;\n  }\n\n  throw err;\n}\n\nassert.fail = fail; // The AssertionError is defined in internal/error.\n\nassert.AssertionError = AssertionError;\n\nfunction innerOk(fn, argLen, value, message) {\n  if (!value) {\n    var generatedMessage = false;\n\n    if (argLen === 0) {\n      generatedMessage = true;\n      message = 'No value argument passed to `assert.ok()`';\n    } else if (message instanceof Error) {\n      throw message;\n    }\n\n    var err = new AssertionError({\n      actual: value,\n      expected: true,\n      message: message,\n      operator: '==',\n      stackStartFn: fn\n    });\n    err.generatedMessage = generatedMessage;\n    throw err;\n  }\n} // Pure assertion tests whether a value is truthy, as determined\n// by !!value.\n\n\nfunction ok() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  innerOk.apply(void 0, [ok, args.length].concat(args));\n}\n\nassert.ok = ok; // The equality assertion tests shallow, coercive equality with ==.\n\n/* eslint-disable no-restricted-properties */\n\nassert.equal = function equal(actual, expected, message) {\n  if (arguments.length < 2) {\n    throw new ERR_MISSING_ARGS('actual', 'expected');\n  } // eslint-disable-next-line eqeqeq\n\n\n  if (actual != expected) {\n    innerFail({\n      actual: actual,\n      expected: expected,\n      message: message,\n      operator: '==',\n      stackStartFn: equal\n    });\n  }\n}; // The non-equality assertion tests for whether two objects are not\n// equal with !=.\n\n\nassert.notEqual = function notEqual(actual, expected, message) {\n  if (arguments.length < 2) {\n    throw new ERR_MISSING_ARGS('actual', 'expected');\n  } // eslint-disable-next-line eqeqeq\n\n\n  if (actual == expected) {\n    innerFail({\n      actual: actual,\n      expected: expected,\n      message: message,\n      operator: '!=',\n      stackStartFn: notEqual\n    });\n  }\n}; // The equivalence assertion tests a deep equality relation.\n\n\nassert.deepEqual = function deepEqual(actual, expected, message) {\n  if (arguments.length < 2) {\n    throw new ERR_MISSING_ARGS('actual', 'expected');\n  }\n\n  if (isDeepEqual === undefined) lazyLoadComparison();\n\n  if (!isDeepEqual(actual, expected)) {\n    innerFail({\n      actual: actual,\n      expected: expected,\n      message: message,\n      operator: 'deepEqual',\n      stackStartFn: deepEqual\n    });\n  }\n}; // The non-equivalence assertion tests for any deep inequality.\n\n\nassert.notDeepEqual = function notDeepEqual(actual, expected, message) {\n  if (arguments.length < 2) {\n    throw new ERR_MISSING_ARGS('actual', 'expected');\n  }\n\n  if (isDeepEqual === undefined) lazyLoadComparison();\n\n  if (isDeepEqual(actual, expected)) {\n    innerFail({\n      actual: actual,\n      expected: expected,\n      message: message,\n      operator: 'notDeepEqual',\n      stackStartFn: notDeepEqual\n    });\n  }\n};\n/* eslint-enable */\n\n\nassert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {\n  if (arguments.length < 2) {\n    throw new ERR_MISSING_ARGS('actual', 'expected');\n  }\n\n  if (isDeepEqual === undefined) lazyLoadComparison();\n\n  if (!isDeepStrictEqual(actual, expected)) {\n    innerFail({\n      actual: actual,\n      expected: expected,\n      message: message,\n      operator: 'deepStrictEqual',\n      stackStartFn: deepStrictEqual\n    });\n  }\n};\n\nassert.notDeepStrictEqual = notDeepStrictEqual;\n\nfunction notDeepStrictEqual(actual, expected, message) {\n  if (arguments.length < 2) {\n    throw new ERR_MISSING_ARGS('actual', 'expected');\n  }\n\n  if (isDeepEqual === undefined) lazyLoadComparison();\n\n  if (isDeepStrictEqual(actual, expected)) {\n    innerFail({\n      actual: actual,\n      expected: expected,\n      message: message,\n      operator: 'notDeepStrictEqual',\n      stackStartFn: notDeepStrictEqual\n    });\n  }\n}\n\nassert.strictEqual = function strictEqual(actual, expected, message) {\n  if (arguments.length < 2) {\n    throw new ERR_MISSING_ARGS('actual', 'expected');\n  }\n\n  if (!objectIs(actual, expected)) {\n    innerFail({\n      actual: actual,\n      expected: expected,\n      message: message,\n      operator: 'strictEqual',\n      stackStartFn: strictEqual\n    });\n  }\n};\n\nassert.notStrictEqual = function notStrictEqual(actual, expected, message) {\n  if (arguments.length < 2) {\n    throw new ERR_MISSING_ARGS('actual', 'expected');\n  }\n\n  if (objectIs(actual, expected)) {\n    innerFail({\n      actual: actual,\n      expected: expected,\n      message: message,\n      operator: 'notStrictEqual',\n      stackStartFn: notStrictEqual\n    });\n  }\n};\n\nvar Comparison = function Comparison(obj, keys, actual) {\n  var _this = this;\n\n  _classCallCheck(this, Comparison);\n\n  keys.forEach(function (key) {\n    if (key in obj) {\n      if (actual !== undefined && typeof actual[key] === 'string' && isRegExp(obj[key]) && obj[key].test(actual[key])) {\n        _this[key] = actual[key];\n      } else {\n        _this[key] = obj[key];\n      }\n    }\n  });\n};\n\nfunction compareExceptionKey(actual, expected, key, message, keys, fn) {\n  if (!(key in actual) || !isDeepStrictEqual(actual[key], expected[key])) {\n    if (!message) {\n      // Create placeholder objects to create a nice output.\n      var a = new Comparison(actual, keys);\n      var b = new Comparison(expected, keys, actual);\n      var err = new AssertionError({\n        actual: a,\n        expected: b,\n        operator: 'deepStrictEqual',\n        stackStartFn: fn\n      });\n      err.actual = actual;\n      err.expected = expected;\n      err.operator = fn.name;\n      throw err;\n    }\n\n    innerFail({\n      actual: actual,\n      expected: expected,\n      message: message,\n      operator: fn.name,\n      stackStartFn: fn\n    });\n  }\n}\n\nfunction expectedException(actual, expected, msg, fn) {\n  if (typeof expected !== 'function') {\n    if (isRegExp(expected)) return expected.test(actual); // assert.doesNotThrow does not accept objects.\n\n    if (arguments.length === 2) {\n      throw new ERR_INVALID_ARG_TYPE('expected', ['Function', 'RegExp'], expected);\n    } // Handle primitives properly.\n\n\n    if (_typeof(actual) !== 'object' || actual === null) {\n      var err = new AssertionError({\n        actual: actual,\n        expected: expected,\n        message: msg,\n        operator: 'deepStrictEqual',\n        stackStartFn: fn\n      });\n      err.operator = fn.name;\n      throw err;\n    }\n\n    var keys = Object.keys(expected); // Special handle errors to make sure the name and the message are compared\n    // as well.\n\n    if (expected instanceof Error) {\n      keys.push('name', 'message');\n    } else if (keys.length === 0) {\n      throw new ERR_INVALID_ARG_VALUE('error', expected, 'may not be an empty object');\n    }\n\n    if (isDeepEqual === undefined) lazyLoadComparison();\n    keys.forEach(function (key) {\n      if (typeof actual[key] === 'string' && isRegExp(expected[key]) && expected[key].test(actual[key])) {\n        return;\n      }\n\n      compareExceptionKey(actual, expected, key, msg, keys, fn);\n    });\n    return true;\n  } // Guard instanceof against arrow functions as they don't have a prototype.\n\n\n  if (expected.prototype !== undefined && actual instanceof expected) {\n    return true;\n  }\n\n  if (Error.isPrototypeOf(expected)) {\n    return false;\n  }\n\n  return expected.call({}, actual) === true;\n}\n\nfunction getActual(fn) {\n  if (typeof fn !== 'function') {\n    throw new ERR_INVALID_ARG_TYPE('fn', 'Function', fn);\n  }\n\n  try {\n    fn();\n  } catch (e) {\n    return e;\n  }\n\n  return NO_EXCEPTION_SENTINEL;\n}\n\nfunction checkIsPromise(obj) {\n  // Accept native ES6 promises and promises that are implemented in a similar\n  // way. Do not accept thenables that use a function as `obj` and that have no\n  // `catch` handler.\n  // TODO: thenables are checked up until they have the correct methods,\n  // but according to documentation, the `then` method should receive\n  // the `fulfill` and `reject` arguments as well or it may be never resolved.\n  return isPromise(obj) || obj !== null && _typeof(obj) === 'object' && typeof obj.then === 'function' && typeof obj.catch === 'function';\n}\n\nfunction waitForActual(promiseFn) {\n  return Promise.resolve().then(function () {\n    var resultPromise;\n\n    if (typeof promiseFn === 'function') {\n      // Return a rejected promise if `promiseFn` throws synchronously.\n      resultPromise = promiseFn(); // Fail in case no promise is returned.\n\n      if (!checkIsPromise(resultPromise)) {\n        throw new ERR_INVALID_RETURN_VALUE('instance of Promise', 'promiseFn', resultPromise);\n      }\n    } else if (checkIsPromise(promiseFn)) {\n      resultPromise = promiseFn;\n    } else {\n      throw new ERR_INVALID_ARG_TYPE('promiseFn', ['Function', 'Promise'], promiseFn);\n    }\n\n    return Promise.resolve().then(function () {\n      return resultPromise;\n    }).then(function () {\n      return NO_EXCEPTION_SENTINEL;\n    }).catch(function (e) {\n      return e;\n    });\n  });\n}\n\nfunction expectsError(stackStartFn, actual, error, message) {\n  if (typeof error === 'string') {\n    if (arguments.length === 4) {\n      throw new ERR_INVALID_ARG_TYPE('error', ['Object', 'Error', 'Function', 'RegExp'], error);\n    }\n\n    if (_typeof(actual) === 'object' && actual !== null) {\n      if (actual.message === error) {\n        throw new ERR_AMBIGUOUS_ARGUMENT('error/message', \"The error message \\\"\".concat(actual.message, \"\\\" is identical to the message.\"));\n      }\n    } else if (actual === error) {\n      throw new ERR_AMBIGUOUS_ARGUMENT('error/message', \"The error \\\"\".concat(actual, \"\\\" is identical to the message.\"));\n    }\n\n    message = error;\n    error = undefined;\n  } else if (error != null && _typeof(error) !== 'object' && typeof error !== 'function') {\n    throw new ERR_INVALID_ARG_TYPE('error', ['Object', 'Error', 'Function', 'RegExp'], error);\n  }\n\n  if (actual === NO_EXCEPTION_SENTINEL) {\n    var details = '';\n\n    if (error && error.name) {\n      details += \" (\".concat(error.name, \")\");\n    }\n\n    details += message ? \": \".concat(message) : '.';\n    var fnType = stackStartFn.name === 'rejects' ? 'rejection' : 'exception';\n    innerFail({\n      actual: undefined,\n      expected: error,\n      operator: stackStartFn.name,\n      message: \"Missing expected \".concat(fnType).concat(details),\n      stackStartFn: stackStartFn\n    });\n  }\n\n  if (error && !expectedException(actual, error, message, stackStartFn)) {\n    throw actual;\n  }\n}\n\nfunction expectsNoError(stackStartFn, actual, error, message) {\n  if (actual === NO_EXCEPTION_SENTINEL) return;\n\n  if (typeof error === 'string') {\n    message = error;\n    error = undefined;\n  }\n\n  if (!error || expectedException(actual, error)) {\n    var details = message ? \": \".concat(message) : '.';\n    var fnType = stackStartFn.name === 'doesNotReject' ? 'rejection' : 'exception';\n    innerFail({\n      actual: actual,\n      expected: error,\n      operator: stackStartFn.name,\n      message: \"Got unwanted \".concat(fnType).concat(details, \"\\n\") + \"Actual message: \\\"\".concat(actual && actual.message, \"\\\"\"),\n      stackStartFn: stackStartFn\n    });\n  }\n\n  throw actual;\n}\n\nassert.throws = function throws(promiseFn) {\n  for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n    args[_key2 - 1] = arguments[_key2];\n  }\n\n  expectsError.apply(void 0, [throws, getActual(promiseFn)].concat(args));\n};\n\nassert.rejects = function rejects(promiseFn) {\n  for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n    args[_key3 - 1] = arguments[_key3];\n  }\n\n  return waitForActual(promiseFn).then(function (result) {\n    return expectsError.apply(void 0, [rejects, result].concat(args));\n  });\n};\n\nassert.doesNotThrow = function doesNotThrow(fn) {\n  for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n    args[_key4 - 1] = arguments[_key4];\n  }\n\n  expectsNoError.apply(void 0, [doesNotThrow, getActual(fn)].concat(args));\n};\n\nassert.doesNotReject = function doesNotReject(fn) {\n  for (var _len5 = arguments.length, args = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n    args[_key5 - 1] = arguments[_key5];\n  }\n\n  return waitForActual(fn).then(function (result) {\n    return expectsNoError.apply(void 0, [doesNotReject, result].concat(args));\n  });\n};\n\nassert.ifError = function ifError(err) {\n  if (err !== null && err !== undefined) {\n    var message = 'ifError got unwanted exception: ';\n\n    if (_typeof(err) === 'object' && typeof err.message === 'string') {\n      if (err.message.length === 0 && err.constructor) {\n        message += err.constructor.name;\n      } else {\n        message += err.message;\n      }\n    } else {\n      message += inspect(err);\n    }\n\n    var newErr = new AssertionError({\n      actual: err,\n      expected: null,\n      operator: 'ifError',\n      message: message,\n      stackStartFn: ifError\n    }); // Make sure we actually have a stack trace!\n\n    var origStack = err.stack;\n\n    if (typeof origStack === 'string') {\n      // This will remove any duplicated frames from the error frames taken\n      // from within `ifError` and add the original error frames to the newly\n      // created ones.\n      var tmp2 = origStack.split('\\n');\n      tmp2.shift(); // Filter all frames existing in err.stack.\n\n      var tmp1 = newErr.stack.split('\\n');\n\n      for (var i = 0; i < tmp2.length; i++) {\n        // Find the first occurrence of the frame.\n        var pos = tmp1.indexOf(tmp2[i]);\n\n        if (pos !== -1) {\n          // Only keep new frames.\n          tmp1 = tmp1.slice(0, pos);\n          break;\n        }\n      }\n\n      newErr.stack = \"\".concat(tmp1.join('\\n'), \"\\n\").concat(tmp2.join('\\n'));\n    }\n\n    throw newErr;\n  }\n}; // Expose a strict only variant of assert\n\n\nfunction strict() {\n  for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n    args[_key6] = arguments[_key6];\n  }\n\n  innerOk.apply(void 0, [strict, args.length].concat(args));\n}\n\nassert.strict = objectAssign(strict, assert, {\n  equal: assert.strictEqual,\n  deepEqual: assert.deepStrictEqual,\n  notEqual: assert.notStrictEqual,\n  notDeepEqual: assert.notDeepStrictEqual\n});\nassert.strict.strict = assert.strict;\n\n//# sourceURL=webpack://invisibles23/./node_modules/assert/build/assert.js?");

/***/ }),

/***/ "./node_modules/assert/build/internal/assert/assertion_error.js":
/*!**********************************************************************!*\
  !*** ./node_modules/assert/build/internal/assert/assertion_error.js ***!
  \**********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/* provided dependency */ var process = __webpack_require__(/*! ./node_modules/process/browser.js */ \"./node_modules/process/browser.js\");\n// Currently in sync with Node.js lib/internal/assert/assertion_error.js\n// https://github.com/nodejs/node/commit/0817840f775032169ddd70c85ac059f18ffcc81c\n\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _wrapNativeSuper(Class) { var _cache = typeof Map === \"function\" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== \"function\") { throw new TypeError(\"Super expression must either be null or a function\"); } if (typeof _cache !== \"undefined\") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }\n\nfunction isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _construct(Parent, args, Class) { if (isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }\n\nfunction _isNativeFunction(fn) { return Function.toString.call(fn).indexOf(\"[native code]\") !== -1; }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar _require = __webpack_require__(/*! util/ */ \"./node_modules/util/util.js\"),\n    inspect = _require.inspect;\n\nvar _require2 = __webpack_require__(/*! ../errors */ \"./node_modules/assert/build/internal/errors.js\"),\n    ERR_INVALID_ARG_TYPE = _require2.codes.ERR_INVALID_ARG_TYPE; // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith\n\n\nfunction endsWith(str, search, this_len) {\n  if (this_len === undefined || this_len > str.length) {\n    this_len = str.length;\n  }\n\n  return str.substring(this_len - search.length, this_len) === search;\n} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat\n\n\nfunction repeat(str, count) {\n  count = Math.floor(count);\n  if (str.length == 0 || count == 0) return '';\n  var maxCount = str.length * count;\n  count = Math.floor(Math.log(count) / Math.log(2));\n\n  while (count) {\n    str += str;\n    count--;\n  }\n\n  str += str.substring(0, maxCount - str.length);\n  return str;\n}\n\nvar blue = '';\nvar green = '';\nvar red = '';\nvar white = '';\nvar kReadableOperator = {\n  deepStrictEqual: 'Expected values to be strictly deep-equal:',\n  strictEqual: 'Expected values to be strictly equal:',\n  strictEqualObject: 'Expected \"actual\" to be reference-equal to \"expected\":',\n  deepEqual: 'Expected values to be loosely deep-equal:',\n  equal: 'Expected values to be loosely equal:',\n  notDeepStrictEqual: 'Expected \"actual\" not to be strictly deep-equal to:',\n  notStrictEqual: 'Expected \"actual\" to be strictly unequal to:',\n  notStrictEqualObject: 'Expected \"actual\" not to be reference-equal to \"expected\":',\n  notDeepEqual: 'Expected \"actual\" not to be loosely deep-equal to:',\n  notEqual: 'Expected \"actual\" to be loosely unequal to:',\n  notIdentical: 'Values identical but not reference-equal:'\n}; // Comparing short primitives should just show === / !== instead of using the\n// diff.\n\nvar kMaxShortLength = 10;\n\nfunction copyError(source) {\n  var keys = Object.keys(source);\n  var target = Object.create(Object.getPrototypeOf(source));\n  keys.forEach(function (key) {\n    target[key] = source[key];\n  });\n  Object.defineProperty(target, 'message', {\n    value: source.message\n  });\n  return target;\n}\n\nfunction inspectValue(val) {\n  // The util.inspect default values could be changed. This makes sure the\n  // error messages contain the necessary information nevertheless.\n  return inspect(val, {\n    compact: false,\n    customInspect: false,\n    depth: 1000,\n    maxArrayLength: Infinity,\n    // Assert compares only enumerable properties (with a few exceptions).\n    showHidden: false,\n    // Having a long line as error is better than wrapping the line for\n    // comparison for now.\n    // TODO(BridgeAR): `breakLength` should be limited as soon as soon as we\n    // have meta information about the inspected properties (i.e., know where\n    // in what line the property starts and ends).\n    breakLength: Infinity,\n    // Assert does not detect proxies currently.\n    showProxy: false,\n    sorted: true,\n    // Inspect getters as we also check them when comparing entries.\n    getters: true\n  });\n}\n\nfunction createErrDiff(actual, expected, operator) {\n  var other = '';\n  var res = '';\n  var lastPos = 0;\n  var end = '';\n  var skipped = false;\n  var actualInspected = inspectValue(actual);\n  var actualLines = actualInspected.split('\\n');\n  var expectedLines = inspectValue(expected).split('\\n');\n  var i = 0;\n  var indicator = ''; // In case both values are objects explicitly mark them as not reference equal\n  // for the `strictEqual` operator.\n\n  if (operator === 'strictEqual' && _typeof(actual) === 'object' && _typeof(expected) === 'object' && actual !== null && expected !== null) {\n    operator = 'strictEqualObject';\n  } // If \"actual\" and \"expected\" fit on a single line and they are not strictly\n  // equal, check further special handling.\n\n\n  if (actualLines.length === 1 && expectedLines.length === 1 && actualLines[0] !== expectedLines[0]) {\n    var inputLength = actualLines[0].length + expectedLines[0].length; // If the character length of \"actual\" and \"expected\" together is less than\n    // kMaxShortLength and if neither is an object and at least one of them is\n    // not `zero`, use the strict equal comparison to visualize the output.\n\n    if (inputLength <= kMaxShortLength) {\n      if ((_typeof(actual) !== 'object' || actual === null) && (_typeof(expected) !== 'object' || expected === null) && (actual !== 0 || expected !== 0)) {\n        // -0 === +0\n        return \"\".concat(kReadableOperator[operator], \"\\n\\n\") + \"\".concat(actualLines[0], \" !== \").concat(expectedLines[0], \"\\n\");\n      }\n    } else if (operator !== 'strictEqualObject') {\n      // If the stderr is a tty and the input length is lower than the current\n      // columns per line, add a mismatch indicator below the output. If it is\n      // not a tty, use a default value of 80 characters.\n      var maxLength = process.stderr && process.stderr.isTTY ? process.stderr.columns : 80;\n\n      if (inputLength < maxLength) {\n        while (actualLines[0][i] === expectedLines[0][i]) {\n          i++;\n        } // Ignore the first characters.\n\n\n        if (i > 2) {\n          // Add position indicator for the first mismatch in case it is a\n          // single line and the input length is less than the column length.\n          indicator = \"\\n  \".concat(repeat(' ', i), \"^\");\n          i = 0;\n        }\n      }\n    }\n  } // Remove all ending lines that match (this optimizes the output for\n  // readability by reducing the number of total changed lines).\n\n\n  var a = actualLines[actualLines.length - 1];\n  var b = expectedLines[expectedLines.length - 1];\n\n  while (a === b) {\n    if (i++ < 2) {\n      end = \"\\n  \".concat(a).concat(end);\n    } else {\n      other = a;\n    }\n\n    actualLines.pop();\n    expectedLines.pop();\n    if (actualLines.length === 0 || expectedLines.length === 0) break;\n    a = actualLines[actualLines.length - 1];\n    b = expectedLines[expectedLines.length - 1];\n  }\n\n  var maxLines = Math.max(actualLines.length, expectedLines.length); // Strict equal with identical objects that are not identical by reference.\n  // E.g., assert.deepStrictEqual({ a: Symbol() }, { a: Symbol() })\n\n  if (maxLines === 0) {\n    // We have to get the result again. The lines were all removed before.\n    var _actualLines = actualInspected.split('\\n'); // Only remove lines in case it makes sense to collapse those.\n    // TODO: Accept env to always show the full error.\n\n\n    if (_actualLines.length > 30) {\n      _actualLines[26] = \"\".concat(blue, \"...\").concat(white);\n\n      while (_actualLines.length > 27) {\n        _actualLines.pop();\n      }\n    }\n\n    return \"\".concat(kReadableOperator.notIdentical, \"\\n\\n\").concat(_actualLines.join('\\n'), \"\\n\");\n  }\n\n  if (i > 3) {\n    end = \"\\n\".concat(blue, \"...\").concat(white).concat(end);\n    skipped = true;\n  }\n\n  if (other !== '') {\n    end = \"\\n  \".concat(other).concat(end);\n    other = '';\n  }\n\n  var printedLines = 0;\n  var msg = kReadableOperator[operator] + \"\\n\".concat(green, \"+ actual\").concat(white, \" \").concat(red, \"- expected\").concat(white);\n  var skippedMsg = \" \".concat(blue, \"...\").concat(white, \" Lines skipped\");\n\n  for (i = 0; i < maxLines; i++) {\n    // Only extra expected lines exist\n    var cur = i - lastPos;\n\n    if (actualLines.length < i + 1) {\n      // If the last diverging line is more than one line above and the\n      // current line is at least line three, add some of the former lines and\n      // also add dots to indicate skipped entries.\n      if (cur > 1 && i > 2) {\n        if (cur > 4) {\n          res += \"\\n\".concat(blue, \"...\").concat(white);\n          skipped = true;\n        } else if (cur > 3) {\n          res += \"\\n  \".concat(expectedLines[i - 2]);\n          printedLines++;\n        }\n\n        res += \"\\n  \".concat(expectedLines[i - 1]);\n        printedLines++;\n      } // Mark the current line as the last diverging one.\n\n\n      lastPos = i; // Add the expected line to the cache.\n\n      other += \"\\n\".concat(red, \"-\").concat(white, \" \").concat(expectedLines[i]);\n      printedLines++; // Only extra actual lines exist\n    } else if (expectedLines.length < i + 1) {\n      // If the last diverging line is more than one line above and the\n      // current line is at least line three, add some of the former lines and\n      // also add dots to indicate skipped entries.\n      if (cur > 1 && i > 2) {\n        if (cur > 4) {\n          res += \"\\n\".concat(blue, \"...\").concat(white);\n          skipped = true;\n        } else if (cur > 3) {\n          res += \"\\n  \".concat(actualLines[i - 2]);\n          printedLines++;\n        }\n\n        res += \"\\n  \".concat(actualLines[i - 1]);\n        printedLines++;\n      } // Mark the current line as the last diverging one.\n\n\n      lastPos = i; // Add the actual line to the result.\n\n      res += \"\\n\".concat(green, \"+\").concat(white, \" \").concat(actualLines[i]);\n      printedLines++; // Lines diverge\n    } else {\n      var expectedLine = expectedLines[i];\n      var actualLine = actualLines[i]; // If the lines diverge, specifically check for lines that only diverge by\n      // a trailing comma. In that case it is actually identical and we should\n      // mark it as such.\n\n      var divergingLines = actualLine !== expectedLine && (!endsWith(actualLine, ',') || actualLine.slice(0, -1) !== expectedLine); // If the expected line has a trailing comma but is otherwise identical,\n      // add a comma at the end of the actual line. Otherwise the output could\n      // look weird as in:\n      //\n      //   [\n      //     1         // No comma at the end!\n      // +   2\n      //   ]\n      //\n\n      if (divergingLines && endsWith(expectedLine, ',') && expectedLine.slice(0, -1) === actualLine) {\n        divergingLines = false;\n        actualLine += ',';\n      }\n\n      if (divergingLines) {\n        // If the last diverging line is more than one line above and the\n        // current line is at least line three, add some of the former lines and\n        // also add dots to indicate skipped entries.\n        if (cur > 1 && i > 2) {\n          if (cur > 4) {\n            res += \"\\n\".concat(blue, \"...\").concat(white);\n            skipped = true;\n          } else if (cur > 3) {\n            res += \"\\n  \".concat(actualLines[i - 2]);\n            printedLines++;\n          }\n\n          res += \"\\n  \".concat(actualLines[i - 1]);\n          printedLines++;\n        } // Mark the current line as the last diverging one.\n\n\n        lastPos = i; // Add the actual line to the result and cache the expected diverging\n        // line so consecutive diverging lines show up as +++--- and not +-+-+-.\n\n        res += \"\\n\".concat(green, \"+\").concat(white, \" \").concat(actualLine);\n        other += \"\\n\".concat(red, \"-\").concat(white, \" \").concat(expectedLine);\n        printedLines += 2; // Lines are identical\n      } else {\n        // Add all cached information to the result before adding other things\n        // and reset the cache.\n        res += other;\n        other = ''; // If the last diverging line is exactly one line above or if it is the\n        // very first line, add the line to the result.\n\n        if (cur === 1 || i === 0) {\n          res += \"\\n  \".concat(actualLine);\n          printedLines++;\n        }\n      }\n    } // Inspected object to big (Show ~20 rows max)\n\n\n    if (printedLines > 20 && i < maxLines - 2) {\n      return \"\".concat(msg).concat(skippedMsg, \"\\n\").concat(res, \"\\n\").concat(blue, \"...\").concat(white).concat(other, \"\\n\") + \"\".concat(blue, \"...\").concat(white);\n    }\n  }\n\n  return \"\".concat(msg).concat(skipped ? skippedMsg : '', \"\\n\").concat(res).concat(other).concat(end).concat(indicator);\n}\n\nvar AssertionError =\n/*#__PURE__*/\nfunction (_Error) {\n  _inherits(AssertionError, _Error);\n\n  function AssertionError(options) {\n    var _this;\n\n    _classCallCheck(this, AssertionError);\n\n    if (_typeof(options) !== 'object' || options === null) {\n      throw new ERR_INVALID_ARG_TYPE('options', 'Object', options);\n    }\n\n    var message = options.message,\n        operator = options.operator,\n        stackStartFn = options.stackStartFn;\n    var actual = options.actual,\n        expected = options.expected;\n    var limit = Error.stackTraceLimit;\n    Error.stackTraceLimit = 0;\n\n    if (message != null) {\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(AssertionError).call(this, String(message)));\n    } else {\n      if (process.stderr && process.stderr.isTTY) {\n        // Reset on each call to make sure we handle dynamically set environment\n        // variables correct.\n        if (process.stderr && process.stderr.getColorDepth && process.stderr.getColorDepth() !== 1) {\n          blue = \"\\x1B[34m\";\n          green = \"\\x1B[32m\";\n          white = \"\\x1B[39m\";\n          red = \"\\x1B[31m\";\n        } else {\n          blue = '';\n          green = '';\n          white = '';\n          red = '';\n        }\n      } // Prevent the error stack from being visible by duplicating the error\n      // in a very close way to the original in case both sides are actually\n      // instances of Error.\n\n\n      if (_typeof(actual) === 'object' && actual !== null && _typeof(expected) === 'object' && expected !== null && 'stack' in actual && actual instanceof Error && 'stack' in expected && expected instanceof Error) {\n        actual = copyError(actual);\n        expected = copyError(expected);\n      }\n\n      if (operator === 'deepStrictEqual' || operator === 'strictEqual') {\n        _this = _possibleConstructorReturn(this, _getPrototypeOf(AssertionError).call(this, createErrDiff(actual, expected, operator)));\n      } else if (operator === 'notDeepStrictEqual' || operator === 'notStrictEqual') {\n        // In case the objects are equal but the operator requires unequal, show\n        // the first object and say A equals B\n        var base = kReadableOperator[operator];\n        var res = inspectValue(actual).split('\\n'); // In case \"actual\" is an object, it should not be reference equal.\n\n        if (operator === 'notStrictEqual' && _typeof(actual) === 'object' && actual !== null) {\n          base = kReadableOperator.notStrictEqualObject;\n        } // Only remove lines in case it makes sense to collapse those.\n        // TODO: Accept env to always show the full error.\n\n\n        if (res.length > 30) {\n          res[26] = \"\".concat(blue, \"...\").concat(white);\n\n          while (res.length > 27) {\n            res.pop();\n          }\n        } // Only print a single input.\n\n\n        if (res.length === 1) {\n          _this = _possibleConstructorReturn(this, _getPrototypeOf(AssertionError).call(this, \"\".concat(base, \" \").concat(res[0])));\n        } else {\n          _this = _possibleConstructorReturn(this, _getPrototypeOf(AssertionError).call(this, \"\".concat(base, \"\\n\\n\").concat(res.join('\\n'), \"\\n\")));\n        }\n      } else {\n        var _res = inspectValue(actual);\n\n        var other = '';\n        var knownOperators = kReadableOperator[operator];\n\n        if (operator === 'notDeepEqual' || operator === 'notEqual') {\n          _res = \"\".concat(kReadableOperator[operator], \"\\n\\n\").concat(_res);\n\n          if (_res.length > 1024) {\n            _res = \"\".concat(_res.slice(0, 1021), \"...\");\n          }\n        } else {\n          other = \"\".concat(inspectValue(expected));\n\n          if (_res.length > 512) {\n            _res = \"\".concat(_res.slice(0, 509), \"...\");\n          }\n\n          if (other.length > 512) {\n            other = \"\".concat(other.slice(0, 509), \"...\");\n          }\n\n          if (operator === 'deepEqual' || operator === 'equal') {\n            _res = \"\".concat(knownOperators, \"\\n\\n\").concat(_res, \"\\n\\nshould equal\\n\\n\");\n          } else {\n            other = \" \".concat(operator, \" \").concat(other);\n          }\n        }\n\n        _this = _possibleConstructorReturn(this, _getPrototypeOf(AssertionError).call(this, \"\".concat(_res).concat(other)));\n      }\n    }\n\n    Error.stackTraceLimit = limit;\n    _this.generatedMessage = !message;\n    Object.defineProperty(_assertThisInitialized(_this), 'name', {\n      value: 'AssertionError [ERR_ASSERTION]',\n      enumerable: false,\n      writable: true,\n      configurable: true\n    });\n    _this.code = 'ERR_ASSERTION';\n    _this.actual = actual;\n    _this.expected = expected;\n    _this.operator = operator;\n\n    if (Error.captureStackTrace) {\n      // eslint-disable-next-line no-restricted-syntax\n      Error.captureStackTrace(_assertThisInitialized(_this), stackStartFn);\n    } // Create error message including the error code in the name.\n\n\n    _this.stack; // Reset the name.\n\n    _this.name = 'AssertionError';\n    return _possibleConstructorReturn(_this);\n  }\n\n  _createClass(AssertionError, [{\n    key: \"toString\",\n    value: function toString() {\n      return \"\".concat(this.name, \" [\").concat(this.code, \"]: \").concat(this.message);\n    }\n  }, {\n    key: inspect.custom,\n    value: function value(recurseTimes, ctx) {\n      // This limits the `actual` and `expected` property default inspection to\n      // the minimum depth. Otherwise those values would be too verbose compared\n      // to the actual error message which contains a combined view of these two\n      // input values.\n      return inspect(this, _objectSpread({}, ctx, {\n        customInspect: false,\n        depth: 0\n      }));\n    }\n  }]);\n\n  return AssertionError;\n}(_wrapNativeSuper(Error));\n\nmodule.exports = AssertionError;\n\n//# sourceURL=webpack://invisibles23/./node_modules/assert/build/internal/assert/assertion_error.js?");

/***/ }),

/***/ "./node_modules/assert/build/internal/errors.js":
/*!******************************************************!*\
  !*** ./node_modules/assert/build/internal/errors.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// Currently in sync with Node.js lib/internal/errors.js\n// https://github.com/nodejs/node/commit/3b044962c48fe313905877a96b5d0894a5404f6f\n\n/* eslint node-core/documented-errors: \"error\" */\n\n/* eslint node-core/alphabetize-errors: \"error\" */\n\n/* eslint node-core/prefer-util-format-errors: \"error\" */\n // The whole point behind this internal module is to allow Node.js to no\n// longer be forced to treat every error message change as a semver-major\n// change. The NodeError classes here all expose a `code` property whose\n// value statically and permanently identifies the error. While the error\n// message may change, the code should not.\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar codes = {}; // Lazy loaded\n\nvar assert;\nvar util;\n\nfunction createErrorType(code, message, Base) {\n  if (!Base) {\n    Base = Error;\n  }\n\n  function getMessage(arg1, arg2, arg3) {\n    if (typeof message === 'string') {\n      return message;\n    } else {\n      return message(arg1, arg2, arg3);\n    }\n  }\n\n  var NodeError =\n  /*#__PURE__*/\n  function (_Base) {\n    _inherits(NodeError, _Base);\n\n    function NodeError(arg1, arg2, arg3) {\n      var _this;\n\n      _classCallCheck(this, NodeError);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(NodeError).call(this, getMessage(arg1, arg2, arg3)));\n      _this.code = code;\n      return _this;\n    }\n\n    return NodeError;\n  }(Base);\n\n  codes[code] = NodeError;\n} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js\n\n\nfunction oneOf(expected, thing) {\n  if (Array.isArray(expected)) {\n    var len = expected.length;\n    expected = expected.map(function (i) {\n      return String(i);\n    });\n\n    if (len > 2) {\n      return \"one of \".concat(thing, \" \").concat(expected.slice(0, len - 1).join(', '), \", or \") + expected[len - 1];\n    } else if (len === 2) {\n      return \"one of \".concat(thing, \" \").concat(expected[0], \" or \").concat(expected[1]);\n    } else {\n      return \"of \".concat(thing, \" \").concat(expected[0]);\n    }\n  } else {\n    return \"of \".concat(thing, \" \").concat(String(expected));\n  }\n} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith\n\n\nfunction startsWith(str, search, pos) {\n  return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;\n} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith\n\n\nfunction endsWith(str, search, this_len) {\n  if (this_len === undefined || this_len > str.length) {\n    this_len = str.length;\n  }\n\n  return str.substring(this_len - search.length, this_len) === search;\n} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes\n\n\nfunction includes(str, search, start) {\n  if (typeof start !== 'number') {\n    start = 0;\n  }\n\n  if (start + search.length > str.length) {\n    return false;\n  } else {\n    return str.indexOf(search, start) !== -1;\n  }\n}\n\ncreateErrorType('ERR_AMBIGUOUS_ARGUMENT', 'The \"%s\" argument is ambiguous. %s', TypeError);\ncreateErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {\n  if (assert === undefined) assert = __webpack_require__(/*! ../assert */ \"./node_modules/assert/build/assert.js\");\n  assert(typeof name === 'string', \"'name' must be a string\"); // determiner: 'must be' or 'must not be'\n\n  var determiner;\n\n  if (typeof expected === 'string' && startsWith(expected, 'not ')) {\n    determiner = 'must not be';\n    expected = expected.replace(/^not /, '');\n  } else {\n    determiner = 'must be';\n  }\n\n  var msg;\n\n  if (endsWith(name, ' argument')) {\n    // For cases like 'first argument'\n    msg = \"The \".concat(name, \" \").concat(determiner, \" \").concat(oneOf(expected, 'type'));\n  } else {\n    var type = includes(name, '.') ? 'property' : 'argument';\n    msg = \"The \\\"\".concat(name, \"\\\" \").concat(type, \" \").concat(determiner, \" \").concat(oneOf(expected, 'type'));\n  } // TODO(BridgeAR): Improve the output by showing `null` and similar.\n\n\n  msg += \". Received type \".concat(_typeof(actual));\n  return msg;\n}, TypeError);\ncreateErrorType('ERR_INVALID_ARG_VALUE', function (name, value) {\n  var reason = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'is invalid';\n  if (util === undefined) util = __webpack_require__(/*! util/ */ \"./node_modules/util/util.js\");\n  var inspected = util.inspect(value);\n\n  if (inspected.length > 128) {\n    inspected = \"\".concat(inspected.slice(0, 128), \"...\");\n  }\n\n  return \"The argument '\".concat(name, \"' \").concat(reason, \". Received \").concat(inspected);\n}, TypeError, RangeError);\ncreateErrorType('ERR_INVALID_RETURN_VALUE', function (input, name, value) {\n  var type;\n\n  if (value && value.constructor && value.constructor.name) {\n    type = \"instance of \".concat(value.constructor.name);\n  } else {\n    type = \"type \".concat(_typeof(value));\n  }\n\n  return \"Expected \".concat(input, \" to be returned from the \\\"\").concat(name, \"\\\"\") + \" function but got \".concat(type, \".\");\n}, TypeError);\ncreateErrorType('ERR_MISSING_ARGS', function () {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  if (assert === undefined) assert = __webpack_require__(/*! ../assert */ \"./node_modules/assert/build/assert.js\");\n  assert(args.length > 0, 'At least one arg needs to be specified');\n  var msg = 'The ';\n  var len = args.length;\n  args = args.map(function (a) {\n    return \"\\\"\".concat(a, \"\\\"\");\n  });\n\n  switch (len) {\n    case 1:\n      msg += \"\".concat(args[0], \" argument\");\n      break;\n\n    case 2:\n      msg += \"\".concat(args[0], \" and \").concat(args[1], \" arguments\");\n      break;\n\n    default:\n      msg += args.slice(0, len - 1).join(', ');\n      msg += \", and \".concat(args[len - 1], \" arguments\");\n      break;\n  }\n\n  return \"\".concat(msg, \" must be specified\");\n}, TypeError);\nmodule.exports.codes = codes;\n\n//# sourceURL=webpack://invisibles23/./node_modules/assert/build/internal/errors.js?");

/***/ }),

/***/ "./node_modules/assert/build/internal/util/comparisons.js":
/*!****************************************************************!*\
  !*** ./node_modules/assert/build/internal/util/comparisons.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// Currently in sync with Node.js lib/internal/util/comparisons.js\n// https://github.com/nodejs/node/commit/112cc7c27551254aa2b17098fb774867f05ed0d9\n\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar regexFlagsSupported = /a/g.flags !== undefined;\n\nvar arrayFromSet = function arrayFromSet(set) {\n  var array = [];\n  set.forEach(function (value) {\n    return array.push(value);\n  });\n  return array;\n};\n\nvar arrayFromMap = function arrayFromMap(map) {\n  var array = [];\n  map.forEach(function (value, key) {\n    return array.push([key, value]);\n  });\n  return array;\n};\n\nvar objectIs = Object.is ? Object.is : __webpack_require__(/*! object-is */ \"./node_modules/object-is/index.js\");\nvar objectGetOwnPropertySymbols = Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols : function () {\n  return [];\n};\nvar numberIsNaN = Number.isNaN ? Number.isNaN : __webpack_require__(/*! is-nan */ \"./node_modules/is-nan/index.js\");\n\nfunction uncurryThis(f) {\n  return f.call.bind(f);\n}\n\nvar hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);\nvar propertyIsEnumerable = uncurryThis(Object.prototype.propertyIsEnumerable);\nvar objectToString = uncurryThis(Object.prototype.toString);\n\nvar _require$types = (__webpack_require__(/*! util/ */ \"./node_modules/util/util.js\").types),\n    isAnyArrayBuffer = _require$types.isAnyArrayBuffer,\n    isArrayBufferView = _require$types.isArrayBufferView,\n    isDate = _require$types.isDate,\n    isMap = _require$types.isMap,\n    isRegExp = _require$types.isRegExp,\n    isSet = _require$types.isSet,\n    isNativeError = _require$types.isNativeError,\n    isBoxedPrimitive = _require$types.isBoxedPrimitive,\n    isNumberObject = _require$types.isNumberObject,\n    isStringObject = _require$types.isStringObject,\n    isBooleanObject = _require$types.isBooleanObject,\n    isBigIntObject = _require$types.isBigIntObject,\n    isSymbolObject = _require$types.isSymbolObject,\n    isFloat32Array = _require$types.isFloat32Array,\n    isFloat64Array = _require$types.isFloat64Array;\n\nfunction isNonIndex(key) {\n  if (key.length === 0 || key.length > 10) return true;\n\n  for (var i = 0; i < key.length; i++) {\n    var code = key.charCodeAt(i);\n    if (code < 48 || code > 57) return true;\n  } // The maximum size for an array is 2 ** 32 -1.\n\n\n  return key.length === 10 && key >= Math.pow(2, 32);\n}\n\nfunction getOwnNonIndexProperties(value) {\n  return Object.keys(value).filter(isNonIndex).concat(objectGetOwnPropertySymbols(value).filter(Object.prototype.propertyIsEnumerable.bind(value)));\n} // Taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js\n// original notice:\n\n/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n\n\nfunction compare(a, b) {\n  if (a === b) {\n    return 0;\n  }\n\n  var x = a.length;\n  var y = b.length;\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i];\n      y = b[i];\n      break;\n    }\n  }\n\n  if (x < y) {\n    return -1;\n  }\n\n  if (y < x) {\n    return 1;\n  }\n\n  return 0;\n}\n\nvar ONLY_ENUMERABLE = undefined;\nvar kStrict = true;\nvar kLoose = false;\nvar kNoIterator = 0;\nvar kIsArray = 1;\nvar kIsSet = 2;\nvar kIsMap = 3; // Check if they have the same source and flags\n\nfunction areSimilarRegExps(a, b) {\n  return regexFlagsSupported ? a.source === b.source && a.flags === b.flags : RegExp.prototype.toString.call(a) === RegExp.prototype.toString.call(b);\n}\n\nfunction areSimilarFloatArrays(a, b) {\n  if (a.byteLength !== b.byteLength) {\n    return false;\n  }\n\n  for (var offset = 0; offset < a.byteLength; offset++) {\n    if (a[offset] !== b[offset]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction areSimilarTypedArrays(a, b) {\n  if (a.byteLength !== b.byteLength) {\n    return false;\n  }\n\n  return compare(new Uint8Array(a.buffer, a.byteOffset, a.byteLength), new Uint8Array(b.buffer, b.byteOffset, b.byteLength)) === 0;\n}\n\nfunction areEqualArrayBuffers(buf1, buf2) {\n  return buf1.byteLength === buf2.byteLength && compare(new Uint8Array(buf1), new Uint8Array(buf2)) === 0;\n}\n\nfunction isEqualBoxedPrimitive(val1, val2) {\n  if (isNumberObject(val1)) {\n    return isNumberObject(val2) && objectIs(Number.prototype.valueOf.call(val1), Number.prototype.valueOf.call(val2));\n  }\n\n  if (isStringObject(val1)) {\n    return isStringObject(val2) && String.prototype.valueOf.call(val1) === String.prototype.valueOf.call(val2);\n  }\n\n  if (isBooleanObject(val1)) {\n    return isBooleanObject(val2) && Boolean.prototype.valueOf.call(val1) === Boolean.prototype.valueOf.call(val2);\n  }\n\n  if (isBigIntObject(val1)) {\n    return isBigIntObject(val2) && BigInt.prototype.valueOf.call(val1) === BigInt.prototype.valueOf.call(val2);\n  }\n\n  return isSymbolObject(val2) && Symbol.prototype.valueOf.call(val1) === Symbol.prototype.valueOf.call(val2);\n} // Notes: Type tags are historical [[Class]] properties that can be set by\n// FunctionTemplate::SetClassName() in C++ or Symbol.toStringTag in JS\n// and retrieved using Object.prototype.toString.call(obj) in JS\n// See https://tc39.github.io/ecma262/#sec-object.prototype.tostring\n// for a list of tags pre-defined in the spec.\n// There are some unspecified tags in the wild too (e.g. typed array tags).\n// Since tags can be altered, they only serve fast failures\n//\n// Typed arrays and buffers are checked by comparing the content in their\n// underlying ArrayBuffer. This optimization requires that it's\n// reasonable to interpret their underlying memory in the same way,\n// which is checked by comparing their type tags.\n// (e.g. a Uint8Array and a Uint16Array with the same memory content\n// could still be different because they will be interpreted differently).\n//\n// For strict comparison, objects should have\n// a) The same built-in type tags\n// b) The same prototypes.\n\n\nfunction innerDeepEqual(val1, val2, strict, memos) {\n  // All identical values are equivalent, as determined by ===.\n  if (val1 === val2) {\n    if (val1 !== 0) return true;\n    return strict ? objectIs(val1, val2) : true;\n  } // Check more closely if val1 and val2 are equal.\n\n\n  if (strict) {\n    if (_typeof(val1) !== 'object') {\n      return typeof val1 === 'number' && numberIsNaN(val1) && numberIsNaN(val2);\n    }\n\n    if (_typeof(val2) !== 'object' || val1 === null || val2 === null) {\n      return false;\n    }\n\n    if (Object.getPrototypeOf(val1) !== Object.getPrototypeOf(val2)) {\n      return false;\n    }\n  } else {\n    if (val1 === null || _typeof(val1) !== 'object') {\n      if (val2 === null || _typeof(val2) !== 'object') {\n        // eslint-disable-next-line eqeqeq\n        return val1 == val2;\n      }\n\n      return false;\n    }\n\n    if (val2 === null || _typeof(val2) !== 'object') {\n      return false;\n    }\n  }\n\n  var val1Tag = objectToString(val1);\n  var val2Tag = objectToString(val2);\n\n  if (val1Tag !== val2Tag) {\n    return false;\n  }\n\n  if (Array.isArray(val1)) {\n    // Check for sparse arrays and general fast path\n    if (val1.length !== val2.length) {\n      return false;\n    }\n\n    var keys1 = getOwnNonIndexProperties(val1, ONLY_ENUMERABLE);\n    var keys2 = getOwnNonIndexProperties(val2, ONLY_ENUMERABLE);\n\n    if (keys1.length !== keys2.length) {\n      return false;\n    }\n\n    return keyCheck(val1, val2, strict, memos, kIsArray, keys1);\n  } // [browserify] This triggers on certain types in IE (Map/Set) so we don't\n  // wan't to early return out of the rest of the checks. However we can check\n  // if the second value is one of these values and the first isn't.\n\n\n  if (val1Tag === '[object Object]') {\n    // return keyCheck(val1, val2, strict, memos, kNoIterator);\n    if (!isMap(val1) && isMap(val2) || !isSet(val1) && isSet(val2)) {\n      return false;\n    }\n  }\n\n  if (isDate(val1)) {\n    if (!isDate(val2) || Date.prototype.getTime.call(val1) !== Date.prototype.getTime.call(val2)) {\n      return false;\n    }\n  } else if (isRegExp(val1)) {\n    if (!isRegExp(val2) || !areSimilarRegExps(val1, val2)) {\n      return false;\n    }\n  } else if (isNativeError(val1) || val1 instanceof Error) {\n    // Do not compare the stack as it might differ even though the error itself\n    // is otherwise identical.\n    if (val1.message !== val2.message || val1.name !== val2.name) {\n      return false;\n    }\n  } else if (isArrayBufferView(val1)) {\n    if (!strict && (isFloat32Array(val1) || isFloat64Array(val1))) {\n      if (!areSimilarFloatArrays(val1, val2)) {\n        return false;\n      }\n    } else if (!areSimilarTypedArrays(val1, val2)) {\n      return false;\n    } // Buffer.compare returns true, so val1.length === val2.length. If they both\n    // only contain numeric keys, we don't need to exam further than checking\n    // the symbols.\n\n\n    var _keys = getOwnNonIndexProperties(val1, ONLY_ENUMERABLE);\n\n    var _keys2 = getOwnNonIndexProperties(val2, ONLY_ENUMERABLE);\n\n    if (_keys.length !== _keys2.length) {\n      return false;\n    }\n\n    return keyCheck(val1, val2, strict, memos, kNoIterator, _keys);\n  } else if (isSet(val1)) {\n    if (!isSet(val2) || val1.size !== val2.size) {\n      return false;\n    }\n\n    return keyCheck(val1, val2, strict, memos, kIsSet);\n  } else if (isMap(val1)) {\n    if (!isMap(val2) || val1.size !== val2.size) {\n      return false;\n    }\n\n    return keyCheck(val1, val2, strict, memos, kIsMap);\n  } else if (isAnyArrayBuffer(val1)) {\n    if (!areEqualArrayBuffers(val1, val2)) {\n      return false;\n    }\n  } else if (isBoxedPrimitive(val1) && !isEqualBoxedPrimitive(val1, val2)) {\n    return false;\n  }\n\n  return keyCheck(val1, val2, strict, memos, kNoIterator);\n}\n\nfunction getEnumerables(val, keys) {\n  return keys.filter(function (k) {\n    return propertyIsEnumerable(val, k);\n  });\n}\n\nfunction keyCheck(val1, val2, strict, memos, iterationType, aKeys) {\n  // For all remaining Object pairs, including Array, objects and Maps,\n  // equivalence is determined by having:\n  // a) The same number of owned enumerable properties\n  // b) The same set of keys/indexes (although not necessarily the same order)\n  // c) Equivalent values for every corresponding key/index\n  // d) For Sets and Maps, equal contents\n  // Note: this accounts for both named and indexed properties on Arrays.\n  if (arguments.length === 5) {\n    aKeys = Object.keys(val1);\n    var bKeys = Object.keys(val2); // The pair must have the same number of owned properties.\n\n    if (aKeys.length !== bKeys.length) {\n      return false;\n    }\n  } // Cheap key test\n\n\n  var i = 0;\n\n  for (; i < aKeys.length; i++) {\n    if (!hasOwnProperty(val2, aKeys[i])) {\n      return false;\n    }\n  }\n\n  if (strict && arguments.length === 5) {\n    var symbolKeysA = objectGetOwnPropertySymbols(val1);\n\n    if (symbolKeysA.length !== 0) {\n      var count = 0;\n\n      for (i = 0; i < symbolKeysA.length; i++) {\n        var key = symbolKeysA[i];\n\n        if (propertyIsEnumerable(val1, key)) {\n          if (!propertyIsEnumerable(val2, key)) {\n            return false;\n          }\n\n          aKeys.push(key);\n          count++;\n        } else if (propertyIsEnumerable(val2, key)) {\n          return false;\n        }\n      }\n\n      var symbolKeysB = objectGetOwnPropertySymbols(val2);\n\n      if (symbolKeysA.length !== symbolKeysB.length && getEnumerables(val2, symbolKeysB).length !== count) {\n        return false;\n      }\n    } else {\n      var _symbolKeysB = objectGetOwnPropertySymbols(val2);\n\n      if (_symbolKeysB.length !== 0 && getEnumerables(val2, _symbolKeysB).length !== 0) {\n        return false;\n      }\n    }\n  }\n\n  if (aKeys.length === 0 && (iterationType === kNoIterator || iterationType === kIsArray && val1.length === 0 || val1.size === 0)) {\n    return true;\n  } // Use memos to handle cycles.\n\n\n  if (memos === undefined) {\n    memos = {\n      val1: new Map(),\n      val2: new Map(),\n      position: 0\n    };\n  } else {\n    // We prevent up to two map.has(x) calls by directly retrieving the value\n    // and checking for undefined. The map can only contain numbers, so it is\n    // safe to check for undefined only.\n    var val2MemoA = memos.val1.get(val1);\n\n    if (val2MemoA !== undefined) {\n      var val2MemoB = memos.val2.get(val2);\n\n      if (val2MemoB !== undefined) {\n        return val2MemoA === val2MemoB;\n      }\n    }\n\n    memos.position++;\n  }\n\n  memos.val1.set(val1, memos.position);\n  memos.val2.set(val2, memos.position);\n  var areEq = objEquiv(val1, val2, strict, aKeys, memos, iterationType);\n  memos.val1.delete(val1);\n  memos.val2.delete(val2);\n  return areEq;\n}\n\nfunction setHasEqualElement(set, val1, strict, memo) {\n  // Go looking.\n  var setValues = arrayFromSet(set);\n\n  for (var i = 0; i < setValues.length; i++) {\n    var val2 = setValues[i];\n\n    if (innerDeepEqual(val1, val2, strict, memo)) {\n      // Remove the matching element to make sure we do not check that again.\n      set.delete(val2);\n      return true;\n    }\n  }\n\n  return false;\n} // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#Loose_equality_using\n// Sadly it is not possible to detect corresponding values properly in case the\n// type is a string, number, bigint or boolean. The reason is that those values\n// can match lots of different string values (e.g., 1n == '+00001').\n\n\nfunction findLooseMatchingPrimitives(prim) {\n  switch (_typeof(prim)) {\n    case 'undefined':\n      return null;\n\n    case 'object':\n      // Only pass in null as object!\n      return undefined;\n\n    case 'symbol':\n      return false;\n\n    case 'string':\n      prim = +prim;\n    // Loose equal entries exist only if the string is possible to convert to\n    // a regular number and not NaN.\n    // Fall through\n\n    case 'number':\n      if (numberIsNaN(prim)) {\n        return false;\n      }\n\n  }\n\n  return true;\n}\n\nfunction setMightHaveLoosePrim(a, b, prim) {\n  var altValue = findLooseMatchingPrimitives(prim);\n  if (altValue != null) return altValue;\n  return b.has(altValue) && !a.has(altValue);\n}\n\nfunction mapMightHaveLoosePrim(a, b, prim, item, memo) {\n  var altValue = findLooseMatchingPrimitives(prim);\n\n  if (altValue != null) {\n    return altValue;\n  }\n\n  var curB = b.get(altValue);\n\n  if (curB === undefined && !b.has(altValue) || !innerDeepEqual(item, curB, false, memo)) {\n    return false;\n  }\n\n  return !a.has(altValue) && innerDeepEqual(item, curB, false, memo);\n}\n\nfunction setEquiv(a, b, strict, memo) {\n  // This is a lazily initiated Set of entries which have to be compared\n  // pairwise.\n  var set = null;\n  var aValues = arrayFromSet(a);\n\n  for (var i = 0; i < aValues.length; i++) {\n    var val = aValues[i]; // Note: Checking for the objects first improves the performance for object\n    // heavy sets but it is a minor slow down for primitives. As they are fast\n    // to check this improves the worst case scenario instead.\n\n    if (_typeof(val) === 'object' && val !== null) {\n      if (set === null) {\n        set = new Set();\n      } // If the specified value doesn't exist in the second set its an not null\n      // object (or non strict only: a not matching primitive) we'll need to go\n      // hunting for something thats deep-(strict-)equal to it. To make this\n      // O(n log n) complexity we have to copy these values in a new set first.\n\n\n      set.add(val);\n    } else if (!b.has(val)) {\n      if (strict) return false; // Fast path to detect missing string, symbol, undefined and null values.\n\n      if (!setMightHaveLoosePrim(a, b, val)) {\n        return false;\n      }\n\n      if (set === null) {\n        set = new Set();\n      }\n\n      set.add(val);\n    }\n  }\n\n  if (set !== null) {\n    var bValues = arrayFromSet(b);\n\n    for (var _i = 0; _i < bValues.length; _i++) {\n      var _val = bValues[_i]; // We have to check if a primitive value is already\n      // matching and only if it's not, go hunting for it.\n\n      if (_typeof(_val) === 'object' && _val !== null) {\n        if (!setHasEqualElement(set, _val, strict, memo)) return false;\n      } else if (!strict && !a.has(_val) && !setHasEqualElement(set, _val, strict, memo)) {\n        return false;\n      }\n    }\n\n    return set.size === 0;\n  }\n\n  return true;\n}\n\nfunction mapHasEqualEntry(set, map, key1, item1, strict, memo) {\n  // To be able to handle cases like:\n  //   Map([[{}, 'a'], [{}, 'b']]) vs Map([[{}, 'b'], [{}, 'a']])\n  // ... we need to consider *all* matching keys, not just the first we find.\n  var setValues = arrayFromSet(set);\n\n  for (var i = 0; i < setValues.length; i++) {\n    var key2 = setValues[i];\n\n    if (innerDeepEqual(key1, key2, strict, memo) && innerDeepEqual(item1, map.get(key2), strict, memo)) {\n      set.delete(key2);\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction mapEquiv(a, b, strict, memo) {\n  var set = null;\n  var aEntries = arrayFromMap(a);\n\n  for (var i = 0; i < aEntries.length; i++) {\n    var _aEntries$i = _slicedToArray(aEntries[i], 2),\n        key = _aEntries$i[0],\n        item1 = _aEntries$i[1];\n\n    if (_typeof(key) === 'object' && key !== null) {\n      if (set === null) {\n        set = new Set();\n      }\n\n      set.add(key);\n    } else {\n      // By directly retrieving the value we prevent another b.has(key) check in\n      // almost all possible cases.\n      var item2 = b.get(key);\n\n      if (item2 === undefined && !b.has(key) || !innerDeepEqual(item1, item2, strict, memo)) {\n        if (strict) return false; // Fast path to detect missing string, symbol, undefined and null\n        // keys.\n\n        if (!mapMightHaveLoosePrim(a, b, key, item1, memo)) return false;\n\n        if (set === null) {\n          set = new Set();\n        }\n\n        set.add(key);\n      }\n    }\n  }\n\n  if (set !== null) {\n    var bEntries = arrayFromMap(b);\n\n    for (var _i2 = 0; _i2 < bEntries.length; _i2++) {\n      var _bEntries$_i = _slicedToArray(bEntries[_i2], 2),\n          key = _bEntries$_i[0],\n          item = _bEntries$_i[1];\n\n      if (_typeof(key) === 'object' && key !== null) {\n        if (!mapHasEqualEntry(set, a, key, item, strict, memo)) return false;\n      } else if (!strict && (!a.has(key) || !innerDeepEqual(a.get(key), item, false, memo)) && !mapHasEqualEntry(set, a, key, item, false, memo)) {\n        return false;\n      }\n    }\n\n    return set.size === 0;\n  }\n\n  return true;\n}\n\nfunction objEquiv(a, b, strict, keys, memos, iterationType) {\n  // Sets and maps don't have their entries accessible via normal object\n  // properties.\n  var i = 0;\n\n  if (iterationType === kIsSet) {\n    if (!setEquiv(a, b, strict, memos)) {\n      return false;\n    }\n  } else if (iterationType === kIsMap) {\n    if (!mapEquiv(a, b, strict, memos)) {\n      return false;\n    }\n  } else if (iterationType === kIsArray) {\n    for (; i < a.length; i++) {\n      if (hasOwnProperty(a, i)) {\n        if (!hasOwnProperty(b, i) || !innerDeepEqual(a[i], b[i], strict, memos)) {\n          return false;\n        }\n      } else if (hasOwnProperty(b, i)) {\n        return false;\n      } else {\n        // Array is sparse.\n        var keysA = Object.keys(a);\n\n        for (; i < keysA.length; i++) {\n          var key = keysA[i];\n\n          if (!hasOwnProperty(b, key) || !innerDeepEqual(a[key], b[key], strict, memos)) {\n            return false;\n          }\n        }\n\n        if (keysA.length !== Object.keys(b).length) {\n          return false;\n        }\n\n        return true;\n      }\n    }\n  } // The pair must have equivalent values for every corresponding key.\n  // Possibly expensive deep test:\n\n\n  for (i = 0; i < keys.length; i++) {\n    var _key = keys[i];\n\n    if (!innerDeepEqual(a[_key], b[_key], strict, memos)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction isDeepEqual(val1, val2) {\n  return innerDeepEqual(val1, val2, kLoose);\n}\n\nfunction isDeepStrictEqual(val1, val2) {\n  return innerDeepEqual(val1, val2, kStrict);\n}\n\nmodule.exports = {\n  isDeepEqual: isDeepEqual,\n  isDeepStrictEqual: isDeepStrictEqual\n};\n\n//# sourceURL=webpack://invisibles23/./node_modules/assert/build/internal/util/comparisons.js?");

/***/ }),

/***/ "./node_modules/base64-js/index.js":
/*!*****************************************!*\
  !*** ./node_modules/base64-js/index.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n\n\n//# sourceURL=webpack://invisibles23/./node_modules/base64-js/index.js?");

/***/ }),

/***/ "./node_modules/buffer/index.js":
/*!**************************************!*\
  !*** ./node_modules/buffer/index.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/console-browserify/index.js */ \"./node_modules/console-browserify/index.js\");\n/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n\n\nconst base64 = __webpack_require__(/*! base64-js */ \"./node_modules/base64-js/index.js\")\nconst ieee754 = __webpack_require__(/*! ieee754 */ \"./node_modules/ieee754/index.js\")\nconst customInspectSymbol =\n  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation\n    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation\n    : null\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nconst K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    const arr = new Uint8Array(1)\n    const proto = { foo: function () { return 42 } }\n    Object.setPrototypeOf(proto, Uint8Array.prototype)\n    Object.setPrototypeOf(arr, proto)\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  const buf = new Uint8Array(length)\n  Object.setPrototypeOf(buf, Buffer.prototype)\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayView(value)\n  }\n\n  if (value == null) {\n    throw new TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof SharedArrayBuffer !== 'undefined' &&\n      (isInstance(value, SharedArrayBuffer) ||\n      (value && isInstance(value.buffer, SharedArrayBuffer)))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  const valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  const b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)\nObject.setPrototypeOf(Buffer, Uint8Array)\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpreted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  const length = byteLength(string, encoding) | 0\n  let buf = createBuffer(length)\n\n  const actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  const length = array.length < 0 ? 0 : checked(array.length) | 0\n  const buf = createBuffer(length)\n  for (let i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayView (arrayView) {\n  if (isInstance(arrayView, Uint8Array)) {\n    const copy = new Uint8Array(arrayView)\n    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)\n  }\n  return fromArrayLike(arrayView)\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  let buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(buf, Buffer.prototype)\n\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    const len = checked(obj.length) | 0\n    const buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  let x = a.length\n  let y = b.length\n\n  for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  let i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  const buffer = Buffer.allocUnsafe(length)\n  let pos = 0\n  for (i = 0; i < list.length; ++i) {\n    let buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      if (pos + buf.length > buffer.length) {\n        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)\n        buf.copy(buffer, pos)\n      } else {\n        Uint8Array.prototype.set.call(\n          buffer,\n          buf,\n          pos\n        )\n      }\n    } else if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    } else {\n      buf.copy(buffer, pos)\n    }\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  const len = string.length\n  const mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  let loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  const i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  const len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (let i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  const len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (let i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  const len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (let i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  const length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  let str = ''\n  const max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\nif (customInspectSymbol) {\n  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  let x = thisEnd - thisStart\n  let y = end - start\n  const len = Math.min(x, y)\n\n  const thisCopy = this.slice(thisStart, thisEnd)\n  const targetCopy = target.slice(start, end)\n\n  for (let i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  let indexSize = 1\n  let arrLength = arr.length\n  let valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  let i\n  if (dir) {\n    let foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      let found = true\n      for (let j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  const remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  const strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  let i\n  for (i = 0; i < length; ++i) {\n    const parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  const remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return asciiWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  const res = []\n\n  let i = start\n  while (i < end) {\n    const firstByte = buf[i]\n    let codePoint = null\n    let bytesPerSequence = (firstByte > 0xEF)\n      ? 4\n      : (firstByte > 0xDF)\n          ? 3\n          : (firstByte > 0xBF)\n              ? 2\n              : 1\n\n    if (i + bytesPerSequence <= end) {\n      let secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nconst MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  const len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  let res = ''\n  let i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  const len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  let out = ''\n  for (let i = start; i < end; ++i) {\n    out += hexSliceLookupTable[buf[i]]\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  const bytes = buf.slice(start, end)\n  let res = ''\n  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n  for (let i = 0; i < bytes.length - 1; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  const len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  const newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(newBuf, Buffer.prototype)\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUintLE =\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUintBE =\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  let val = this[offset + --byteLength]\n  let mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUint8 =\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUint16LE =\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUint16BE =\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUint32LE =\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUint32BE =\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const lo = first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24\n\n  const hi = this[++offset] +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    last * 2 ** 24\n\n  return BigInt(lo) + (BigInt(hi) << BigInt(32))\n})\n\nBuffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const hi = first * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  const lo = this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last\n\n  return (BigInt(hi) << BigInt(32)) + BigInt(lo)\n})\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let i = byteLength\n  let mul = 1\n  let val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = this[offset + 4] +\n    this[offset + 5] * 2 ** 8 +\n    this[offset + 6] * 2 ** 16 +\n    (last << 24) // Overflow\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24)\n})\n\nBuffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = (first << 24) + // Overflow\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last)\n})\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUintLE =\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let mul = 1\n  let i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUintBE =\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUint8 =\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUint16LE =\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint16BE =\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint32LE =\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUint32BE =\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction wrtBigUInt64LE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  return offset\n}\n\nfunction wrtBigUInt64BE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset + 7] = lo\n  lo = lo >> 8\n  buf[offset + 6] = lo\n  lo = lo >> 8\n  buf[offset + 5] = lo\n  lo = lo >> 8\n  buf[offset + 4] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset + 3] = hi\n  hi = hi >> 8\n  buf[offset + 2] = hi\n  hi = hi >> 8\n  buf[offset + 1] = hi\n  hi = hi >> 8\n  buf[offset] = hi\n  return offset + 8\n}\n\nBuffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = 0\n  let mul = 1\n  let sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  let sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nBuffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  const len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      const code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  } else if (typeof val === 'boolean') {\n    val = Number(val)\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  let i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    const bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    const len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// CUSTOM ERRORS\n// =============\n\n// Simplified versions from Node, changed for Buffer-only usage\nconst errors = {}\nfunction E (sym, getMessage, Base) {\n  errors[sym] = class NodeError extends Base {\n    constructor () {\n      super()\n\n      Object.defineProperty(this, 'message', {\n        value: getMessage.apply(this, arguments),\n        writable: true,\n        configurable: true\n      })\n\n      // Add the error code to the name to include it in the stack trace.\n      this.name = `${this.name} [${sym}]`\n      // Access the stack to generate the error message including the error code\n      // from the name.\n      this.stack // eslint-disable-line no-unused-expressions\n      // Reset the name to the actual name.\n      delete this.name\n    }\n\n    get code () {\n      return sym\n    }\n\n    set code (value) {\n      Object.defineProperty(this, 'code', {\n        configurable: true,\n        enumerable: true,\n        value,\n        writable: true\n      })\n    }\n\n    toString () {\n      return `${this.name} [${sym}]: ${this.message}`\n    }\n  }\n}\n\nE('ERR_BUFFER_OUT_OF_BOUNDS',\n  function (name) {\n    if (name) {\n      return `${name} is outside of buffer bounds`\n    }\n\n    return 'Attempt to access memory outside buffer bounds'\n  }, RangeError)\nE('ERR_INVALID_ARG_TYPE',\n  function (name, actual) {\n    return `The \"${name}\" argument must be of type number. Received type ${typeof actual}`\n  }, TypeError)\nE('ERR_OUT_OF_RANGE',\n  function (str, range, input) {\n    let msg = `The value of \"${str}\" is out of range.`\n    let received = input\n    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n      received = addNumericalSeparator(String(input))\n    } else if (typeof input === 'bigint') {\n      received = String(input)\n      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {\n        received = addNumericalSeparator(received)\n      }\n      received += 'n'\n    }\n    msg += ` It must be ${range}. Received ${received}`\n    return msg\n  }, RangeError)\n\nfunction addNumericalSeparator (val) {\n  let res = ''\n  let i = val.length\n  const start = val[0] === '-' ? 1 : 0\n  for (; i >= start + 4; i -= 3) {\n    res = `_${val.slice(i - 3, i)}${res}`\n  }\n  return `${val.slice(0, i)}${res}`\n}\n\n// CHECK FUNCTIONS\n// ===============\n\nfunction checkBounds (buf, offset, byteLength) {\n  validateNumber(offset, 'offset')\n  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {\n    boundsError(offset, buf.length - (byteLength + 1))\n  }\n}\n\nfunction checkIntBI (value, min, max, buf, offset, byteLength) {\n  if (value > max || value < min) {\n    const n = typeof min === 'bigint' ? 'n' : ''\n    let range\n    if (byteLength > 3) {\n      if (min === 0 || min === BigInt(0)) {\n        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`\n      } else {\n        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +\n                `${(byteLength + 1) * 8 - 1}${n}`\n      }\n    } else {\n      range = `>= ${min}${n} and <= ${max}${n}`\n    }\n    throw new errors.ERR_OUT_OF_RANGE('value', range, value)\n  }\n  checkBounds(buf, offset, byteLength)\n}\n\nfunction validateNumber (value, name) {\n  if (typeof value !== 'number') {\n    throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value)\n  }\n}\n\nfunction boundsError (value, length, type) {\n  if (Math.floor(value) !== value) {\n    validateNumber(value, type)\n    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value)\n  }\n\n  if (length < 0) {\n    throw new errors.ERR_BUFFER_OUT_OF_BOUNDS()\n  }\n\n  throw new errors.ERR_OUT_OF_RANGE(type || 'offset',\n                                    `>= ${type ? 1 : 0} and <= ${length}`,\n                                    value)\n}\n\n// HELPER FUNCTIONS\n// ================\n\nconst INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  let codePoint\n  const length = string.length\n  let leadSurrogate = null\n  const bytes = []\n\n  for (let i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  let c, hi, lo\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  let i\n  for (i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nconst hexSliceLookupTable = (function () {\n  const alphabet = '0123456789abcdef'\n  const table = new Array(256)\n  for (let i = 0; i < 16; ++i) {\n    const i16 = i * 16\n    for (let j = 0; j < 16; ++j) {\n      table[i16 + j] = alphabet[i] + alphabet[j]\n    }\n  }\n  return table\n})()\n\n// Return not function with Error if BigInt not supported\nfunction defineBigIntMethod (fn) {\n  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn\n}\n\nfunction BufferBigIntNotDefined () {\n  throw new Error('BigInt not supported')\n}\n\n\n//# sourceURL=webpack://invisibles23/./node_modules/buffer/index.js?");

/***/ }),

/***/ "./node_modules/call-bind/callBound.js":
/*!*********************************************!*\
  !*** ./node_modules/call-bind/callBound.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar GetIntrinsic = __webpack_require__(/*! get-intrinsic */ \"./node_modules/get-intrinsic/index.js\");\n\nvar callBind = __webpack_require__(/*! ./ */ \"./node_modules/call-bind/index.js\");\n\nvar $indexOf = callBind(GetIntrinsic('String.prototype.indexOf'));\n\nmodule.exports = function callBoundIntrinsic(name, allowMissing) {\n\tvar intrinsic = GetIntrinsic(name, !!allowMissing);\n\tif (typeof intrinsic === 'function' && $indexOf(name, '.prototype.') > -1) {\n\t\treturn callBind(intrinsic);\n\t}\n\treturn intrinsic;\n};\n\n\n//# sourceURL=webpack://invisibles23/./node_modules/call-bind/callBound.js?");

/***/ }),

/***/ "./node_modules/call-bind/index.js":
/*!*****************************************!*\
  !*** ./node_modules/call-bind/index.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar bind = __webpack_require__(/*! function-bind */ \"./node_modules/function-bind/index.js\");\nvar GetIntrinsic = __webpack_require__(/*! get-intrinsic */ \"./node_modules/get-intrinsic/index.js\");\n\nvar $apply = GetIntrinsic('%Function.prototype.apply%');\nvar $call = GetIntrinsic('%Function.prototype.call%');\nvar $reflectApply = GetIntrinsic('%Reflect.apply%', true) || bind.call($call, $apply);\n\nvar $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%', true);\nvar $defineProperty = GetIntrinsic('%Object.defineProperty%', true);\nvar $max = GetIntrinsic('%Math.max%');\n\nif ($defineProperty) {\n\ttry {\n\t\t$defineProperty({}, 'a', { value: 1 });\n\t} catch (e) {\n\t\t// IE 8 has a broken defineProperty\n\t\t$defineProperty = null;\n\t}\n}\n\nmodule.exports = function callBind(originalFunction) {\n\tvar func = $reflectApply(bind, $call, arguments);\n\tif ($gOPD && $defineProperty) {\n\t\tvar desc = $gOPD(func, 'length');\n\t\tif (desc.configurable) {\n\t\t\t// original length, plus the receiver, minus any additional arguments (after the receiver)\n\t\t\t$defineProperty(\n\t\t\t\tfunc,\n\t\t\t\t'length',\n\t\t\t\t{ value: 1 + $max(0, originalFunction.length - (arguments.length - 1)) }\n\t\t\t);\n\t\t}\n\t}\n\treturn func;\n};\n\nvar applyBind = function applyBind() {\n\treturn $reflectApply(bind, $apply, arguments);\n};\n\nif ($defineProperty) {\n\t$defineProperty(module.exports, 'apply', { value: applyBind });\n} else {\n\tmodule.exports.apply = applyBind;\n}\n\n\n//# sourceURL=webpack://invisibles23/./node_modules/call-bind/index.js?");

/***/ }),

/***/ "./node_modules/component-emitter/index.js":
/*!*************************************************!*\
  !*** ./node_modules/component-emitter/index.js ***!
  \*************************************************/
/***/ ((module) => {

eval("\r\n/**\r\n * Expose `Emitter`.\r\n */\r\n\r\nif (true) {\r\n  module.exports = Emitter;\r\n}\r\n\r\n/**\r\n * Initialize a new `Emitter`.\r\n *\r\n * @api public\r\n */\r\n\r\nfunction Emitter(obj) {\r\n  if (obj) return mixin(obj);\r\n};\r\n\r\n/**\r\n * Mixin the emitter properties.\r\n *\r\n * @param {Object} obj\r\n * @return {Object}\r\n * @api private\r\n */\r\n\r\nfunction mixin(obj) {\r\n  for (var key in Emitter.prototype) {\r\n    obj[key] = Emitter.prototype[key];\r\n  }\r\n  return obj;\r\n}\r\n\r\n/**\r\n * Listen on the given `event` with `fn`.\r\n *\r\n * @param {String} event\r\n * @param {Function} fn\r\n * @return {Emitter}\r\n * @api public\r\n */\r\n\r\nEmitter.prototype.on =\r\nEmitter.prototype.addEventListener = function(event, fn){\r\n  this._callbacks = this._callbacks || {};\r\n  (this._callbacks['$' + event] = this._callbacks['$' + event] || [])\r\n    .push(fn);\r\n  return this;\r\n};\r\n\r\n/**\r\n * Adds an `event` listener that will be invoked a single\r\n * time then automatically removed.\r\n *\r\n * @param {String} event\r\n * @param {Function} fn\r\n * @return {Emitter}\r\n * @api public\r\n */\r\n\r\nEmitter.prototype.once = function(event, fn){\r\n  function on() {\r\n    this.off(event, on);\r\n    fn.apply(this, arguments);\r\n  }\r\n\r\n  on.fn = fn;\r\n  this.on(event, on);\r\n  return this;\r\n};\r\n\r\n/**\r\n * Remove the given callback for `event` or all\r\n * registered callbacks.\r\n *\r\n * @param {String} event\r\n * @param {Function} fn\r\n * @return {Emitter}\r\n * @api public\r\n */\r\n\r\nEmitter.prototype.off =\r\nEmitter.prototype.removeListener =\r\nEmitter.prototype.removeAllListeners =\r\nEmitter.prototype.removeEventListener = function(event, fn){\r\n  this._callbacks = this._callbacks || {};\r\n\r\n  // all\r\n  if (0 == arguments.length) {\r\n    this._callbacks = {};\r\n    return this;\r\n  }\r\n\r\n  // specific event\r\n  var callbacks = this._callbacks['$' + event];\r\n  if (!callbacks) return this;\r\n\r\n  // remove all handlers\r\n  if (1 == arguments.length) {\r\n    delete this._callbacks['$' + event];\r\n    return this;\r\n  }\r\n\r\n  // remove specific handler\r\n  var cb;\r\n  for (var i = 0; i < callbacks.length; i++) {\r\n    cb = callbacks[i];\r\n    if (cb === fn || cb.fn === fn) {\r\n      callbacks.splice(i, 1);\r\n      break;\r\n    }\r\n  }\r\n\r\n  // Remove event specific arrays for event types that no\r\n  // one is subscribed for to avoid memory leak.\r\n  if (callbacks.length === 0) {\r\n    delete this._callbacks['$' + event];\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Emit `event` with the given args.\r\n *\r\n * @param {String} event\r\n * @param {Mixed} ...\r\n * @return {Emitter}\r\n */\r\n\r\nEmitter.prototype.emit = function(event){\r\n  this._callbacks = this._callbacks || {};\r\n\r\n  var args = new Array(arguments.length - 1)\r\n    , callbacks = this._callbacks['$' + event];\r\n\r\n  for (var i = 1; i < arguments.length; i++) {\r\n    args[i - 1] = arguments[i];\r\n  }\r\n\r\n  if (callbacks) {\r\n    callbacks = callbacks.slice(0);\r\n    for (var i = 0, len = callbacks.length; i < len; ++i) {\r\n      callbacks[i].apply(this, args);\r\n    }\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Return array of callbacks for `event`.\r\n *\r\n * @param {String} event\r\n * @return {Array}\r\n * @api public\r\n */\r\n\r\nEmitter.prototype.listeners = function(event){\r\n  this._callbacks = this._callbacks || {};\r\n  return this._callbacks['$' + event] || [];\r\n};\r\n\r\n/**\r\n * Check if this emitter has `event` handlers.\r\n *\r\n * @param {String} event\r\n * @return {Boolean}\r\n * @api public\r\n */\r\n\r\nEmitter.prototype.hasListeners = function(event){\r\n  return !! this.listeners(event).length;\r\n};\r\n\n\n//# sourceURL=webpack://invisibles23/./node_modules/component-emitter/index.js?");

/***/ }),

/***/ "./node_modules/console-browserify/index.js":
/*!**************************************************!*\
  !*** ./node_modules/console-browserify/index.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*global window, global*/\nvar util = __webpack_require__(/*! util */ \"./node_modules/util/util.js\")\nvar assert = __webpack_require__(/*! assert */ \"./node_modules/assert/build/assert.js\")\nfunction now() { return new Date().getTime() }\n\nvar slice = Array.prototype.slice\nvar console\nvar times = {}\n\nif (typeof __webpack_require__.g !== \"undefined\" && __webpack_require__.g.console) {\n    console = __webpack_require__.g.console\n} else if (typeof window !== \"undefined\" && window.console) {\n    console = window.console\n} else {\n    console = {}\n}\n\nvar functions = [\n    [log, \"log\"],\n    [info, \"info\"],\n    [warn, \"warn\"],\n    [error, \"error\"],\n    [time, \"time\"],\n    [timeEnd, \"timeEnd\"],\n    [trace, \"trace\"],\n    [dir, \"dir\"],\n    [consoleAssert, \"assert\"]\n]\n\nfor (var i = 0; i < functions.length; i++) {\n    var tuple = functions[i]\n    var f = tuple[0]\n    var name = tuple[1]\n\n    if (!console[name]) {\n        console[name] = f\n    }\n}\n\nmodule.exports = console\n\nfunction log() {}\n\nfunction info() {\n    console.log.apply(console, arguments)\n}\n\nfunction warn() {\n    console.log.apply(console, arguments)\n}\n\nfunction error() {\n    console.warn.apply(console, arguments)\n}\n\nfunction time(label) {\n    times[label] = now()\n}\n\nfunction timeEnd(label) {\n    var time = times[label]\n    if (!time) {\n        throw new Error(\"No such label: \" + label)\n    }\n\n    delete times[label]\n    var duration = now() - time\n    console.log(label + \": \" + duration + \"ms\")\n}\n\nfunction trace() {\n    var err = new Error()\n    err.name = \"Trace\"\n    err.message = util.format.apply(null, arguments)\n    console.error(err.stack)\n}\n\nfunction dir(object) {\n    console.log(util.inspect(object) + \"\\n\")\n}\n\nfunction consoleAssert(expression) {\n    if (!expression) {\n        var arr = slice.call(arguments, 1)\n        assert.ok(false, util.format.apply(null, arr))\n    }\n}\n\n\n//# sourceURL=webpack://invisibles23/./node_modules/console-browserify/index.js?");

/***/ }),

/***/ "./node_modules/define-properties/index.js":
/*!*************************************************!*\
  !*** ./node_modules/define-properties/index.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar keys = __webpack_require__(/*! object-keys */ \"./node_modules/object-keys/index.js\");\nvar hasSymbols = typeof Symbol === 'function' && typeof Symbol('foo') === 'symbol';\n\nvar toStr = Object.prototype.toString;\nvar concat = Array.prototype.concat;\nvar origDefineProperty = Object.defineProperty;\n\nvar isFunction = function (fn) {\n\treturn typeof fn === 'function' && toStr.call(fn) === '[object Function]';\n};\n\nvar hasPropertyDescriptors = __webpack_require__(/*! has-property-descriptors */ \"./node_modules/has-property-descriptors/index.js\")();\n\nvar supportsDescriptors = origDefineProperty && hasPropertyDescriptors;\n\nvar defineProperty = function (object, name, value, predicate) {\n\tif (name in object) {\n\t\tif (predicate === true) {\n\t\t\tif (object[name] === value) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t} else if (!isFunction(predicate) || !predicate()) {\n\t\t\treturn;\n\t\t}\n\t}\n\tif (supportsDescriptors) {\n\t\torigDefineProperty(object, name, {\n\t\t\tconfigurable: true,\n\t\t\tenumerable: false,\n\t\t\tvalue: value,\n\t\t\twritable: true\n\t\t});\n\t} else {\n\t\tobject[name] = value; // eslint-disable-line no-param-reassign\n\t}\n};\n\nvar defineProperties = function (object, map) {\n\tvar predicates = arguments.length > 2 ? arguments[2] : {};\n\tvar props = keys(map);\n\tif (hasSymbols) {\n\t\tprops = concat.call(props, Object.getOwnPropertySymbols(map));\n\t}\n\tfor (var i = 0; i < props.length; i += 1) {\n\t\tdefineProperty(object, props[i], map[props[i]], predicates[props[i]]);\n\t}\n};\n\ndefineProperties.supportsDescriptors = !!supportsDescriptors;\n\nmodule.exports = defineProperties;\n\n\n//# sourceURL=webpack://invisibles23/./node_modules/define-properties/index.js?");

/***/ }),

/***/ "./node_modules/es6-object-assign/index.js":
/*!*************************************************!*\
  !*** ./node_modules/es6-object-assign/index.js ***!
  \*************************************************/
/***/ ((module) => {

"use strict";
eval("/**\n * Code refactored from Mozilla Developer Network:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n */\n\n\n\nfunction assign(target, firstSource) {\n  if (target === undefined || target === null) {\n    throw new TypeError('Cannot convert first argument to object');\n  }\n\n  var to = Object(target);\n  for (var i = 1; i < arguments.length; i++) {\n    var nextSource = arguments[i];\n    if (nextSource === undefined || nextSource === null) {\n      continue;\n    }\n\n    var keysArray = Object.keys(Object(nextSource));\n    for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex++) {\n      var nextKey = keysArray[nextIndex];\n      var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);\n      if (desc !== undefined && desc.enumerable) {\n        to[nextKey] = nextSource[nextKey];\n      }\n    }\n  }\n  return to;\n}\n\nfunction polyfill() {\n  if (!Object.assign) {\n    Object.defineProperty(Object, 'assign', {\n      enumerable: false,\n      configurable: true,\n      writable: true,\n      value: assign\n    });\n  }\n}\n\nmodule.exports = {\n  assign: assign,\n  polyfill: polyfill\n};\n\n\n//# sourceURL=webpack://invisibles23/./node_modules/es6-object-assign/index.js?");

/***/ }),

/***/ "./node_modules/for-each/index.js":
/*!****************************************!*\
  !*** ./node_modules/for-each/index.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar isCallable = __webpack_require__(/*! is-callable */ \"./node_modules/is-callable/index.js\");\n\nvar toStr = Object.prototype.toString;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nvar forEachArray = function forEachArray(array, iterator, receiver) {\n    for (var i = 0, len = array.length; i < len; i++) {\n        if (hasOwnProperty.call(array, i)) {\n            if (receiver == null) {\n                iterator(array[i], i, array);\n            } else {\n                iterator.call(receiver, array[i], i, array);\n            }\n        }\n    }\n};\n\nvar forEachString = function forEachString(string, iterator, receiver) {\n    for (var i = 0, len = string.length; i < len; i++) {\n        // no such thing as a sparse string.\n        if (receiver == null) {\n            iterator(string.charAt(i), i, string);\n        } else {\n            iterator.call(receiver, string.charAt(i), i, string);\n        }\n    }\n};\n\nvar forEachObject = function forEachObject(object, iterator, receiver) {\n    for (var k in object) {\n        if (hasOwnProperty.call(object, k)) {\n            if (receiver == null) {\n                iterator(object[k], k, object);\n            } else {\n                iterator.call(receiver, object[k], k, object);\n            }\n        }\n    }\n};\n\nvar forEach = function forEach(list, iterator, thisArg) {\n    if (!isCallable(iterator)) {\n        throw new TypeError('iterator must be a function');\n    }\n\n    var receiver;\n    if (arguments.length >= 3) {\n        receiver = thisArg;\n    }\n\n    if (toStr.call(list) === '[object Array]') {\n        forEachArray(list, iterator, receiver);\n    } else if (typeof list === 'string') {\n        forEachString(list, iterator, receiver);\n    } else {\n        forEachObject(list, iterator, receiver);\n    }\n};\n\nmodule.exports = forEach;\n\n\n//# sourceURL=webpack://invisibles23/./node_modules/for-each/index.js?");

/***/ }),

/***/ "./node_modules/function-bind/implementation.js":
/*!******************************************************!*\
  !*** ./node_modules/function-bind/implementation.js ***!
  \******************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/* eslint no-invalid-this: 1 */\n\nvar ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';\nvar slice = Array.prototype.slice;\nvar toStr = Object.prototype.toString;\nvar funcType = '[object Function]';\n\nmodule.exports = function bind(that) {\n    var target = this;\n    if (typeof target !== 'function' || toStr.call(target) !== funcType) {\n        throw new TypeError(ERROR_MESSAGE + target);\n    }\n    var args = slice.call(arguments, 1);\n\n    var bound;\n    var binder = function () {\n        if (this instanceof bound) {\n            var result = target.apply(\n                this,\n                args.concat(slice.call(arguments))\n            );\n            if (Object(result) === result) {\n                return result;\n            }\n            return this;\n        } else {\n            return target.apply(\n                that,\n                args.concat(slice.call(arguments))\n            );\n        }\n    };\n\n    var boundLength = Math.max(0, target.length - args.length);\n    var boundArgs = [];\n    for (var i = 0; i < boundLength; i++) {\n        boundArgs.push('$' + i);\n    }\n\n    bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);\n\n    if (target.prototype) {\n        var Empty = function Empty() {};\n        Empty.prototype = target.prototype;\n        bound.prototype = new Empty();\n        Empty.prototype = null;\n    }\n\n    return bound;\n};\n\n\n//# sourceURL=webpack://invisibles23/./node_modules/function-bind/implementation.js?");

/***/ }),

/***/ "./node_modules/function-bind/index.js":
/*!*********************************************!*\
  !*** ./node_modules/function-bind/index.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar implementation = __webpack_require__(/*! ./implementation */ \"./node_modules/function-bind/implementation.js\");\n\nmodule.exports = Function.prototype.bind || implementation;\n\n\n//# sourceURL=webpack://invisibles23/./node_modules/function-bind/index.js?");

/***/ }),

/***/ "./node_modules/get-intrinsic/index.js":
/*!*********************************************!*\
  !*** ./node_modules/get-intrinsic/index.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar undefined;\n\nvar $SyntaxError = SyntaxError;\nvar $Function = Function;\nvar $TypeError = TypeError;\n\n// eslint-disable-next-line consistent-return\nvar getEvalledConstructor = function (expressionSyntax) {\n\ttry {\n\t\treturn $Function('\"use strict\"; return (' + expressionSyntax + ').constructor;')();\n\t} catch (e) {}\n};\n\nvar $gOPD = Object.getOwnPropertyDescriptor;\nif ($gOPD) {\n\ttry {\n\t\t$gOPD({}, '');\n\t} catch (e) {\n\t\t$gOPD = null; // this is IE 8, which has a broken gOPD\n\t}\n}\n\nvar throwTypeError = function () {\n\tthrow new $TypeError();\n};\nvar ThrowTypeError = $gOPD\n\t? (function () {\n\t\ttry {\n\t\t\t// eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties\n\t\t\targuments.callee; // IE 8 does not throw here\n\t\t\treturn throwTypeError;\n\t\t} catch (calleeThrows) {\n\t\t\ttry {\n\t\t\t\t// IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')\n\t\t\t\treturn $gOPD(arguments, 'callee').get;\n\t\t\t} catch (gOPDthrows) {\n\t\t\t\treturn throwTypeError;\n\t\t\t}\n\t\t}\n\t}())\n\t: throwTypeError;\n\nvar hasSymbols = __webpack_require__(/*! has-symbols */ \"./node_modules/has-symbols/index.js\")();\n\nvar getProto = Object.getPrototypeOf || function (x) { return x.__proto__; }; // eslint-disable-line no-proto\n\nvar needsEval = {};\n\nvar TypedArray = typeof Uint8Array === 'undefined' ? undefined : getProto(Uint8Array);\n\nvar INTRINSICS = {\n\t'%AggregateError%': typeof AggregateError === 'undefined' ? undefined : AggregateError,\n\t'%Array%': Array,\n\t'%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined : ArrayBuffer,\n\t'%ArrayIteratorPrototype%': hasSymbols ? getProto([][Symbol.iterator]()) : undefined,\n\t'%AsyncFromSyncIteratorPrototype%': undefined,\n\t'%AsyncFunction%': needsEval,\n\t'%AsyncGenerator%': needsEval,\n\t'%AsyncGeneratorFunction%': needsEval,\n\t'%AsyncIteratorPrototype%': needsEval,\n\t'%Atomics%': typeof Atomics === 'undefined' ? undefined : Atomics,\n\t'%BigInt%': typeof BigInt === 'undefined' ? undefined : BigInt,\n\t'%BigInt64Array%': typeof BigInt64Array === 'undefined' ? undefined : BigInt64Array,\n\t'%BigUint64Array%': typeof BigUint64Array === 'undefined' ? undefined : BigUint64Array,\n\t'%Boolean%': Boolean,\n\t'%DataView%': typeof DataView === 'undefined' ? undefined : DataView,\n\t'%Date%': Date,\n\t'%decodeURI%': decodeURI,\n\t'%decodeURIComponent%': decodeURIComponent,\n\t'%encodeURI%': encodeURI,\n\t'%encodeURIComponent%': encodeURIComponent,\n\t'%Error%': Error,\n\t'%eval%': eval, // eslint-disable-line no-eval\n\t'%EvalError%': EvalError,\n\t'%Float32Array%': typeof Float32Array === 'undefined' ? undefined : Float32Array,\n\t'%Float64Array%': typeof Float64Array === 'undefined' ? undefined : Float64Array,\n\t'%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined : FinalizationRegistry,\n\t'%Function%': $Function,\n\t'%GeneratorFunction%': needsEval,\n\t'%Int8Array%': typeof Int8Array === 'undefined' ? undefined : Int8Array,\n\t'%Int16Array%': typeof Int16Array === 'undefined' ? undefined : Int16Array,\n\t'%Int32Array%': typeof Int32Array === 'undefined' ? undefined : Int32Array,\n\t'%isFinite%': isFinite,\n\t'%isNaN%': isNaN,\n\t'%IteratorPrototype%': hasSymbols ? getProto(getProto([][Symbol.iterator]())) : undefined,\n\t'%JSON%': typeof JSON === 'object' ? JSON : undefined,\n\t'%Map%': typeof Map === 'undefined' ? undefined : Map,\n\t'%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols ? undefined : getProto(new Map()[Symbol.iterator]()),\n\t'%Math%': Math,\n\t'%Number%': Number,\n\t'%Object%': Object,\n\t'%parseFloat%': parseFloat,\n\t'%parseInt%': parseInt,\n\t'%Promise%': typeof Promise === 'undefined' ? undefined : Promise,\n\t'%Proxy%': typeof Proxy === 'undefined' ? undefined : Proxy,\n\t'%RangeError%': RangeError,\n\t'%ReferenceError%': ReferenceError,\n\t'%Reflect%': typeof Reflect === 'undefined' ? undefined : Reflect,\n\t'%RegExp%': RegExp,\n\t'%Set%': typeof Set === 'undefined' ? undefined : Set,\n\t'%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols ? undefined : getProto(new Set()[Symbol.iterator]()),\n\t'%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined : SharedArrayBuffer,\n\t'%String%': String,\n\t'%StringIteratorPrototype%': hasSymbols ? getProto(''[Symbol.iterator]()) : undefined,\n\t'%Symbol%': hasSymbols ? Symbol : undefined,\n\t'%SyntaxError%': $SyntaxError,\n\t'%ThrowTypeError%': ThrowTypeError,\n\t'%TypedArray%': TypedArray,\n\t'%TypeError%': $TypeError,\n\t'%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined : Uint8Array,\n\t'%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined : Uint8ClampedArray,\n\t'%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined : Uint16Array,\n\t'%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined : Uint32Array,\n\t'%URIError%': URIError,\n\t'%WeakMap%': typeof WeakMap === 'undefined' ? undefined : WeakMap,\n\t'%WeakRef%': typeof WeakRef === 'undefined' ? undefined : WeakRef,\n\t'%WeakSet%': typeof WeakSet === 'undefined' ? undefined : WeakSet\n};\n\ntry {\n\tnull.error; // eslint-disable-line no-unused-expressions\n} catch (e) {\n\t// https://github.com/tc39/proposal-shadowrealm/pull/384#issuecomment-1364264229\n\tvar errorProto = getProto(getProto(e));\n\tINTRINSICS['%Error.prototype%'] = errorProto;\n}\n\nvar doEval = function doEval(name) {\n\tvar value;\n\tif (name === '%AsyncFunction%') {\n\t\tvalue = getEvalledConstructor('async function () {}');\n\t} else if (name === '%GeneratorFunction%') {\n\t\tvalue = getEvalledConstructor('function* () {}');\n\t} else if (name === '%AsyncGeneratorFunction%') {\n\t\tvalue = getEvalledConstructor('async function* () {}');\n\t} else if (name === '%AsyncGenerator%') {\n\t\tvar fn = doEval('%AsyncGeneratorFunction%');\n\t\tif (fn) {\n\t\t\tvalue = fn.prototype;\n\t\t}\n\t} else if (name === '%AsyncIteratorPrototype%') {\n\t\tvar gen = doEval('%AsyncGenerator%');\n\t\tif (gen) {\n\t\t\tvalue = getProto(gen.prototype);\n\t\t}\n\t}\n\n\tINTRINSICS[name] = value;\n\n\treturn value;\n};\n\nvar LEGACY_ALIASES = {\n\t'%ArrayBufferPrototype%': ['ArrayBuffer', 'prototype'],\n\t'%ArrayPrototype%': ['Array', 'prototype'],\n\t'%ArrayProto_entries%': ['Array', 'prototype', 'entries'],\n\t'%ArrayProto_forEach%': ['Array', 'prototype', 'forEach'],\n\t'%ArrayProto_keys%': ['Array', 'prototype', 'keys'],\n\t'%ArrayProto_values%': ['Array', 'prototype', 'values'],\n\t'%AsyncFunctionPrototype%': ['AsyncFunction', 'prototype'],\n\t'%AsyncGenerator%': ['AsyncGeneratorFunction', 'prototype'],\n\t'%AsyncGeneratorPrototype%': ['AsyncGeneratorFunction', 'prototype', 'prototype'],\n\t'%BooleanPrototype%': ['Boolean', 'prototype'],\n\t'%DataViewPrototype%': ['DataView', 'prototype'],\n\t'%DatePrototype%': ['Date', 'prototype'],\n\t'%ErrorPrototype%': ['Error', 'prototype'],\n\t'%EvalErrorPrototype%': ['EvalError', 'prototype'],\n\t'%Float32ArrayPrototype%': ['Float32Array', 'prototype'],\n\t'%Float64ArrayPrototype%': ['Float64Array', 'prototype'],\n\t'%FunctionPrototype%': ['Function', 'prototype'],\n\t'%Generator%': ['GeneratorFunction', 'prototype'],\n\t'%GeneratorPrototype%': ['GeneratorFunction', 'prototype', 'prototype'],\n\t'%Int8ArrayPrototype%': ['Int8Array', 'prototype'],\n\t'%Int16ArrayPrototype%': ['Int16Array', 'prototype'],\n\t'%Int32ArrayPrototype%': ['Int32Array', 'prototype'],\n\t'%JSONParse%': ['JSON', 'parse'],\n\t'%JSONStringify%': ['JSON', 'stringify'],\n\t'%MapPrototype%': ['Map', 'prototype'],\n\t'%NumberPrototype%': ['Number', 'prototype'],\n\t'%ObjectPrototype%': ['Object', 'prototype'],\n\t'%ObjProto_toString%': ['Object', 'prototype', 'toString'],\n\t'%ObjProto_valueOf%': ['Object', 'prototype', 'valueOf'],\n\t'%PromisePrototype%': ['Promise', 'prototype'],\n\t'%PromiseProto_then%': ['Promise', 'prototype', 'then'],\n\t'%Promise_all%': ['Promise', 'all'],\n\t'%Promise_reject%': ['Promise', 'reject'],\n\t'%Promise_resolve%': ['Promise', 'resolve'],\n\t'%RangeErrorPrototype%': ['RangeError', 'prototype'],\n\t'%ReferenceErrorPrototype%': ['ReferenceError', 'prototype'],\n\t'%RegExpPrototype%': ['RegExp', 'prototype'],\n\t'%SetPrototype%': ['Set', 'prototype'],\n\t'%SharedArrayBufferPrototype%': ['SharedArrayBuffer', 'prototype'],\n\t'%StringPrototype%': ['String', 'prototype'],\n\t'%SymbolPrototype%': ['Symbol', 'prototype'],\n\t'%SyntaxErrorPrototype%': ['SyntaxError', 'prototype'],\n\t'%TypedArrayPrototype%': ['TypedArray', 'prototype'],\n\t'%TypeErrorPrototype%': ['TypeError', 'prototype'],\n\t'%Uint8ArrayPrototype%': ['Uint8Array', 'prototype'],\n\t'%Uint8ClampedArrayPrototype%': ['Uint8ClampedArray', 'prototype'],\n\t'%Uint16ArrayPrototype%': ['Uint16Array', 'prototype'],\n\t'%Uint32ArrayPrototype%': ['Uint32Array', 'prototype'],\n\t'%URIErrorPrototype%': ['URIError', 'prototype'],\n\t'%WeakMapPrototype%': ['WeakMap', 'prototype'],\n\t'%WeakSetPrototype%': ['WeakSet', 'prototype']\n};\n\nvar bind = __webpack_require__(/*! function-bind */ \"./node_modules/function-bind/index.js\");\nvar hasOwn = __webpack_require__(/*! has */ \"./node_modules/has/src/index.js\");\nvar $concat = bind.call(Function.call, Array.prototype.concat);\nvar $spliceApply = bind.call(Function.apply, Array.prototype.splice);\nvar $replace = bind.call(Function.call, String.prototype.replace);\nvar $strSlice = bind.call(Function.call, String.prototype.slice);\nvar $exec = bind.call(Function.call, RegExp.prototype.exec);\n\n/* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */\nvar rePropName = /[^%.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|%$))/g;\nvar reEscapeChar = /\\\\(\\\\)?/g; /** Used to match backslashes in property paths. */\nvar stringToPath = function stringToPath(string) {\n\tvar first = $strSlice(string, 0, 1);\n\tvar last = $strSlice(string, -1);\n\tif (first === '%' && last !== '%') {\n\t\tthrow new $SyntaxError('invalid intrinsic syntax, expected closing `%`');\n\t} else if (last === '%' && first !== '%') {\n\t\tthrow new $SyntaxError('invalid intrinsic syntax, expected opening `%`');\n\t}\n\tvar result = [];\n\t$replace(string, rePropName, function (match, number, quote, subString) {\n\t\tresult[result.length] = quote ? $replace(subString, reEscapeChar, '$1') : number || match;\n\t});\n\treturn result;\n};\n/* end adaptation */\n\nvar getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {\n\tvar intrinsicName = name;\n\tvar alias;\n\tif (hasOwn(LEGACY_ALIASES, intrinsicName)) {\n\t\talias = LEGACY_ALIASES[intrinsicName];\n\t\tintrinsicName = '%' + alias[0] + '%';\n\t}\n\n\tif (hasOwn(INTRINSICS, intrinsicName)) {\n\t\tvar value = INTRINSICS[intrinsicName];\n\t\tif (value === needsEval) {\n\t\t\tvalue = doEval(intrinsicName);\n\t\t}\n\t\tif (typeof value === 'undefined' && !allowMissing) {\n\t\t\tthrow new $TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');\n\t\t}\n\n\t\treturn {\n\t\t\talias: alias,\n\t\t\tname: intrinsicName,\n\t\t\tvalue: value\n\t\t};\n\t}\n\n\tthrow new $SyntaxError('intrinsic ' + name + ' does not exist!');\n};\n\nmodule.exports = function GetIntrinsic(name, allowMissing) {\n\tif (typeof name !== 'string' || name.length === 0) {\n\t\tthrow new $TypeError('intrinsic name must be a non-empty string');\n\t}\n\tif (arguments.length > 1 && typeof allowMissing !== 'boolean') {\n\t\tthrow new $TypeError('\"allowMissing\" argument must be a boolean');\n\t}\n\n\tif ($exec(/^%?[^%]*%?$/, name) === null) {\n\t\tthrow new $SyntaxError('`%` may not be present anywhere but at the beginning and end of the intrinsic name');\n\t}\n\tvar parts = stringToPath(name);\n\tvar intrinsicBaseName = parts.length > 0 ? parts[0] : '';\n\n\tvar intrinsic = getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);\n\tvar intrinsicRealName = intrinsic.name;\n\tvar value = intrinsic.value;\n\tvar skipFurtherCaching = false;\n\n\tvar alias = intrinsic.alias;\n\tif (alias) {\n\t\tintrinsicBaseName = alias[0];\n\t\t$spliceApply(parts, $concat([0, 1], alias));\n\t}\n\n\tfor (var i = 1, isOwn = true; i < parts.length; i += 1) {\n\t\tvar part = parts[i];\n\t\tvar first = $strSlice(part, 0, 1);\n\t\tvar last = $strSlice(part, -1);\n\t\tif (\n\t\t\t(\n\t\t\t\t(first === '\"' || first === \"'\" || first === '`')\n\t\t\t\t|| (last === '\"' || last === \"'\" || last === '`')\n\t\t\t)\n\t\t\t&& first !== last\n\t\t) {\n\t\t\tthrow new $SyntaxError('property names with quotes must have matching quotes');\n\t\t}\n\t\tif (part === 'constructor' || !isOwn) {\n\t\t\tskipFurtherCaching = true;\n\t\t}\n\n\t\tintrinsicBaseName += '.' + part;\n\t\tintrinsicRealName = '%' + intrinsicBaseName + '%';\n\n\t\tif (hasOwn(INTRINSICS, intrinsicRealName)) {\n\t\t\tvalue = INTRINSICS[intrinsicRealName];\n\t\t} else if (value != null) {\n\t\t\tif (!(part in value)) {\n\t\t\t\tif (!allowMissing) {\n\t\t\t\t\tthrow new $TypeError('base intrinsic for ' + name + ' exists, but the property is not available.');\n\t\t\t\t}\n\t\t\t\treturn void undefined;\n\t\t\t}\n\t\t\tif ($gOPD && (i + 1) >= parts.length) {\n\t\t\t\tvar desc = $gOPD(value, part);\n\t\t\t\tisOwn = !!desc;\n\n\t\t\t\t// By convention, when a data property is converted to an accessor\n\t\t\t\t// property to emulate a data property that does not suffer from\n\t\t\t\t// the override mistake, that accessor's getter is marked with\n\t\t\t\t// an `originalValue` property. Here, when we detect this, we\n\t\t\t\t// uphold the illusion by pretending to see that original data\n\t\t\t\t// property, i.e., returning the value rather than the getter\n\t\t\t\t// itself.\n\t\t\t\tif (isOwn && 'get' in desc && !('originalValue' in desc.get)) {\n\t\t\t\t\tvalue = desc.get;\n\t\t\t\t} else {\n\t\t\t\t\tvalue = value[part];\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tisOwn = hasOwn(value, part);\n\t\t\t\tvalue = value[part];\n\t\t\t}\n\n\t\t\tif (isOwn && !skipFurtherCaching) {\n\t\t\t\tINTRINSICS[intrinsicRealName] = value;\n\t\t\t}\n\t\t}\n\t}\n\treturn value;\n};\n\n\n//# sourceURL=webpack://invisibles23/./node_modules/get-intrinsic/index.js?");

/***/ }),

/***/ "./node_modules/gopd/index.js":
/*!************************************!*\
  !*** ./node_modules/gopd/index.js ***!
  \************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar GetIntrinsic = __webpack_require__(/*! get-intrinsic */ \"./node_modules/get-intrinsic/index.js\");\n\nvar $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%', true);\n\nif ($gOPD) {\n\ttry {\n\t\t$gOPD([], 'length');\n\t} catch (e) {\n\t\t// IE 8 has a broken gOPD\n\t\t$gOPD = null;\n\t}\n}\n\nmodule.exports = $gOPD;\n\n\n//# sourceURL=webpack://invisibles23/./node_modules/gopd/index.js?");

/***/ }),

/***/ "./node_modules/has-property-descriptors/index.js":
/*!********************************************************!*\
  !*** ./node_modules/has-property-descriptors/index.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar GetIntrinsic = __webpack_require__(/*! get-intrinsic */ \"./node_modules/get-intrinsic/index.js\");\n\nvar $defineProperty = GetIntrinsic('%Object.defineProperty%', true);\n\nvar hasPropertyDescriptors = function hasPropertyDescriptors() {\n\tif ($defineProperty) {\n\t\ttry {\n\t\t\t$defineProperty({}, 'a', { value: 1 });\n\t\t\treturn true;\n\t\t} catch (e) {\n\t\t\t// IE 8 has a broken defineProperty\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn false;\n};\n\nhasPropertyDescriptors.hasArrayLengthDefineBug = function hasArrayLengthDefineBug() {\n\t// node v0.6 has a bug where array lengths can be Set but not Defined\n\tif (!hasPropertyDescriptors()) {\n\t\treturn null;\n\t}\n\ttry {\n\t\treturn $defineProperty([], 'length', { value: 1 }).length !== 1;\n\t} catch (e) {\n\t\t// In Firefox 4-22, defining length on an array throws an exception.\n\t\treturn true;\n\t}\n};\n\nmodule.exports = hasPropertyDescriptors;\n\n\n//# sourceURL=webpack://invisibles23/./node_modules/has-property-descriptors/index.js?");

/***/ }),

/***/ "./node_modules/has-symbols/index.js":
/*!*******************************************!*\
  !*** ./node_modules/has-symbols/index.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar origSymbol = typeof Symbol !== 'undefined' && Symbol;\nvar hasSymbolSham = __webpack_require__(/*! ./shams */ \"./node_modules/has-symbols/shams.js\");\n\nmodule.exports = function hasNativeSymbols() {\n\tif (typeof origSymbol !== 'function') { return false; }\n\tif (typeof Symbol !== 'function') { return false; }\n\tif (typeof origSymbol('foo') !== 'symbol') { return false; }\n\tif (typeof Symbol('bar') !== 'symbol') { return false; }\n\n\treturn hasSymbolSham();\n};\n\n\n//# sourceURL=webpack://invisibles23/./node_modules/has-symbols/index.js?");

/***/ }),

/***/ "./node_modules/has-symbols/shams.js":
/*!*******************************************!*\
  !*** ./node_modules/has-symbols/shams.js ***!
  \*******************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/* eslint complexity: [2, 18], max-statements: [2, 33] */\nmodule.exports = function hasSymbols() {\n\tif (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') { return false; }\n\tif (typeof Symbol.iterator === 'symbol') { return true; }\n\n\tvar obj = {};\n\tvar sym = Symbol('test');\n\tvar symObj = Object(sym);\n\tif (typeof sym === 'string') { return false; }\n\n\tif (Object.prototype.toString.call(sym) !== '[object Symbol]') { return false; }\n\tif (Object.prototype.toString.call(symObj) !== '[object Symbol]') { return false; }\n\n\t// temp disabled per https://github.com/ljharb/object.assign/issues/17\n\t// if (sym instanceof Symbol) { return false; }\n\t// temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4\n\t// if (!(symObj instanceof Symbol)) { return false; }\n\n\t// if (typeof Symbol.prototype.toString !== 'function') { return false; }\n\t// if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }\n\n\tvar symVal = 42;\n\tobj[sym] = symVal;\n\tfor (sym in obj) { return false; } // eslint-disable-line no-restricted-syntax, no-unreachable-loop\n\tif (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) { return false; }\n\n\tif (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) { return false; }\n\n\tvar syms = Object.getOwnPropertySymbols(obj);\n\tif (syms.length !== 1 || syms[0] !== sym) { return false; }\n\n\tif (!Object.prototype.propertyIsEnumerable.call(obj, sym)) { return false; }\n\n\tif (typeof Object.getOwnPropertyDescriptor === 'function') {\n\t\tvar descriptor = Object.getOwnPropertyDescriptor(obj, sym);\n\t\tif (descriptor.value !== symVal || descriptor.enumerable !== true) { return false; }\n\t}\n\n\treturn true;\n};\n\n\n//# sourceURL=webpack://invisibles23/./node_modules/has-symbols/shams.js?");

/***/ }),

/***/ "./node_modules/has-tostringtag/shams.js":
/*!***********************************************!*\
  !*** ./node_modules/has-tostringtag/shams.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar hasSymbols = __webpack_require__(/*! has-symbols/shams */ \"./node_modules/has-symbols/shams.js\");\n\nmodule.exports = function hasToStringTagShams() {\n\treturn hasSymbols() && !!Symbol.toStringTag;\n};\n\n\n//# sourceURL=webpack://invisibles23/./node_modules/has-tostringtag/shams.js?");

/***/ }),

/***/ "./node_modules/has/src/index.js":
/*!***************************************!*\
  !*** ./node_modules/has/src/index.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar bind = __webpack_require__(/*! function-bind */ \"./node_modules/function-bind/index.js\");\n\nmodule.exports = bind.call(Function.call, Object.prototype.hasOwnProperty);\n\n\n//# sourceURL=webpack://invisibles23/./node_modules/has/src/index.js?");

/***/ }),

/***/ "./node_modules/ieee754/index.js":
/*!***************************************!*\
  !*** ./node_modules/ieee754/index.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n\n\n//# sourceURL=webpack://invisibles23/./node_modules/ieee754/index.js?");

/***/ }),

/***/ "./node_modules/inherits/inherits_browser.js":
/*!***************************************************!*\
  !*** ./node_modules/inherits/inherits_browser.js ***!
  \***************************************************/
/***/ ((module) => {

eval("if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      ctor.prototype = Object.create(superCtor.prototype, {\n        constructor: {\n          value: ctor,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        }\n      })\n    }\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      var TempCtor = function () {}\n      TempCtor.prototype = superCtor.prototype\n      ctor.prototype = new TempCtor()\n      ctor.prototype.constructor = ctor\n    }\n  }\n}\n\n\n//# sourceURL=webpack://invisibles23/./node_modules/inherits/inherits_browser.js?");

/***/ }),

/***/ "./node_modules/is-arguments/index.js":
/*!********************************************!*\
  !*** ./node_modules/is-arguments/index.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar hasToStringTag = __webpack_require__(/*! has-tostringtag/shams */ \"./node_modules/has-tostringtag/shams.js\")();\nvar callBound = __webpack_require__(/*! call-bind/callBound */ \"./node_modules/call-bind/callBound.js\");\n\nvar $toString = callBound('Object.prototype.toString');\n\nvar isStandardArguments = function isArguments(value) {\n\tif (hasToStringTag && value && typeof value === 'object' && Symbol.toStringTag in value) {\n\t\treturn false;\n\t}\n\treturn $toString(value) === '[object Arguments]';\n};\n\nvar isLegacyArguments = function isArguments(value) {\n\tif (isStandardArguments(value)) {\n\t\treturn true;\n\t}\n\treturn value !== null &&\n\t\ttypeof value === 'object' &&\n\t\ttypeof value.length === 'number' &&\n\t\tvalue.length >= 0 &&\n\t\t$toString(value) !== '[object Array]' &&\n\t\t$toString(value.callee) === '[object Function]';\n};\n\nvar supportsStandardArguments = (function () {\n\treturn isStandardArguments(arguments);\n}());\n\nisStandardArguments.isLegacyArguments = isLegacyArguments; // for tests\n\nmodule.exports = supportsStandardArguments ? isStandardArguments : isLegacyArguments;\n\n\n//# sourceURL=webpack://invisibles23/./node_modules/is-arguments/index.js?");

/***/ }),

/***/ "./node_modules/is-callable/index.js":
/*!*******************************************!*\
  !*** ./node_modules/is-callable/index.js ***!
  \*******************************************/
/***/ ((module) => {

"use strict";
eval("\n\nvar fnToStr = Function.prototype.toString;\nvar reflectApply = typeof Reflect === 'object' && Reflect !== null && Reflect.apply;\nvar badArrayLike;\nvar isCallableMarker;\nif (typeof reflectApply === 'function' && typeof Object.defineProperty === 'function') {\n\ttry {\n\t\tbadArrayLike = Object.defineProperty({}, 'length', {\n\t\t\tget: function () {\n\t\t\t\tthrow isCallableMarker;\n\t\t\t}\n\t\t});\n\t\tisCallableMarker = {};\n\t\t// eslint-disable-next-line no-throw-literal\n\t\treflectApply(function () { throw 42; }, null, badArrayLike);\n\t} catch (_) {\n\t\tif (_ !== isCallableMarker) {\n\t\t\treflectApply = null;\n\t\t}\n\t}\n} else {\n\treflectApply = null;\n}\n\nvar constructorRegex = /^\\s*class\\b/;\nvar isES6ClassFn = function isES6ClassFunction(value) {\n\ttry {\n\t\tvar fnStr = fnToStr.call(value);\n\t\treturn constructorRegex.test(fnStr);\n\t} catch (e) {\n\t\treturn false; // not a function\n\t}\n};\n\nvar tryFunctionObject = function tryFunctionToStr(value) {\n\ttry {\n\t\tif (isES6ClassFn(value)) { return false; }\n\t\tfnToStr.call(value);\n\t\treturn true;\n\t} catch (e) {\n\t\treturn false;\n\t}\n};\nvar toStr = Object.prototype.toString;\nvar objectClass = '[object Object]';\nvar fnClass = '[object Function]';\nvar genClass = '[object GeneratorFunction]';\nvar ddaClass = '[object HTMLAllCollection]'; // IE 11\nvar ddaClass2 = '[object HTML document.all class]';\nvar ddaClass3 = '[object HTMLCollection]'; // IE 9-10\nvar hasToStringTag = typeof Symbol === 'function' && !!Symbol.toStringTag; // better: use `has-tostringtag`\n\nvar isIE68 = !(0 in [,]); // eslint-disable-line no-sparse-arrays, comma-spacing\n\nvar isDDA = function isDocumentDotAll() { return false; };\nif (typeof document === 'object') {\n\t// Firefox 3 canonicalizes DDA to undefined when it's not accessed directly\n\tvar all = document.all;\n\tif (toStr.call(all) === toStr.call(document.all)) {\n\t\tisDDA = function isDocumentDotAll(value) {\n\t\t\t/* globals document: false */\n\t\t\t// in IE 6-8, typeof document.all is \"object\" and it's truthy\n\t\t\tif ((isIE68 || !value) && (typeof value === 'undefined' || typeof value === 'object')) {\n\t\t\t\ttry {\n\t\t\t\t\tvar str = toStr.call(value);\n\t\t\t\t\treturn (\n\t\t\t\t\t\tstr === ddaClass\n\t\t\t\t\t\t|| str === ddaClass2\n\t\t\t\t\t\t|| str === ddaClass3 // opera 12.16\n\t\t\t\t\t\t|| str === objectClass // IE 6-8\n\t\t\t\t\t) && value('') == null; // eslint-disable-line eqeqeq\n\t\t\t\t} catch (e) { /**/ }\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\t}\n}\n\nmodule.exports = reflectApply\n\t? function isCallable(value) {\n\t\tif (isDDA(value)) { return true; }\n\t\tif (!value) { return false; }\n\t\tif (typeof value !== 'function' && typeof value !== 'object') { return false; }\n\t\ttry {\n\t\t\treflectApply(value, null, badArrayLike);\n\t\t} catch (e) {\n\t\t\tif (e !== isCallableMarker) { return false; }\n\t\t}\n\t\treturn !isES6ClassFn(value) && tryFunctionObject(value);\n\t}\n\t: function isCallable(value) {\n\t\tif (isDDA(value)) { return true; }\n\t\tif (!value) { return false; }\n\t\tif (typeof value !== 'function' && typeof value !== 'object') { return false; }\n\t\tif (hasToStringTag) { return tryFunctionObject(value); }\n\t\tif (isES6ClassFn(value)) { return false; }\n\t\tvar strClass = toStr.call(value);\n\t\tif (strClass !== fnClass && strClass !== genClass && !(/^\\[object HTML/).test(strClass)) { return false; }\n\t\treturn tryFunctionObject(value);\n\t};\n\n\n//# sourceURL=webpack://invisibles23/./node_modules/is-callable/index.js?");

/***/ }),

/***/ "./node_modules/is-generator-function/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/is-generator-function/index.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar toStr = Object.prototype.toString;\nvar fnToStr = Function.prototype.toString;\nvar isFnRegex = /^\\s*(?:function)?\\*/;\nvar hasToStringTag = __webpack_require__(/*! has-tostringtag/shams */ \"./node_modules/has-tostringtag/shams.js\")();\nvar getProto = Object.getPrototypeOf;\nvar getGeneratorFunc = function () { // eslint-disable-line consistent-return\n\tif (!hasToStringTag) {\n\t\treturn false;\n\t}\n\ttry {\n\t\treturn Function('return function*() {}')();\n\t} catch (e) {\n\t}\n};\nvar GeneratorFunction;\n\nmodule.exports = function isGeneratorFunction(fn) {\n\tif (typeof fn !== 'function') {\n\t\treturn false;\n\t}\n\tif (isFnRegex.test(fnToStr.call(fn))) {\n\t\treturn true;\n\t}\n\tif (!hasToStringTag) {\n\t\tvar str = toStr.call(fn);\n\t\treturn str === '[object GeneratorFunction]';\n\t}\n\tif (!getProto) {\n\t\treturn false;\n\t}\n\tif (typeof GeneratorFunction === 'undefined') {\n\t\tvar generatorFunc = getGeneratorFunc();\n\t\tGeneratorFunction = generatorFunc ? getProto(generatorFunc) : false;\n\t}\n\treturn getProto(fn) === GeneratorFunction;\n};\n\n\n//# sourceURL=webpack://invisibles23/./node_modules/is-generator-function/index.js?");

/***/ }),

/***/ "./node_modules/is-nan/implementation.js":
/*!***********************************************!*\
  !*** ./node_modules/is-nan/implementation.js ***!
  \***********************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/* http://www.ecma-international.org/ecma-262/6.0/#sec-number.isnan */\n\nmodule.exports = function isNaN(value) {\n\treturn value !== value;\n};\n\n\n//# sourceURL=webpack://invisibles23/./node_modules/is-nan/implementation.js?");

/***/ }),

/***/ "./node_modules/is-nan/index.js":
/*!**************************************!*\
  !*** ./node_modules/is-nan/index.js ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar callBind = __webpack_require__(/*! call-bind */ \"./node_modules/call-bind/index.js\");\nvar define = __webpack_require__(/*! define-properties */ \"./node_modules/define-properties/index.js\");\n\nvar implementation = __webpack_require__(/*! ./implementation */ \"./node_modules/is-nan/implementation.js\");\nvar getPolyfill = __webpack_require__(/*! ./polyfill */ \"./node_modules/is-nan/polyfill.js\");\nvar shim = __webpack_require__(/*! ./shim */ \"./node_modules/is-nan/shim.js\");\n\nvar polyfill = callBind(getPolyfill(), Number);\n\n/* http://www.ecma-international.org/ecma-262/6.0/#sec-number.isnan */\n\ndefine(polyfill, {\n\tgetPolyfill: getPolyfill,\n\timplementation: implementation,\n\tshim: shim\n});\n\nmodule.exports = polyfill;\n\n\n//# sourceURL=webpack://invisibles23/./node_modules/is-nan/index.js?");

/***/ }),

/***/ "./node_modules/is-nan/polyfill.js":
/*!*****************************************!*\
  !*** ./node_modules/is-nan/polyfill.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar implementation = __webpack_require__(/*! ./implementation */ \"./node_modules/is-nan/implementation.js\");\n\nmodule.exports = function getPolyfill() {\n\tif (Number.isNaN && Number.isNaN(NaN) && !Number.isNaN('a')) {\n\t\treturn Number.isNaN;\n\t}\n\treturn implementation;\n};\n\n\n//# sourceURL=webpack://invisibles23/./node_modules/is-nan/polyfill.js?");

/***/ }),

/***/ "./node_modules/is-nan/shim.js":
/*!*************************************!*\
  !*** ./node_modules/is-nan/shim.js ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar define = __webpack_require__(/*! define-properties */ \"./node_modules/define-properties/index.js\");\nvar getPolyfill = __webpack_require__(/*! ./polyfill */ \"./node_modules/is-nan/polyfill.js\");\n\n/* http://www.ecma-international.org/ecma-262/6.0/#sec-number.isnan */\n\nmodule.exports = function shimNumberIsNaN() {\n\tvar polyfill = getPolyfill();\n\tdefine(Number, { isNaN: polyfill }, {\n\t\tisNaN: function testIsNaN() {\n\t\t\treturn Number.isNaN !== polyfill;\n\t\t}\n\t});\n\treturn polyfill;\n};\n\n\n//# sourceURL=webpack://invisibles23/./node_modules/is-nan/shim.js?");

/***/ }),

/***/ "./node_modules/is-typed-array/index.js":
/*!**********************************************!*\
  !*** ./node_modules/is-typed-array/index.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar forEach = __webpack_require__(/*! for-each */ \"./node_modules/for-each/index.js\");\nvar availableTypedArrays = __webpack_require__(/*! available-typed-arrays */ \"./node_modules/available-typed-arrays/index.js\");\nvar callBound = __webpack_require__(/*! call-bind/callBound */ \"./node_modules/call-bind/callBound.js\");\n\nvar $toString = callBound('Object.prototype.toString');\nvar hasToStringTag = __webpack_require__(/*! has-tostringtag/shams */ \"./node_modules/has-tostringtag/shams.js\")();\nvar gOPD = __webpack_require__(/*! gopd */ \"./node_modules/gopd/index.js\");\n\nvar g = typeof globalThis === 'undefined' ? __webpack_require__.g : globalThis;\nvar typedArrays = availableTypedArrays();\n\nvar $indexOf = callBound('Array.prototype.indexOf', true) || function indexOf(array, value) {\n\tfor (var i = 0; i < array.length; i += 1) {\n\t\tif (array[i] === value) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n};\nvar $slice = callBound('String.prototype.slice');\nvar toStrTags = {};\nvar getPrototypeOf = Object.getPrototypeOf; // require('getprototypeof');\nif (hasToStringTag && gOPD && getPrototypeOf) {\n\tforEach(typedArrays, function (typedArray) {\n\t\tvar arr = new g[typedArray]();\n\t\tif (Symbol.toStringTag in arr) {\n\t\t\tvar proto = getPrototypeOf(arr);\n\t\t\tvar descriptor = gOPD(proto, Symbol.toStringTag);\n\t\t\tif (!descriptor) {\n\t\t\t\tvar superProto = getPrototypeOf(proto);\n\t\t\t\tdescriptor = gOPD(superProto, Symbol.toStringTag);\n\t\t\t}\n\t\t\ttoStrTags[typedArray] = descriptor.get;\n\t\t}\n\t});\n}\n\nvar tryTypedArrays = function tryAllTypedArrays(value) {\n\tvar anyTrue = false;\n\tforEach(toStrTags, function (getter, typedArray) {\n\t\tif (!anyTrue) {\n\t\t\ttry {\n\t\t\t\tanyTrue = getter.call(value) === typedArray;\n\t\t\t} catch (e) { /**/ }\n\t\t}\n\t});\n\treturn anyTrue;\n};\n\nmodule.exports = function isTypedArray(value) {\n\tif (!value || typeof value !== 'object') { return false; }\n\tif (!hasToStringTag || !(Symbol.toStringTag in value)) {\n\t\tvar tag = $slice($toString(value), 8, -1);\n\t\treturn $indexOf(typedArrays, tag) > -1;\n\t}\n\tif (!gOPD) { return false; }\n\treturn tryTypedArrays(value);\n};\n\n\n//# sourceURL=webpack://invisibles23/./node_modules/is-typed-array/index.js?");

/***/ }),

/***/ "./node_modules/just-validate/dist/just-validate.es.js":
/*!*************************************************************!*\
  !*** ./node_modules/just-validate/dist/just-validate.es.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CustomStyleTagIds\": () => (/* binding */ CustomStyleTagIds),\n/* harmony export */   \"GroupRules\": () => (/* binding */ GroupRules),\n/* harmony export */   \"Rules\": () => (/* binding */ Rules),\n/* harmony export */   \"default\": () => (/* binding */ JustValidate)\n/* harmony export */ });\n/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/console-browserify/index.js */ \"./node_modules/console-browserify/index.js\");\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nconst EMAIL_REGEXP = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\nconst INTEGER_REGEXP = /^-?[0-9]\\d*$/;\nconst PASSWORD_REGEXP = /^(?=.*[A-Za-z])(?=.*\\d).{8,}$/;\nconst STRONG_PASSWORD_REGEXP = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/;\nconst isEmpty = (value) => {\n  let newVal = value;\n  if (typeof value === \"string\") {\n    newVal = value.trim();\n  }\n  return !newVal;\n};\nconst isEmail = (value) => {\n  return EMAIL_REGEXP.test(value);\n};\nconst isLengthMoreThanMax = (value, len) => {\n  return value.length > len;\n};\nconst isLengthLessThanMin = (value, len) => {\n  return value.length < len;\n};\nconst isNumber = (value) => {\n  if (typeof value !== \"string\") {\n    return false;\n  }\n  return !isNaN(+value) && !isNaN(parseFloat(value));\n};\nconst isInteger = (value) => {\n  return INTEGER_REGEXP.test(value);\n};\nconst isPassword = (value) => {\n  return PASSWORD_REGEXP.test(value);\n};\nconst isStrongPassword = (value) => {\n  return STRONG_PASSWORD_REGEXP.test(value);\n};\nconst isNumberMoreThanMax = (value, len) => {\n  return value > len;\n};\nconst isNumberLessThanMin = (value, len) => {\n  return value < len;\n};\nconst isInvalidOrEmptyString = (value) => {\n  return typeof value !== \"string\" || value === \"\";\n};\nvar Rules = /* @__PURE__ */ ((Rules2) => {\n  Rules2[\"Required\"] = \"required\";\n  Rules2[\"Email\"] = \"email\";\n  Rules2[\"MinLength\"] = \"minLength\";\n  Rules2[\"MaxLength\"] = \"maxLength\";\n  Rules2[\"Password\"] = \"password\";\n  Rules2[\"Number\"] = \"number\";\n  Rules2[\"Integer\"] = \"integer\";\n  Rules2[\"MaxNumber\"] = \"maxNumber\";\n  Rules2[\"MinNumber\"] = \"minNumber\";\n  Rules2[\"StrongPassword\"] = \"strongPassword\";\n  Rules2[\"CustomRegexp\"] = \"customRegexp\";\n  Rules2[\"MinFilesCount\"] = \"minFilesCount\";\n  Rules2[\"MaxFilesCount\"] = \"maxFilesCount\";\n  Rules2[\"Files\"] = \"files\";\n  return Rules2;\n})(Rules || {});\nvar GroupRules = /* @__PURE__ */ ((GroupRules2) => {\n  GroupRules2[\"Required\"] = \"required\";\n  return GroupRules2;\n})(GroupRules || {});\nvar CustomStyleTagIds = /* @__PURE__ */ ((CustomStyleTagIds2) => {\n  CustomStyleTagIds2[\"Label\"] = \"label\";\n  CustomStyleTagIds2[\"LabelArrow\"] = \"labelArrow\";\n  return CustomStyleTagIds2;\n})(CustomStyleTagIds || {});\nconst defaultDictionary = [\n  {\n    key: Rules.Required,\n    dict: {\n      en: \"The field is required\"\n    }\n  },\n  {\n    key: Rules.Email,\n    dict: {\n      en: \"Email has invalid format\"\n    }\n  },\n  {\n    key: Rules.MaxLength,\n    dict: {\n      en: \"The field must contain a maximum of :value characters\"\n    }\n  },\n  {\n    key: Rules.MinLength,\n    dict: {\n      en: \"The field must contain a minimum of :value characters\"\n    }\n  },\n  {\n    key: Rules.Password,\n    dict: {\n      en: \"Password must contain minimum eight characters, at least one letter and one number\"\n    }\n  },\n  {\n    key: Rules.StrongPassword,\n    dict: {\n      en: \"Password should contain minimum eight characters, at least one uppercase letter, one lowercase letter, one number and one special character\"\n    }\n  },\n  {\n    key: Rules.Number,\n    dict: {\n      en: \"Value should be a number\"\n    }\n  },\n  {\n    key: Rules.MaxNumber,\n    dict: {\n      en: \"Number should be less or equal than :value\"\n    }\n  },\n  {\n    key: Rules.MinNumber,\n    dict: {\n      en: \"Number should be more or equal than :value\"\n    }\n  },\n  {\n    key: Rules.MinFilesCount,\n    dict: {\n      en: \"Files count should be more or equal than :value\"\n    }\n  },\n  {\n    key: Rules.MaxFilesCount,\n    dict: {\n      en: \"Files count should be less or equal than :value\"\n    }\n  },\n  {\n    key: Rules.Files,\n    dict: {\n      en: \"Uploaded files have one or several invalid properties (extension/size/type etc).\"\n    }\n  }\n];\nconst DEFAULT_ERROR_FIELD_MESSAGE = \"Value is incorrect\";\nconst isPromise = (val) => typeof val === \"object\" && val !== null && \"then\" in val && typeof val.then === \"function\";\nconst getNodeParents = (el) => {\n  let elem = el;\n  const els = [];\n  while (elem) {\n    els.unshift(elem);\n    elem = elem.parentNode;\n  }\n  return els;\n};\nconst getClosestParent = (groups, parents) => {\n  const reversedParents = [...parents].reverse();\n  for (let i = 0, len = reversedParents.length; i < len; ++i) {\n    const parent = reversedParents[i];\n    for (const key in groups) {\n      const group = groups[key];\n      if (group.groupElem === parent) {\n        return [key, group];\n      }\n    }\n  }\n  return null;\n};\nconst getClassList = (classList) => {\n  if (Array.isArray(classList)) {\n    return classList.filter((cls) => cls.length > 0);\n  }\n  if (typeof classList === \"string\" && classList.trim()) {\n    return [...classList.split(\" \").filter((cls) => cls.length > 0)];\n  }\n  return [];\n};\nconst isElement = (element) => {\n  return element instanceof Element || element instanceof HTMLDocument;\n};\nconst errorLabelCss = `.just-validate-error-label[data-tooltip=true]{position:fixed;padding:4px 8px;background:#423f3f;color:#fff;white-space:nowrap;z-index:10;border-radius:4px;transform:translateY(-5px)}.just-validate-error-label[data-tooltip=true]:before{content:'';width:0;height:0;border-left:solid 5px transparent;border-right:solid 5px transparent;border-bottom:solid 5px #423f3f;position:absolute;z-index:3;display:block;bottom:-5px;transform:rotate(180deg);left:calc(50% - 5px)}.just-validate-error-label[data-tooltip=true][data-direction=left]{transform:translateX(-5px)}.just-validate-error-label[data-tooltip=true][data-direction=left]:before{right:-7px;bottom:auto;left:auto;top:calc(50% - 2px);transform:rotate(90deg)}.just-validate-error-label[data-tooltip=true][data-direction=right]{transform:translateX(5px)}.just-validate-error-label[data-tooltip=true][data-direction=right]:before{right:auto;bottom:auto;left:-7px;top:calc(50% - 2px);transform:rotate(-90deg)}.just-validate-error-label[data-tooltip=true][data-direction=bottom]{transform:translateY(5px)}.just-validate-error-label[data-tooltip=true][data-direction=bottom]:before{right:auto;bottom:auto;left:calc(50% - 5px);top:-5px;transform:rotate(0)}`;\nconst TOOLTIP_ARROW_HEIGHT = 5;\nconst defaultGlobalConfig = {\n  errorFieldStyle: {\n    color: \"#b81111\",\n    border: \"1px solid #B81111\"\n  },\n  errorFieldCssClass: \"just-validate-error-field\",\n  successFieldCssClass: \"just-validate-success-field\",\n  errorLabelStyle: {\n    color: \"#b81111\"\n  },\n  errorLabelCssClass: \"just-validate-error-label\",\n  successLabelCssClass: \"just-validate-success-label\",\n  focusInvalidField: true,\n  lockForm: true,\n  testingMode: false,\n  validateBeforeSubmitting: false\n};\nclass JustValidate {\n  constructor(form, globalConfig, dictLocale) {\n    __publicField(this, \"form\", null);\n    __publicField(this, \"fields\", {});\n    __publicField(this, \"groupFields\", {});\n    __publicField(this, \"errors\", {});\n    __publicField(this, \"isValid\", false);\n    __publicField(this, \"isSubmitted\", false);\n    __publicField(this, \"globalConfig\", defaultGlobalConfig);\n    __publicField(this, \"errorLabels\", {});\n    __publicField(this, \"successLabels\", {});\n    __publicField(this, \"eventListeners\", []);\n    __publicField(this, \"dictLocale\", defaultDictionary);\n    __publicField(this, \"currentLocale\", \"en\");\n    __publicField(this, \"customStyleTags\", {});\n    __publicField(this, \"onSuccessCallback\");\n    __publicField(this, \"onFailCallback\");\n    __publicField(this, \"onValidateCallback\");\n    __publicField(this, \"tooltips\", []);\n    __publicField(this, \"lastScrollPosition\");\n    __publicField(this, \"isScrollTick\");\n    __publicField(this, \"fieldIds\", /* @__PURE__ */ new Map());\n    __publicField(this, \"getKeyByFieldSelector\", (field) => {\n      return this.fieldIds.get(field);\n    });\n    __publicField(this, \"getFieldSelectorByKey\", (key) => {\n      for (const [fieldSelector, k] of this.fieldIds) {\n        if (key === k) {\n          return fieldSelector;\n        }\n      }\n      return void 0;\n    });\n    __publicField(this, \"getCompatibleFields\", () => {\n      const fields = {};\n      Object.keys(this.fields).forEach((key) => {\n        let newKey = key;\n        const fieldSelector = this.getFieldSelectorByKey(key);\n        if (typeof fieldSelector === \"string\") {\n          newKey = fieldSelector;\n        }\n        fields[newKey] = { ...this.fields[key] };\n      });\n      return fields;\n    });\n    __publicField(this, \"setKeyByFieldSelector\", (field) => {\n      if (this.fieldIds.has(field)) {\n        return this.fieldIds.get(field);\n      }\n      const key = String(this.fieldIds.size + 1);\n      this.fieldIds.set(field, key);\n      return key;\n    });\n    __publicField(this, \"refreshAllTooltips\", () => {\n      this.tooltips.forEach((item) => {\n        item.refresh();\n      });\n    });\n    __publicField(this, \"handleDocumentScroll\", () => {\n      this.lastScrollPosition = window.scrollY;\n      if (!this.isScrollTick) {\n        window.requestAnimationFrame(() => {\n          this.refreshAllTooltips();\n          this.isScrollTick = false;\n        });\n        this.isScrollTick = true;\n      }\n    });\n    __publicField(this, \"formSubmitHandler\", (ev) => {\n      ev.preventDefault();\n      this.isSubmitted = true;\n      this.validateHandler(ev);\n    });\n    __publicField(this, \"handleFieldChange\", (target) => {\n      let foundKey;\n      for (const key in this.fields) {\n        const field = this.fields[key];\n        if (field.elem === target) {\n          foundKey = key;\n          break;\n        }\n      }\n      if (!foundKey) {\n        return;\n      }\n      this.fields[foundKey].touched = true;\n      this.validateField(foundKey, true);\n    });\n    __publicField(this, \"handleGroupChange\", (target) => {\n      let foundKey;\n      for (const key in this.groupFields) {\n        const group = this.groupFields[key];\n        if (group.elems.find((elem) => elem === target)) {\n          foundKey = key;\n          break;\n        }\n      }\n      if (!foundKey) {\n        return;\n      }\n      this.groupFields[foundKey].touched = true;\n      this.validateGroup(foundKey, true);\n    });\n    __publicField(this, \"handlerChange\", (ev) => {\n      if (!ev.target) {\n        return;\n      }\n      this.handleFieldChange(ev.target);\n      this.handleGroupChange(ev.target);\n      this.renderErrors();\n    });\n    this.initialize(form, globalConfig, dictLocale);\n  }\n  initialize(form, globalConfig, dictLocale) {\n    this.form = null;\n    this.errors = {};\n    this.isValid = false;\n    this.isSubmitted = false;\n    this.globalConfig = defaultGlobalConfig;\n    this.errorLabels = {};\n    this.successLabels = {};\n    this.eventListeners = [];\n    this.customStyleTags = {};\n    this.tooltips = [];\n    this.currentLocale = \"en\";\n    if (typeof form === \"string\") {\n      const elem = document.querySelector(form);\n      if (!elem) {\n        throw Error(\n          `Form with ${form} selector not found! Please check the form selector`\n        );\n      }\n      this.setForm(elem);\n    } else if (form instanceof HTMLFormElement) {\n      this.setForm(form);\n    } else {\n      throw Error(\n        `Form selector is not valid. Please specify a string selector or a DOM element.`\n      );\n    }\n    this.globalConfig = { ...defaultGlobalConfig, ...globalConfig };\n    if (dictLocale) {\n      this.dictLocale = [...dictLocale, ...defaultDictionary];\n    }\n    if (this.isTooltip()) {\n      const styleTag = document.createElement(\"style\");\n      styleTag.textContent = errorLabelCss;\n      this.customStyleTags[CustomStyleTagIds.Label] = document.head.appendChild(styleTag);\n      this.addListener(\"scroll\", document, this.handleDocumentScroll);\n    }\n  }\n  getLocalisedString(rule, ruleValue, customMsg) {\n    var _a;\n    const search = customMsg != null ? customMsg : rule;\n    let localisedStr = (_a = this.dictLocale.find((item) => item.key === search)) == null ? void 0 : _a.dict[this.currentLocale];\n    if (!localisedStr) {\n      if (customMsg) {\n        localisedStr = customMsg;\n      }\n    }\n    if (localisedStr && ruleValue !== void 0) {\n      switch (rule) {\n        case Rules.MaxLength:\n        case Rules.MinLength:\n        case Rules.MaxNumber:\n        case Rules.MinNumber:\n        case Rules.MinFilesCount:\n        case Rules.MaxFilesCount:\n          localisedStr = localisedStr.replace(\":value\", String(ruleValue));\n      }\n    }\n    return localisedStr || customMsg || DEFAULT_ERROR_FIELD_MESSAGE;\n  }\n  getFieldErrorMessage(fieldRule, elem) {\n    const msg = typeof fieldRule.errorMessage === \"function\" ? fieldRule.errorMessage(this.getElemValue(elem), this.fields) : fieldRule.errorMessage;\n    return this.getLocalisedString(fieldRule.rule, fieldRule.value, msg);\n  }\n  getFieldSuccessMessage(successMessage, elem) {\n    const msg = typeof successMessage === \"function\" ? successMessage(this.getElemValue(elem), this.fields) : successMessage;\n    return this.getLocalisedString(void 0, void 0, msg);\n  }\n  getGroupErrorMessage(groupRule) {\n    return this.getLocalisedString(\n      groupRule.rule,\n      void 0,\n      groupRule.errorMessage\n    );\n  }\n  getGroupSuccessMessage(groupRule) {\n    if (!groupRule.successMessage) {\n      return void 0;\n    }\n    return this.getLocalisedString(\n      void 0,\n      void 0,\n      groupRule.successMessage\n    );\n  }\n  setFieldInvalid(key, fieldRule) {\n    this.fields[key].isValid = false;\n    this.fields[key].errorMessage = this.getFieldErrorMessage(\n      fieldRule,\n      this.fields[key].elem\n    );\n  }\n  setFieldValid(key, successMessage) {\n    this.fields[key].isValid = true;\n    if (successMessage !== void 0) {\n      this.fields[key].successMessage = this.getFieldSuccessMessage(\n        successMessage,\n        this.fields[key].elem\n      );\n    }\n  }\n  setGroupInvalid(key, groupRule) {\n    this.groupFields[key].isValid = false;\n    this.groupFields[key].errorMessage = this.getGroupErrorMessage(groupRule);\n  }\n  setGroupValid(key, groupRule) {\n    this.groupFields[key].isValid = true;\n    this.groupFields[key].successMessage = this.getGroupSuccessMessage(groupRule);\n  }\n  getElemValue(elem) {\n    switch (elem.type) {\n      case \"checkbox\":\n        return elem.checked;\n      case \"file\":\n        return elem.files;\n      default:\n        return elem.value;\n    }\n  }\n  validateGroupRule(key, elems, groupRule) {\n    switch (groupRule.rule) {\n      case GroupRules.Required: {\n        if (elems.every((elem) => !elem.checked)) {\n          this.setGroupInvalid(key, groupRule);\n        } else {\n          this.setGroupValid(key, groupRule);\n        }\n      }\n    }\n  }\n  validateFieldRule(key, elem, fieldRule, afterInputChanged = false) {\n    const ruleValue = fieldRule.value;\n    const elemValue = this.getElemValue(elem);\n    if (fieldRule.plugin) {\n      const result = fieldRule.plugin(\n        elemValue,\n        this.getCompatibleFields()\n      );\n      if (!result) {\n        this.setFieldInvalid(key, fieldRule);\n      }\n      return;\n    }\n    switch (fieldRule.rule) {\n      case Rules.Required: {\n        if (isEmpty(elemValue)) {\n          this.setFieldInvalid(key, fieldRule);\n        }\n        break;\n      }\n      case Rules.Email: {\n        if (isInvalidOrEmptyString(elemValue)) {\n          break;\n        }\n        if (!isEmail(elemValue)) {\n          this.setFieldInvalid(key, fieldRule);\n        }\n        break;\n      }\n      case Rules.MaxLength: {\n        if (ruleValue === void 0) {\n          console.error(\n            `Value for ${fieldRule.rule} rule for [${key}] field is not defined. The field will be always invalid.`\n          );\n          this.setFieldInvalid(key, fieldRule);\n          break;\n        }\n        if (typeof ruleValue !== \"number\") {\n          console.error(\n            `Value for ${fieldRule.rule} rule for [${key}] should be a number. The field will be always invalid.`\n          );\n          this.setFieldInvalid(key, fieldRule);\n          break;\n        }\n        if (isInvalidOrEmptyString(elemValue)) {\n          break;\n        }\n        if (isLengthMoreThanMax(elemValue, ruleValue)) {\n          this.setFieldInvalid(key, fieldRule);\n        }\n        break;\n      }\n      case Rules.MinLength: {\n        if (ruleValue === void 0) {\n          console.error(\n            `Value for ${fieldRule.rule} rule for [${key}] field is not defined. The field will be always invalid.`\n          );\n          this.setFieldInvalid(key, fieldRule);\n          break;\n        }\n        if (typeof ruleValue !== \"number\") {\n          console.error(\n            `Value for ${fieldRule.rule} rule for [${key}] should be a number. The field will be always invalid.`\n          );\n          this.setFieldInvalid(key, fieldRule);\n          break;\n        }\n        if (isInvalidOrEmptyString(elemValue)) {\n          break;\n        }\n        if (isLengthLessThanMin(elemValue, ruleValue)) {\n          this.setFieldInvalid(key, fieldRule);\n        }\n        break;\n      }\n      case Rules.Password: {\n        if (isInvalidOrEmptyString(elemValue)) {\n          break;\n        }\n        if (!isPassword(elemValue)) {\n          this.setFieldInvalid(key, fieldRule);\n        }\n        break;\n      }\n      case Rules.StrongPassword: {\n        if (isInvalidOrEmptyString(elemValue)) {\n          break;\n        }\n        if (!isStrongPassword(elemValue)) {\n          this.setFieldInvalid(key, fieldRule);\n        }\n        break;\n      }\n      case Rules.Number: {\n        if (isInvalidOrEmptyString(elemValue)) {\n          break;\n        }\n        if (!isNumber(elemValue)) {\n          this.setFieldInvalid(key, fieldRule);\n        }\n        break;\n      }\n      case Rules.Integer: {\n        if (isInvalidOrEmptyString(elemValue)) {\n          break;\n        }\n        if (!isInteger(elemValue)) {\n          this.setFieldInvalid(key, fieldRule);\n        }\n        break;\n      }\n      case Rules.MaxNumber: {\n        if (ruleValue === void 0) {\n          console.error(\n            `Value for ${fieldRule.rule} rule for [${key}] field is not defined. The field will be always invalid.`\n          );\n          this.setFieldInvalid(key, fieldRule);\n          break;\n        }\n        if (typeof ruleValue !== \"number\") {\n          console.error(\n            `Value for ${fieldRule.rule} rule for [${key}] field should be a number. The field will be always invalid.`\n          );\n          this.setFieldInvalid(key, fieldRule);\n          break;\n        }\n        if (isInvalidOrEmptyString(elemValue)) {\n          break;\n        }\n        const num = +elemValue;\n        if (Number.isNaN(num) || isNumberMoreThanMax(num, ruleValue)) {\n          this.setFieldInvalid(key, fieldRule);\n        }\n        break;\n      }\n      case Rules.MinNumber: {\n        if (ruleValue === void 0) {\n          console.error(\n            `Value for ${fieldRule.rule} rule for [${key}] field is not defined. The field will be always invalid.`\n          );\n          this.setFieldInvalid(key, fieldRule);\n          break;\n        }\n        if (typeof ruleValue !== \"number\") {\n          console.error(\n            `Value for ${fieldRule.rule} rule for [${key}] field should be a number. The field will be always invalid.`\n          );\n          this.setFieldInvalid(key, fieldRule);\n          break;\n        }\n        if (isInvalidOrEmptyString(elemValue)) {\n          break;\n        }\n        const num = +elemValue;\n        if (Number.isNaN(num) || isNumberLessThanMin(num, ruleValue)) {\n          this.setFieldInvalid(key, fieldRule);\n        }\n        break;\n      }\n      case Rules.CustomRegexp: {\n        if (ruleValue === void 0) {\n          console.error(\n            `Value for ${fieldRule.rule} rule for [${key}] field is not defined. This field will be always invalid.`\n          );\n          this.setFieldInvalid(key, fieldRule);\n          return;\n        }\n        let regexp;\n        try {\n          regexp = new RegExp(ruleValue);\n        } catch (e) {\n          console.error(\n            `Value for ${fieldRule.rule} rule for [${key}] should be a valid regexp. This field will be always invalid.`\n          );\n          this.setFieldInvalid(key, fieldRule);\n          break;\n        }\n        const str = String(elemValue);\n        if (str !== \"\" && !regexp.test(str)) {\n          this.setFieldInvalid(key, fieldRule);\n        }\n        break;\n      }\n      case Rules.MinFilesCount: {\n        if (ruleValue === void 0) {\n          console.error(\n            `Value for ${fieldRule.rule} rule for [${key}] field is not defined. This field will be always invalid.`\n          );\n          this.setFieldInvalid(key, fieldRule);\n          break;\n        }\n        if (typeof ruleValue !== \"number\") {\n          console.error(\n            `Value for ${fieldRule.rule} rule for [${key}] field should be a number. The field will be always invalid.`\n          );\n          this.setFieldInvalid(key, fieldRule);\n          break;\n        }\n        if (Number.isFinite(elemValue == null ? void 0 : elemValue.length) && elemValue.length < ruleValue) {\n          this.setFieldInvalid(key, fieldRule);\n          break;\n        }\n        break;\n      }\n      case Rules.MaxFilesCount: {\n        if (ruleValue === void 0) {\n          console.error(\n            `Value for ${fieldRule.rule} rule for [${key}] field is not defined. This field will be always invalid.`\n          );\n          this.setFieldInvalid(key, fieldRule);\n          break;\n        }\n        if (typeof ruleValue !== \"number\") {\n          console.error(\n            `Value for ${fieldRule.rule} rule for [${key}] field should be a number. The field will be always invalid.`\n          );\n          this.setFieldInvalid(key, fieldRule);\n          break;\n        }\n        if (Number.isFinite(elemValue == null ? void 0 : elemValue.length) && elemValue.length > ruleValue) {\n          this.setFieldInvalid(key, fieldRule);\n          break;\n        }\n        break;\n      }\n      case Rules.Files: {\n        if (ruleValue === void 0) {\n          console.error(\n            `Value for ${fieldRule.rule} rule for [${key}] field is not defined. This field will be always invalid.`\n          );\n          this.setFieldInvalid(key, fieldRule);\n          return;\n        }\n        if (typeof ruleValue !== \"object\") {\n          console.error(\n            `Value for ${fieldRule.rule} rule for [${key}] field should be an object. This field will be always invalid.`\n          );\n          this.setFieldInvalid(key, fieldRule);\n          return;\n        }\n        const filesConfig = ruleValue.files;\n        if (typeof filesConfig !== \"object\") {\n          console.error(\n            `Value for ${fieldRule.rule} rule for [${key}] field should be an object with files array. This field will be always invalid.`\n          );\n          this.setFieldInvalid(key, fieldRule);\n          return;\n        }\n        const isFilePropsInvalid = (file, fileConfig) => {\n          const minSizeInvalid = Number.isFinite(fileConfig.minSize) && file.size < fileConfig.minSize;\n          const maxSizeInvalid = Number.isFinite(fileConfig.maxSize) && file.size > fileConfig.maxSize;\n          const nameInvalid = Array.isArray(fileConfig.names) && !fileConfig.names.includes(file.name);\n          const extInvalid = Array.isArray(fileConfig.extensions) && !fileConfig.extensions.includes(\n            file.name.split(\".\")[file.name.split(\".\").length - 1]\n          );\n          const typeInvalid = Array.isArray(fileConfig.types) && !fileConfig.types.includes(file.type);\n          return minSizeInvalid || maxSizeInvalid || nameInvalid || extInvalid || typeInvalid;\n        };\n        if (typeof elemValue === \"object\" && elemValue !== null) {\n          for (let fileIdx = 0, len = elemValue.length; fileIdx < len; ++fileIdx) {\n            const file = elemValue.item(fileIdx);\n            if (!file) {\n              this.setFieldInvalid(key, fieldRule);\n              break;\n            }\n            const filesInvalid = isFilePropsInvalid(file, filesConfig);\n            if (filesInvalid) {\n              this.setFieldInvalid(key, fieldRule);\n              break;\n            }\n          }\n        }\n        break;\n      }\n      default: {\n        if (typeof fieldRule.validator !== \"function\") {\n          console.error(\n            `Validator for custom rule for [${key}] field should be a function. This field will be always invalid.`\n          );\n          this.setFieldInvalid(key, fieldRule);\n          return;\n        }\n        const result = fieldRule.validator(\n          elemValue,\n          this.getCompatibleFields()\n        );\n        if (typeof result !== \"boolean\" && typeof result !== \"function\") {\n          console.error(\n            `Validator return value for [${key}] field should be boolean or function. It will be cast to boolean.`\n          );\n        }\n        if (typeof result === \"function\") {\n          if (afterInputChanged) {\n            this.fields[key].asyncCheckPending = true;\n          } else {\n            this.fields[key].asyncCheckPending = false;\n            const promise = result();\n            if (!isPromise(promise)) {\n              console.error(\n                `Validator function for custom rule for [${key}] field should return a Promise. This field will be always invalid.`\n              );\n              this.setFieldInvalid(key, fieldRule);\n              return;\n            }\n            return promise.then((resp) => {\n              if (!resp) {\n                this.setFieldInvalid(key, fieldRule);\n              }\n            }).catch(() => {\n              this.setFieldInvalid(key, fieldRule);\n            });\n          }\n        }\n        if (!result) {\n          this.setFieldInvalid(key, fieldRule);\n        }\n      }\n    }\n  }\n  isFormValid() {\n    let isValid = true;\n    for (let i = 0, len = Object.values(this.fields).length; i < len; ++i) {\n      const item = Object.values(this.fields)[i];\n      if (item.isValid === void 0) {\n        isValid = void 0;\n        break;\n      }\n      if (item.isValid === false) {\n        isValid = false;\n        break;\n      }\n    }\n    for (let i = 0, len = Object.values(this.groupFields).length; i < len; ++i) {\n      const item = Object.values(this.groupFields)[i];\n      if (item.isValid === void 0) {\n        isValid = void 0;\n        break;\n      }\n      if (item.isValid === false) {\n        isValid = false;\n        break;\n      }\n    }\n    return isValid;\n  }\n  validateField(key, afterInputChanged = false) {\n    var _a;\n    const field = this.fields[key];\n    field.isValid = true;\n    const promises = [];\n    [...field.rules].reverse().forEach((rule) => {\n      const res = this.validateFieldRule(\n        key,\n        field.elem,\n        rule,\n        afterInputChanged\n      );\n      if (isPromise(res)) {\n        promises.push(res);\n      }\n    });\n    if (field.isValid) {\n      this.setFieldValid(key, (_a = field.config) == null ? void 0 : _a.successMessage);\n    }\n    return Promise.allSettled(promises).finally(() => {\n      var _a2;\n      if (afterInputChanged) {\n        (_a2 = this.onValidateCallback) == null ? void 0 : _a2.call(this, {\n          isValid: this.isFormValid(),\n          isSubmitted: this.isSubmitted,\n          fields: this.getCompatibleFields(),\n          groups: { ...this.groupFields }\n        });\n      }\n    });\n  }\n  revalidateField(fieldSelector) {\n    if (typeof fieldSelector !== \"string\" && !isElement(fieldSelector)) {\n      throw Error(\n        `Field selector is not valid. Please specify a string selector or a valid DOM element.`\n      );\n    }\n    const key = this.getKeyByFieldSelector(fieldSelector);\n    if (!key || !this.fields[key]) {\n      console.error(`Field not found. Check the field selector.`);\n      return Promise.reject();\n    }\n    return new Promise((resolve) => {\n      this.validateField(key, true).finally(() => {\n        this.clearFieldStyle(key);\n        this.clearFieldLabel(key);\n        this.renderFieldError(key, true);\n        resolve(!!this.fields[key].isValid);\n      });\n    });\n  }\n  revalidateGroup(groupSelector) {\n    if (typeof groupSelector !== \"string\" && !isElement(groupSelector)) {\n      throw Error(\n        `Group selector is not valid. Please specify a string selector or a valid DOM element.`\n      );\n    }\n    const key = this.getKeyByFieldSelector(groupSelector);\n    if (!key || !this.groupFields[key]) {\n      console.error(`Group not found. Check the group selector.`);\n      return Promise.reject();\n    }\n    return new Promise((resolve) => {\n      this.validateGroup(key).finally(() => {\n        this.clearFieldLabel(key);\n        this.renderGroupError(key, true);\n        resolve(!!this.groupFields[key].isValid);\n      });\n    });\n  }\n  validateGroup(key, afterInputChanged = false) {\n    const group = this.groupFields[key];\n    const promises = [];\n    [...group.rules].reverse().forEach((rule) => {\n      const res = this.validateGroupRule(key, group.elems, rule);\n      if (isPromise(res)) {\n        promises.push(res);\n      }\n    });\n    return Promise.allSettled(promises).finally(() => {\n      var _a;\n      if (afterInputChanged) {\n        (_a = this.onValidateCallback) == null ? void 0 : _a.call(this, {\n          isValid: this.isFormValid(),\n          isSubmitted: this.isSubmitted,\n          fields: this.getCompatibleFields(),\n          groups: { ...this.groupFields }\n        });\n      }\n    });\n  }\n  focusInvalidField() {\n    for (const key in this.fields) {\n      const field = this.fields[key];\n      if (!field.isValid) {\n        setTimeout(() => field.elem.focus(), 0);\n        break;\n      }\n    }\n  }\n  afterSubmitValidation(forceRevalidation = false) {\n    this.renderErrors(forceRevalidation);\n    if (this.globalConfig.focusInvalidField) {\n      this.focusInvalidField();\n    }\n  }\n  validate(forceRevalidation = false) {\n    return new Promise((resolve) => {\n      const promises = [];\n      Object.keys(this.fields).forEach((key) => {\n        const promise = this.validateField(key);\n        if (isPromise(promise)) {\n          promises.push(promise);\n        }\n      });\n      Object.keys(this.groupFields).forEach((key) => {\n        const promise = this.validateGroup(key);\n        if (isPromise(promise)) {\n          promises.push(promise);\n        }\n      });\n      Promise.allSettled(promises).then(() => {\n        var _a;\n        this.afterSubmitValidation(forceRevalidation);\n        (_a = this.onValidateCallback) == null ? void 0 : _a.call(this, {\n          isValid: this.isFormValid(),\n          isSubmitted: this.isSubmitted,\n          fields: this.getCompatibleFields(),\n          groups: { ...this.groupFields }\n        });\n        resolve(!!promises.length);\n      });\n    });\n  }\n  revalidate() {\n    return new Promise((resolve) => {\n      this.validateHandler(void 0, true).finally(() => {\n        if (this.globalConfig.focusInvalidField) {\n          this.focusInvalidField();\n        }\n        resolve(this.isValid);\n      });\n    });\n  }\n  validateHandler(ev, forceRevalidation = false) {\n    if (this.globalConfig.lockForm) {\n      this.lockForm();\n    }\n    return this.validate(forceRevalidation).finally(() => {\n      var _a, _b;\n      if (this.globalConfig.lockForm) {\n        this.unlockForm();\n      }\n      if (this.isValid) {\n        (_a = this.onSuccessCallback) == null ? void 0 : _a.call(this, ev);\n      } else {\n        (_b = this.onFailCallback) == null ? void 0 : _b.call(this, this.getCompatibleFields(), this.groupFields);\n      }\n    });\n  }\n  setForm(form) {\n    this.form = form;\n    this.form.setAttribute(\"novalidate\", \"novalidate\");\n    this.removeListener(\"submit\", this.form, this.formSubmitHandler);\n    this.addListener(\"submit\", this.form, this.formSubmitHandler);\n  }\n  addListener(type, elem, handler) {\n    elem.addEventListener(type, handler);\n    this.eventListeners.push({ type, elem, func: handler });\n  }\n  removeListener(type, elem, handler) {\n    elem.removeEventListener(type, handler);\n    this.eventListeners = this.eventListeners.filter(\n      (item) => item.type !== type || item.elem !== elem\n    );\n  }\n  addField(fieldSelector, rules, config) {\n    if (typeof fieldSelector !== \"string\" && !isElement(fieldSelector)) {\n      throw Error(\n        `Field selector is not valid. Please specify a string selector or a valid DOM element.`\n      );\n    }\n    let elem;\n    if (typeof fieldSelector === \"string\") {\n      elem = this.form.querySelector(fieldSelector);\n    } else {\n      elem = fieldSelector;\n    }\n    if (!elem) {\n      throw Error(\n        `Field doesn't exist in the DOM! Please check the field selector.`\n      );\n    }\n    if (!Array.isArray(rules) || !rules.length) {\n      throw Error(\n        `Rules argument should be an array and should contain at least 1 element.`\n      );\n    }\n    rules.forEach((item) => {\n      if (!(\"rule\" in item || \"validator\" in item || \"plugin\" in item)) {\n        throw Error(\n          `Rules argument must contain at least one rule or validator property.`\n        );\n      }\n      if (!item.validator && !item.plugin && (!item.rule || !Object.values(Rules).includes(item.rule))) {\n        throw Error(\n          `Rule should be one of these types: ${Object.values(Rules).join(\n            \", \"\n          )}. Provided value: ${item.rule}`\n        );\n      }\n    });\n    const key = this.setKeyByFieldSelector(fieldSelector);\n    this.fields[key] = {\n      elem,\n      rules,\n      isValid: void 0,\n      touched: false,\n      config\n    };\n    this.setListeners(elem);\n    if (this.isSubmitted || this.globalConfig.validateBeforeSubmitting) {\n      this.validateField(key);\n    }\n    return this;\n  }\n  removeField(fieldSelector) {\n    if (typeof fieldSelector !== \"string\" && !isElement(fieldSelector)) {\n      throw Error(\n        `Field selector is not valid. Please specify a string selector or a valid DOM element.`\n      );\n    }\n    const key = this.getKeyByFieldSelector(fieldSelector);\n    if (!key || !this.fields[key]) {\n      console.error(`Field not found. Check the field selector.`);\n      return this;\n    }\n    const type = this.getListenerType(this.fields[key].elem.type);\n    this.removeListener(type, this.fields[key].elem, this.handlerChange);\n    this.clearErrors();\n    delete this.fields[key];\n    return this;\n  }\n  removeGroup(group) {\n    if (typeof group !== \"string\") {\n      throw Error(\n        `Group selector is not valid. Please specify a string selector.`\n      );\n    }\n    const key = this.getKeyByFieldSelector(group);\n    if (!key || !this.groupFields[key]) {\n      console.error(`Group not found. Check the group selector.`);\n      return this;\n    }\n    this.groupFields[key].elems.forEach((elem) => {\n      const type = this.getListenerType(elem.type);\n      this.removeListener(type, elem, this.handlerChange);\n    });\n    this.clearErrors();\n    delete this.groupFields[key];\n    return this;\n  }\n  addRequiredGroup(groupField, errorMessage, config, successMessage) {\n    if (typeof groupField !== \"string\" && !isElement(groupField)) {\n      throw Error(\n        `Group selector is not valid. Please specify a string selector or a valid DOM element.`\n      );\n    }\n    let elem;\n    if (typeof groupField === \"string\") {\n      elem = this.form.querySelector(groupField);\n    } else {\n      elem = groupField;\n    }\n    if (!elem) {\n      throw Error(`Group selector not found! Please check the group selector.`);\n    }\n    const inputs = elem.querySelectorAll(\"input\");\n    const childrenInputs = Array.from(inputs).filter((input) => {\n      const parent = getClosestParent(this.groupFields, getNodeParents(input));\n      if (!parent) {\n        return true;\n      }\n      return parent[1].elems.find((elem2) => elem2 !== input);\n    });\n    const key = this.setKeyByFieldSelector(groupField);\n    this.groupFields[key] = {\n      rules: [\n        {\n          rule: GroupRules.Required,\n          errorMessage,\n          successMessage\n        }\n      ],\n      groupElem: elem,\n      elems: childrenInputs,\n      touched: false,\n      isValid: void 0,\n      config\n    };\n    inputs.forEach((input) => {\n      this.setListeners(input);\n    });\n    return this;\n  }\n  getListenerType(type) {\n    switch (type) {\n      case \"checkbox\":\n      case \"select-one\":\n      case \"file\":\n      case \"radio\": {\n        return \"change\";\n      }\n      default: {\n        return \"input\";\n      }\n    }\n  }\n  setListeners(elem) {\n    const type = this.getListenerType(elem.type);\n    this.removeListener(type, elem, this.handlerChange);\n    this.addListener(type, elem, this.handlerChange);\n  }\n  clearFieldLabel(key) {\n    var _a, _b;\n    (_a = this.errorLabels[key]) == null ? void 0 : _a.remove();\n    (_b = this.successLabels[key]) == null ? void 0 : _b.remove();\n  }\n  clearFieldStyle(key) {\n    var _a, _b, _c, _d;\n    const field = this.fields[key];\n    const errorStyle = ((_a = field.config) == null ? void 0 : _a.errorFieldStyle) || this.globalConfig.errorFieldStyle;\n    Object.keys(errorStyle).forEach((key2) => {\n      field.elem.style[key2] = \"\";\n    });\n    const successStyle = ((_b = field.config) == null ? void 0 : _b.successFieldStyle) || this.globalConfig.successFieldStyle || {};\n    Object.keys(successStyle).forEach((key2) => {\n      field.elem.style[key2] = \"\";\n    });\n    field.elem.classList.remove(\n      ...getClassList(\n        ((_c = field.config) == null ? void 0 : _c.errorFieldCssClass) || this.globalConfig.errorFieldCssClass\n      ),\n      ...getClassList(\n        ((_d = field.config) == null ? void 0 : _d.successFieldCssClass) || this.globalConfig.successFieldCssClass\n      )\n    );\n  }\n  clearErrors() {\n    var _a, _b;\n    Object.keys(this.errorLabels).forEach(\n      (key) => this.errorLabels[key].remove()\n    );\n    Object.keys(this.successLabels).forEach(\n      (key) => this.successLabels[key].remove()\n    );\n    for (const key in this.fields) {\n      this.clearFieldStyle(key);\n    }\n    for (const key in this.groupFields) {\n      const group = this.groupFields[key];\n      const errorStyle = ((_a = group.config) == null ? void 0 : _a.errorFieldStyle) || this.globalConfig.errorFieldStyle;\n      Object.keys(errorStyle).forEach((key2) => {\n        group.elems.forEach((elem) => {\n          var _a2;\n          elem.style[key2] = \"\";\n          elem.classList.remove(\n            ...getClassList(\n              ((_a2 = group.config) == null ? void 0 : _a2.errorFieldCssClass) || this.globalConfig.errorFieldCssClass\n            )\n          );\n        });\n      });\n      const successStyle = ((_b = group.config) == null ? void 0 : _b.successFieldStyle) || this.globalConfig.successFieldStyle || {};\n      Object.keys(successStyle).forEach((key2) => {\n        group.elems.forEach((elem) => {\n          var _a2;\n          elem.style[key2] = \"\";\n          elem.classList.remove(\n            ...getClassList(\n              ((_a2 = group.config) == null ? void 0 : _a2.successFieldCssClass) || this.globalConfig.successFieldCssClass\n            )\n          );\n        });\n      });\n    }\n    this.tooltips = [];\n  }\n  isTooltip() {\n    return !!this.globalConfig.tooltip;\n  }\n  lockForm() {\n    const elems = this.form.querySelectorAll(\n      \"input, textarea, button, select\"\n    );\n    for (let i = 0, len = elems.length; i < len; ++i) {\n      elems[i].setAttribute(\n        \"data-just-validate-fallback-disabled\",\n        elems[i].disabled ? \"true\" : \"false\"\n      );\n      elems[i].setAttribute(\"disabled\", \"disabled\");\n      elems[i].style.pointerEvents = \"none\";\n      elems[i].style.webkitFilter = \"grayscale(100%)\";\n      elems[i].style.filter = \"grayscale(100%)\";\n    }\n  }\n  unlockForm() {\n    const elems = this.form.querySelectorAll(\n      \"input, textarea, button, select\"\n    );\n    for (let i = 0, len = elems.length; i < len; ++i) {\n      if (elems[i].getAttribute(\"data-just-validate-fallback-disabled\") !== \"true\") {\n        elems[i].removeAttribute(\"disabled\");\n      }\n      elems[i].style.pointerEvents = \"\";\n      elems[i].style.webkitFilter = \"\";\n      elems[i].style.filter = \"\";\n    }\n  }\n  renderTooltip(elem, errorLabel, position) {\n    var _a;\n    const { top, left, width, height } = elem.getBoundingClientRect();\n    const errorLabelRect = errorLabel.getBoundingClientRect();\n    const pos = position || ((_a = this.globalConfig.tooltip) == null ? void 0 : _a.position);\n    switch (pos) {\n      case \"left\": {\n        errorLabel.style.top = `${top + height / 2 - errorLabelRect.height / 2}px`;\n        errorLabel.style.left = `${left - errorLabelRect.width - TOOLTIP_ARROW_HEIGHT}px`;\n        break;\n      }\n      case \"top\": {\n        errorLabel.style.top = `${top - errorLabelRect.height - TOOLTIP_ARROW_HEIGHT}px`;\n        errorLabel.style.left = `${left + width / 2 - errorLabelRect.width / 2}px`;\n        break;\n      }\n      case \"right\": {\n        errorLabel.style.top = `${top + height / 2 - errorLabelRect.height / 2}px`;\n        errorLabel.style.left = `${left + width + TOOLTIP_ARROW_HEIGHT}px`;\n        break;\n      }\n      case \"bottom\": {\n        errorLabel.style.top = `${top + height + TOOLTIP_ARROW_HEIGHT}px`;\n        errorLabel.style.left = `${left + width / 2 - errorLabelRect.width / 2}px`;\n        break;\n      }\n    }\n    errorLabel.dataset.direction = pos;\n    const refresh = () => {\n      this.renderTooltip(elem, errorLabel, position);\n    };\n    return {\n      refresh\n    };\n  }\n  createErrorLabelElem(key, errorMessage, config) {\n    const errorLabel = document.createElement(\"div\");\n    errorLabel.innerHTML = errorMessage;\n    const customErrorLabelStyle = this.isTooltip() ? config == null ? void 0 : config.errorLabelStyle : (config == null ? void 0 : config.errorLabelStyle) || this.globalConfig.errorLabelStyle;\n    Object.assign(errorLabel.style, customErrorLabelStyle);\n    errorLabel.classList.add(\n      ...getClassList(\n        (config == null ? void 0 : config.errorLabelCssClass) || this.globalConfig.errorLabelCssClass\n      ),\n      \"just-validate-error-label\"\n    );\n    if (this.isTooltip()) {\n      errorLabel.dataset.tooltip = \"true\";\n    }\n    if (this.globalConfig.testingMode) {\n      errorLabel.dataset.testId = `error-label-${key}`;\n    }\n    this.errorLabels[key] = errorLabel;\n    return errorLabel;\n  }\n  createSuccessLabelElem(key, successMessage, config) {\n    if (successMessage === void 0) {\n      return null;\n    }\n    const successLabel = document.createElement(\"div\");\n    successLabel.innerHTML = successMessage;\n    const customSuccessLabelStyle = (config == null ? void 0 : config.successLabelStyle) || this.globalConfig.successLabelStyle;\n    Object.assign(successLabel.style, customSuccessLabelStyle);\n    successLabel.classList.add(\n      ...getClassList(\n        (config == null ? void 0 : config.successLabelCssClass) || this.globalConfig.successLabelCssClass\n      ),\n      \"just-validate-success-label\"\n    );\n    if (this.globalConfig.testingMode) {\n      successLabel.dataset.testId = `success-label-${key}`;\n    }\n    this.successLabels[key] = successLabel;\n    return successLabel;\n  }\n  renderErrorsContainer(label, errorsContainer) {\n    const container = errorsContainer || this.globalConfig.errorsContainer;\n    if (typeof container === \"string\") {\n      const elem = this.form.querySelector(container);\n      if (elem) {\n        elem.appendChild(label);\n        return true;\n      } else {\n        console.error(\n          `Error container with ${container} selector not found. Errors will be rendered as usual`\n        );\n      }\n    }\n    if (container instanceof Element) {\n      container.appendChild(label);\n      return true;\n    }\n    if (container !== void 0) {\n      console.error(\n        `Error container not found. It should be a string or existing Element. Errors will be rendered as usual`\n      );\n    }\n    return false;\n  }\n  renderGroupLabel(elem, label, errorsContainer, isSuccess) {\n    if (!isSuccess) {\n      const renderedInErrorsContainer = this.renderErrorsContainer(\n        label,\n        errorsContainer\n      );\n      if (renderedInErrorsContainer) {\n        return;\n      }\n    }\n    elem.appendChild(label);\n  }\n  renderFieldLabel(elem, label, errorsContainer, isSuccess) {\n    var _a, _b, _c, _d, _e, _f, _g;\n    if (!isSuccess) {\n      const renderedInErrorsContainer = this.renderErrorsContainer(\n        label,\n        errorsContainer\n      );\n      if (renderedInErrorsContainer) {\n        return;\n      }\n    }\n    if (elem.type === \"checkbox\" || elem.type === \"radio\") {\n      const labelElem = document.querySelector(\n        `label[for=\"${elem.getAttribute(\"id\")}\"]`\n      );\n      if (((_b = (_a = elem.parentElement) == null ? void 0 : _a.tagName) == null ? void 0 : _b.toLowerCase()) === \"label\") {\n        (_d = (_c = elem.parentElement) == null ? void 0 : _c.parentElement) == null ? void 0 : _d.appendChild(label);\n      } else if (labelElem) {\n        (_e = labelElem.parentElement) == null ? void 0 : _e.appendChild(label);\n      } else {\n        (_f = elem.parentElement) == null ? void 0 : _f.appendChild(label);\n      }\n    } else {\n      (_g = elem.parentElement) == null ? void 0 : _g.appendChild(label);\n    }\n  }\n  showLabels(fields, isError) {\n    Object.keys(fields).forEach((fieldName, i) => {\n      const error = fields[fieldName];\n      const key = this.getKeyByFieldSelector(fieldName);\n      if (!key || !this.fields[key]) {\n        console.error(`Field not found. Check the field selector.`);\n        return;\n      }\n      const field = this.fields[key];\n      field.isValid = !isError;\n      this.clearFieldStyle(key);\n      this.clearFieldLabel(key);\n      this.renderFieldError(key, false, error);\n      if (i === 0 && this.globalConfig.focusInvalidField) {\n        setTimeout(() => field.elem.focus(), 0);\n      }\n    });\n  }\n  showErrors(fields) {\n    if (typeof fields !== \"object\") {\n      throw Error(\n        \"[showErrors]: Errors should be an object with key: value format\"\n      );\n    }\n    this.showLabels(fields, true);\n  }\n  showSuccessLabels(fields) {\n    if (typeof fields !== \"object\") {\n      throw Error(\n        \"[showSuccessLabels]: Labels should be an object with key: value format\"\n      );\n    }\n    this.showLabels(fields, false);\n  }\n  renderFieldError(key, forced = false, message) {\n    var _a, _b, _c, _d, _e, _f;\n    const field = this.fields[key];\n    if (field.isValid === false) {\n      this.isValid = false;\n    }\n    if (field.isValid === void 0 || !forced && !this.isSubmitted && !field.touched && message === void 0) {\n      return;\n    }\n    if (field.isValid) {\n      if (!field.asyncCheckPending) {\n        const successLabel = this.createSuccessLabelElem(\n          key,\n          message !== void 0 ? message : field.successMessage,\n          field.config\n        );\n        if (successLabel) {\n          this.renderFieldLabel(\n            field.elem,\n            successLabel,\n            (_a = field.config) == null ? void 0 : _a.errorsContainer,\n            true\n          );\n        }\n        field.elem.classList.add(\n          ...getClassList(\n            ((_b = field.config) == null ? void 0 : _b.successFieldCssClass) || this.globalConfig.successFieldCssClass\n          )\n        );\n      }\n      return;\n    }\n    field.elem.classList.add(\n      ...getClassList(\n        ((_c = field.config) == null ? void 0 : _c.errorFieldCssClass) || this.globalConfig.errorFieldCssClass\n      )\n    );\n    const errorLabel = this.createErrorLabelElem(\n      key,\n      message !== void 0 ? message : field.errorMessage,\n      field.config\n    );\n    this.renderFieldLabel(\n      field.elem,\n      errorLabel,\n      (_d = field.config) == null ? void 0 : _d.errorsContainer\n    );\n    if (this.isTooltip()) {\n      this.tooltips.push(\n        this.renderTooltip(\n          field.elem,\n          errorLabel,\n          (_f = (_e = field.config) == null ? void 0 : _e.tooltip) == null ? void 0 : _f.position\n        )\n      );\n    }\n  }\n  renderGroupError(key, force = true) {\n    var _a, _b, _c, _d;\n    const group = this.groupFields[key];\n    if (group.isValid === false) {\n      this.isValid = false;\n    }\n    if (group.isValid === void 0 || !force && !this.isSubmitted && !group.touched) {\n      return;\n    }\n    if (group.isValid) {\n      group.elems.forEach((elem) => {\n        var _a2, _b2;\n        Object.assign(\n          elem.style,\n          ((_a2 = group.config) == null ? void 0 : _a2.successFieldStyle) || this.globalConfig.successFieldStyle\n        );\n        elem.classList.add(\n          ...getClassList(\n            ((_b2 = group.config) == null ? void 0 : _b2.successFieldCssClass) || this.globalConfig.successFieldCssClass\n          )\n        );\n      });\n      const successLabel = this.createSuccessLabelElem(\n        key,\n        group.successMessage,\n        group.config\n      );\n      if (successLabel) {\n        this.renderGroupLabel(\n          group.groupElem,\n          successLabel,\n          (_a = group.config) == null ? void 0 : _a.errorsContainer,\n          true\n        );\n      }\n      return;\n    }\n    this.isValid = false;\n    group.elems.forEach((elem) => {\n      var _a2, _b2;\n      Object.assign(\n        elem.style,\n        ((_a2 = group.config) == null ? void 0 : _a2.errorFieldStyle) || this.globalConfig.errorFieldStyle\n      );\n      elem.classList.add(\n        ...getClassList(\n          ((_b2 = group.config) == null ? void 0 : _b2.errorFieldCssClass) || this.globalConfig.errorFieldCssClass\n        )\n      );\n    });\n    const errorLabel = this.createErrorLabelElem(\n      key,\n      group.errorMessage,\n      group.config\n    );\n    this.renderGroupLabel(\n      group.groupElem,\n      errorLabel,\n      (_b = group.config) == null ? void 0 : _b.errorsContainer\n    );\n    if (this.isTooltip()) {\n      this.tooltips.push(\n        this.renderTooltip(\n          group.groupElem,\n          errorLabel,\n          (_d = (_c = group.config) == null ? void 0 : _c.tooltip) == null ? void 0 : _d.position\n        )\n      );\n    }\n  }\n  renderErrors(forceRevalidation = false) {\n    if (!this.isSubmitted && !forceRevalidation && !this.globalConfig.validateBeforeSubmitting) {\n      return;\n    }\n    this.clearErrors();\n    this.isValid = true;\n    for (const key in this.groupFields) {\n      this.renderGroupError(key);\n    }\n    for (const key in this.fields) {\n      this.renderFieldError(key);\n    }\n  }\n  destroy() {\n    this.eventListeners.forEach((event) => {\n      this.removeListener(event.type, event.elem, event.func);\n    });\n    Object.keys(this.customStyleTags).forEach((key) => {\n      this.customStyleTags[key].remove();\n    });\n    this.clearErrors();\n    if (this.globalConfig.lockForm) {\n      this.unlockForm();\n    }\n  }\n  refresh() {\n    this.destroy();\n    if (!this.form) {\n      console.error(\"Cannot initialize the library! Form is not defined\");\n    } else {\n      this.initialize(this.form, this.globalConfig);\n      Object.keys(this.fields).forEach((key) => {\n        const fieldSelector = this.getFieldSelectorByKey(key);\n        if (fieldSelector) {\n          this.addField(\n            fieldSelector,\n            [...this.fields[key].rules],\n            this.fields[key].config\n          );\n        }\n      });\n    }\n  }\n  setCurrentLocale(locale) {\n    if (typeof locale !== \"string\" && locale !== void 0) {\n      console.error(\"Current locale should be a string\");\n      return;\n    }\n    this.currentLocale = locale;\n    if (this.isSubmitted) {\n      this.validate();\n    }\n  }\n  onSuccess(callback) {\n    this.onSuccessCallback = callback;\n    return this;\n  }\n  onFail(callback) {\n    this.onFailCallback = callback;\n    return this;\n  }\n  onValidate(callback) {\n    this.onValidateCallback = callback;\n    return this;\n  }\n}\n\n\n\n//# sourceURL=webpack://invisibles23/./node_modules/just-validate/dist/just-validate.es.js?");

/***/ }),

/***/ "./node_modules/object-is/implementation.js":
/*!**************************************************!*\
  !*** ./node_modules/object-is/implementation.js ***!
  \**************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nvar numberIsNaN = function (value) {\n\treturn value !== value;\n};\n\nmodule.exports = function is(a, b) {\n\tif (a === 0 && b === 0) {\n\t\treturn 1 / a === 1 / b;\n\t}\n\tif (a === b) {\n\t\treturn true;\n\t}\n\tif (numberIsNaN(a) && numberIsNaN(b)) {\n\t\treturn true;\n\t}\n\treturn false;\n};\n\n\n\n//# sourceURL=webpack://invisibles23/./node_modules/object-is/implementation.js?");

/***/ }),

/***/ "./node_modules/object-is/index.js":
/*!*****************************************!*\
  !*** ./node_modules/object-is/index.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar define = __webpack_require__(/*! define-properties */ \"./node_modules/define-properties/index.js\");\nvar callBind = __webpack_require__(/*! call-bind */ \"./node_modules/call-bind/index.js\");\n\nvar implementation = __webpack_require__(/*! ./implementation */ \"./node_modules/object-is/implementation.js\");\nvar getPolyfill = __webpack_require__(/*! ./polyfill */ \"./node_modules/object-is/polyfill.js\");\nvar shim = __webpack_require__(/*! ./shim */ \"./node_modules/object-is/shim.js\");\n\nvar polyfill = callBind(getPolyfill(), Object);\n\ndefine(polyfill, {\n\tgetPolyfill: getPolyfill,\n\timplementation: implementation,\n\tshim: shim\n});\n\nmodule.exports = polyfill;\n\n\n//# sourceURL=webpack://invisibles23/./node_modules/object-is/index.js?");

/***/ }),

/***/ "./node_modules/object-is/polyfill.js":
/*!********************************************!*\
  !*** ./node_modules/object-is/polyfill.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar implementation = __webpack_require__(/*! ./implementation */ \"./node_modules/object-is/implementation.js\");\n\nmodule.exports = function getPolyfill() {\n\treturn typeof Object.is === 'function' ? Object.is : implementation;\n};\n\n\n//# sourceURL=webpack://invisibles23/./node_modules/object-is/polyfill.js?");

/***/ }),

/***/ "./node_modules/object-is/shim.js":
/*!****************************************!*\
  !*** ./node_modules/object-is/shim.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar getPolyfill = __webpack_require__(/*! ./polyfill */ \"./node_modules/object-is/polyfill.js\");\nvar define = __webpack_require__(/*! define-properties */ \"./node_modules/define-properties/index.js\");\n\nmodule.exports = function shimObjectIs() {\n\tvar polyfill = getPolyfill();\n\tdefine(Object, { is: polyfill }, {\n\t\tis: function testObjectIs() {\n\t\t\treturn Object.is !== polyfill;\n\t\t}\n\t});\n\treturn polyfill;\n};\n\n\n//# sourceURL=webpack://invisibles23/./node_modules/object-is/shim.js?");

/***/ }),

/***/ "./node_modules/object-keys/implementation.js":
/*!****************************************************!*\
  !*** ./node_modules/object-keys/implementation.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar keysShim;\nif (!Object.keys) {\n\t// modified from https://github.com/es-shims/es5-shim\n\tvar has = Object.prototype.hasOwnProperty;\n\tvar toStr = Object.prototype.toString;\n\tvar isArgs = __webpack_require__(/*! ./isArguments */ \"./node_modules/object-keys/isArguments.js\"); // eslint-disable-line global-require\n\tvar isEnumerable = Object.prototype.propertyIsEnumerable;\n\tvar hasDontEnumBug = !isEnumerable.call({ toString: null }, 'toString');\n\tvar hasProtoEnumBug = isEnumerable.call(function () {}, 'prototype');\n\tvar dontEnums = [\n\t\t'toString',\n\t\t'toLocaleString',\n\t\t'valueOf',\n\t\t'hasOwnProperty',\n\t\t'isPrototypeOf',\n\t\t'propertyIsEnumerable',\n\t\t'constructor'\n\t];\n\tvar equalsConstructorPrototype = function (o) {\n\t\tvar ctor = o.constructor;\n\t\treturn ctor && ctor.prototype === o;\n\t};\n\tvar excludedKeys = {\n\t\t$applicationCache: true,\n\t\t$console: true,\n\t\t$external: true,\n\t\t$frame: true,\n\t\t$frameElement: true,\n\t\t$frames: true,\n\t\t$innerHeight: true,\n\t\t$innerWidth: true,\n\t\t$onmozfullscreenchange: true,\n\t\t$onmozfullscreenerror: true,\n\t\t$outerHeight: true,\n\t\t$outerWidth: true,\n\t\t$pageXOffset: true,\n\t\t$pageYOffset: true,\n\t\t$parent: true,\n\t\t$scrollLeft: true,\n\t\t$scrollTop: true,\n\t\t$scrollX: true,\n\t\t$scrollY: true,\n\t\t$self: true,\n\t\t$webkitIndexedDB: true,\n\t\t$webkitStorageInfo: true,\n\t\t$window: true\n\t};\n\tvar hasAutomationEqualityBug = (function () {\n\t\t/* global window */\n\t\tif (typeof window === 'undefined') { return false; }\n\t\tfor (var k in window) {\n\t\t\ttry {\n\t\t\t\tif (!excludedKeys['$' + k] && has.call(window, k) && window[k] !== null && typeof window[k] === 'object') {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tequalsConstructorPrototype(window[k]);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}());\n\tvar equalsConstructorPrototypeIfNotBuggy = function (o) {\n\t\t/* global window */\n\t\tif (typeof window === 'undefined' || !hasAutomationEqualityBug) {\n\t\t\treturn equalsConstructorPrototype(o);\n\t\t}\n\t\ttry {\n\t\t\treturn equalsConstructorPrototype(o);\n\t\t} catch (e) {\n\t\t\treturn false;\n\t\t}\n\t};\n\n\tkeysShim = function keys(object) {\n\t\tvar isObject = object !== null && typeof object === 'object';\n\t\tvar isFunction = toStr.call(object) === '[object Function]';\n\t\tvar isArguments = isArgs(object);\n\t\tvar isString = isObject && toStr.call(object) === '[object String]';\n\t\tvar theKeys = [];\n\n\t\tif (!isObject && !isFunction && !isArguments) {\n\t\t\tthrow new TypeError('Object.keys called on a non-object');\n\t\t}\n\n\t\tvar skipProto = hasProtoEnumBug && isFunction;\n\t\tif (isString && object.length > 0 && !has.call(object, 0)) {\n\t\t\tfor (var i = 0; i < object.length; ++i) {\n\t\t\t\ttheKeys.push(String(i));\n\t\t\t}\n\t\t}\n\n\t\tif (isArguments && object.length > 0) {\n\t\t\tfor (var j = 0; j < object.length; ++j) {\n\t\t\t\ttheKeys.push(String(j));\n\t\t\t}\n\t\t} else {\n\t\t\tfor (var name in object) {\n\t\t\t\tif (!(skipProto && name === 'prototype') && has.call(object, name)) {\n\t\t\t\t\ttheKeys.push(String(name));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (hasDontEnumBug) {\n\t\t\tvar skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);\n\n\t\t\tfor (var k = 0; k < dontEnums.length; ++k) {\n\t\t\t\tif (!(skipConstructor && dontEnums[k] === 'constructor') && has.call(object, dontEnums[k])) {\n\t\t\t\t\ttheKeys.push(dontEnums[k]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn theKeys;\n\t};\n}\nmodule.exports = keysShim;\n\n\n//# sourceURL=webpack://invisibles23/./node_modules/object-keys/implementation.js?");

/***/ }),

/***/ "./node_modules/object-keys/index.js":
/*!*******************************************!*\
  !*** ./node_modules/object-keys/index.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar slice = Array.prototype.slice;\nvar isArgs = __webpack_require__(/*! ./isArguments */ \"./node_modules/object-keys/isArguments.js\");\n\nvar origKeys = Object.keys;\nvar keysShim = origKeys ? function keys(o) { return origKeys(o); } : __webpack_require__(/*! ./implementation */ \"./node_modules/object-keys/implementation.js\");\n\nvar originalKeys = Object.keys;\n\nkeysShim.shim = function shimObjectKeys() {\n\tif (Object.keys) {\n\t\tvar keysWorksWithArguments = (function () {\n\t\t\t// Safari 5.0 bug\n\t\t\tvar args = Object.keys(arguments);\n\t\t\treturn args && args.length === arguments.length;\n\t\t}(1, 2));\n\t\tif (!keysWorksWithArguments) {\n\t\t\tObject.keys = function keys(object) { // eslint-disable-line func-name-matching\n\t\t\t\tif (isArgs(object)) {\n\t\t\t\t\treturn originalKeys(slice.call(object));\n\t\t\t\t}\n\t\t\t\treturn originalKeys(object);\n\t\t\t};\n\t\t}\n\t} else {\n\t\tObject.keys = keysShim;\n\t}\n\treturn Object.keys || keysShim;\n};\n\nmodule.exports = keysShim;\n\n\n//# sourceURL=webpack://invisibles23/./node_modules/object-keys/index.js?");

/***/ }),

/***/ "./node_modules/object-keys/isArguments.js":
/*!*************************************************!*\
  !*** ./node_modules/object-keys/isArguments.js ***!
  \*************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nvar toStr = Object.prototype.toString;\n\nmodule.exports = function isArguments(value) {\n\tvar str = toStr.call(value);\n\tvar isArgs = str === '[object Arguments]';\n\tif (!isArgs) {\n\t\tisArgs = str !== '[object Array]' &&\n\t\t\tvalue !== null &&\n\t\t\ttypeof value === 'object' &&\n\t\t\ttypeof value.length === 'number' &&\n\t\t\tvalue.length >= 0 &&\n\t\t\ttoStr.call(value.callee) === '[object Function]';\n\t}\n\treturn isArgs;\n};\n\n\n//# sourceURL=webpack://invisibles23/./node_modules/object-keys/isArguments.js?");

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/***/ ((module) => {

eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n//# sourceURL=webpack://invisibles23/./node_modules/process/browser.js?");

/***/ }),

/***/ "./node_modules/querystring/decode.js":
/*!********************************************!*\
  !*** ./node_modules/querystring/decode.js ***!
  \********************************************/
/***/ ((module) => {

"use strict";
eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n// If obj.hasOwnProperty has been overridden, then calling\n// obj.hasOwnProperty(prop) will break.\n// See: https://github.com/joyent/node/issues/1707\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nmodule.exports = function(qs, sep, eq, options) {\n  sep = sep || '&';\n  eq = eq || '=';\n  var obj = {};\n\n  if (typeof qs !== 'string' || qs.length === 0) {\n    return obj;\n  }\n\n  var regexp = /\\+/g;\n  qs = qs.split(sep);\n\n  var maxKeys = 1000;\n  if (options && typeof options.maxKeys === 'number') {\n    maxKeys = options.maxKeys;\n  }\n\n  var len = qs.length;\n  // maxKeys <= 0 means that we should not limit keys count\n  if (maxKeys > 0 && len > maxKeys) {\n    len = maxKeys;\n  }\n\n  for (var i = 0; i < len; ++i) {\n    var x = qs[i].replace(regexp, '%20'),\n        idx = x.indexOf(eq),\n        kstr, vstr, k, v;\n\n    if (idx >= 0) {\n      kstr = x.substr(0, idx);\n      vstr = x.substr(idx + 1);\n    } else {\n      kstr = x;\n      vstr = '';\n    }\n\n    k = decodeURIComponent(kstr);\n    v = decodeURIComponent(vstr);\n\n    if (!hasOwnProperty(obj, k)) {\n      obj[k] = v;\n    } else if (Array.isArray(obj[k])) {\n      obj[k].push(v);\n    } else {\n      obj[k] = [obj[k], v];\n    }\n  }\n\n  return obj;\n};\n\n\n//# sourceURL=webpack://invisibles23/./node_modules/querystring/decode.js?");

/***/ }),

/***/ "./node_modules/querystring/encode.js":
/*!********************************************!*\
  !*** ./node_modules/querystring/encode.js ***!
  \********************************************/
/***/ ((module) => {

"use strict";
eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\nvar stringifyPrimitive = function(v) {\n  switch (typeof v) {\n    case 'string':\n      return v;\n\n    case 'boolean':\n      return v ? 'true' : 'false';\n\n    case 'number':\n      return isFinite(v) ? v : '';\n\n    default:\n      return '';\n  }\n};\n\nmodule.exports = function(obj, sep, eq, name) {\n  sep = sep || '&';\n  eq = eq || '=';\n  if (obj === null) {\n    obj = undefined;\n  }\n\n  if (typeof obj === 'object') {\n    return Object.keys(obj).map(function(k) {\n      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;\n      if (Array.isArray(obj[k])) {\n        return obj[k].map(function(v) {\n          return ks + encodeURIComponent(stringifyPrimitive(v));\n        }).join(sep);\n      } else {\n        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));\n      }\n    }).join(sep);\n\n  }\n\n  if (!name) return '';\n  return encodeURIComponent(stringifyPrimitive(name)) + eq +\n         encodeURIComponent(stringifyPrimitive(obj));\n};\n\n\n//# sourceURL=webpack://invisibles23/./node_modules/querystring/encode.js?");

/***/ }),

/***/ "./node_modules/querystring/index.js":
/*!*******************************************!*\
  !*** ./node_modules/querystring/index.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nexports.decode = exports.parse = __webpack_require__(/*! ./decode */ \"./node_modules/querystring/decode.js\");\nexports.encode = exports.stringify = __webpack_require__(/*! ./encode */ \"./node_modules/querystring/encode.js\");\n\n\n//# sourceURL=webpack://invisibles23/./node_modules/querystring/index.js?");

/***/ }),

/***/ "./node_modules/superagent/lib/agent-base.js":
/*!***************************************************!*\
  !*** ./node_modules/superagent/lib/agent-base.js ***!
  \***************************************************/
/***/ ((module) => {

eval("function Agent() {\n  this._defaults = [];\n}\n\n[\"use\", \"on\", \"once\", \"set\", \"query\", \"type\", \"accept\", \"auth\", \"withCredentials\", \"sortQuery\", \"retry\", \"ok\", \"redirects\",\n \"timeout\", \"buffer\", \"serialize\", \"parse\", \"ca\", \"key\", \"pfx\", \"cert\"].forEach(function(fn) {\n  /** Default setting for all requests from this agent */\n  Agent.prototype[fn] = function(/*varargs*/) {\n    this._defaults.push({fn:fn, arguments:arguments});\n    return this;\n  }\n});\n\nAgent.prototype._setDefaults = function(req) {\n    this._defaults.forEach(function(def) {\n      req[def.fn].apply(req, def.arguments);\n    });\n};\n\nmodule.exports = Agent;\n\n\n//# sourceURL=webpack://invisibles23/./node_modules/superagent/lib/agent-base.js?");

/***/ }),

/***/ "./node_modules/superagent/lib/client.js":
/*!***********************************************!*\
  !*** ./node_modules/superagent/lib/client.js ***!
  \***********************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/console-browserify/index.js */ \"./node_modules/console-browserify/index.js\");\n/**\n * Root reference for iframes.\n */\n\nvar root;\nif (typeof window !== 'undefined') { // Browser window\n  root = window;\n} else if (typeof self !== 'undefined') { // Web Worker\n  root = self;\n} else { // Other environments\n  console.warn(\"Using browser-only version of superagent in non-browser environment\");\n  root = this;\n}\n\nvar Emitter = __webpack_require__(/*! component-emitter */ \"./node_modules/component-emitter/index.js\");\nvar RequestBase = __webpack_require__(/*! ./request-base */ \"./node_modules/superagent/lib/request-base.js\");\nvar isObject = __webpack_require__(/*! ./is-object */ \"./node_modules/superagent/lib/is-object.js\");\nvar ResponseBase = __webpack_require__(/*! ./response-base */ \"./node_modules/superagent/lib/response-base.js\");\nvar Agent = __webpack_require__(/*! ./agent-base */ \"./node_modules/superagent/lib/agent-base.js\");\n\n/**\n * Noop.\n */\n\nfunction noop(){};\n\n/**\n * Expose `request`.\n */\n\nvar request = exports = module.exports = function(method, url) {\n  // callback\n  if ('function' == typeof url) {\n    return new exports.Request('GET', method).end(url);\n  }\n\n  // url first\n  if (1 == arguments.length) {\n    return new exports.Request('GET', method);\n  }\n\n  return new exports.Request(method, url);\n}\n\nexports.Request = Request;\n\n/**\n * Determine XHR.\n */\n\nrequest.getXHR = function () {\n  if (root.XMLHttpRequest\n      && (!root.location || 'file:' != root.location.protocol\n          || !root.ActiveXObject)) {\n    return new XMLHttpRequest;\n  } else {\n    try { return new ActiveXObject('Microsoft.XMLHTTP'); } catch(e) {}\n    try { return new ActiveXObject('Msxml2.XMLHTTP.6.0'); } catch(e) {}\n    try { return new ActiveXObject('Msxml2.XMLHTTP.3.0'); } catch(e) {}\n    try { return new ActiveXObject('Msxml2.XMLHTTP'); } catch(e) {}\n  }\n  throw Error(\"Browser-only version of superagent could not find XHR\");\n};\n\n/**\n * Removes leading and trailing whitespace, added to support IE.\n *\n * @param {String} s\n * @return {String}\n * @api private\n */\n\nvar trim = ''.trim\n  ? function(s) { return s.trim(); }\n  : function(s) { return s.replace(/(^\\s*|\\s*$)/g, ''); };\n\n/**\n * Serialize the given `obj`.\n *\n * @param {Object} obj\n * @return {String}\n * @api private\n */\n\nfunction serialize(obj) {\n  if (!isObject(obj)) return obj;\n  var pairs = [];\n  for (var key in obj) {\n    pushEncodedKeyValuePair(pairs, key, obj[key]);\n  }\n  return pairs.join('&');\n}\n\n/**\n * Helps 'serialize' with serializing arrays.\n * Mutates the pairs array.\n *\n * @param {Array} pairs\n * @param {String} key\n * @param {Mixed} val\n */\n\nfunction pushEncodedKeyValuePair(pairs, key, val) {\n  if (val != null) {\n    if (Array.isArray(val)) {\n      val.forEach(function(v) {\n        pushEncodedKeyValuePair(pairs, key, v);\n      });\n    } else if (isObject(val)) {\n      for(var subkey in val) {\n        pushEncodedKeyValuePair(pairs, key + '[' + subkey + ']', val[subkey]);\n      }\n    } else {\n      pairs.push(encodeURIComponent(key)\n        + '=' + encodeURIComponent(val));\n    }\n  } else if (val === null) {\n    pairs.push(encodeURIComponent(key));\n  }\n}\n\n/**\n * Expose serialization method.\n */\n\nrequest.serializeObject = serialize;\n\n/**\n  * Parse the given x-www-form-urlencoded `str`.\n  *\n  * @param {String} str\n  * @return {Object}\n  * @api private\n  */\n\nfunction parseString(str) {\n  var obj = {};\n  var pairs = str.split('&');\n  var pair;\n  var pos;\n\n  for (var i = 0, len = pairs.length; i < len; ++i) {\n    pair = pairs[i];\n    pos = pair.indexOf('=');\n    if (pos == -1) {\n      obj[decodeURIComponent(pair)] = '';\n    } else {\n      obj[decodeURIComponent(pair.slice(0, pos))] =\n        decodeURIComponent(pair.slice(pos + 1));\n    }\n  }\n\n  return obj;\n}\n\n/**\n * Expose parser.\n */\n\nrequest.parseString = parseString;\n\n/**\n * Default MIME type map.\n *\n *     superagent.types.xml = 'application/xml';\n *\n */\n\nrequest.types = {\n  html: 'text/html',\n  json: 'application/json',\n  xml: 'text/xml',\n  urlencoded: 'application/x-www-form-urlencoded',\n  'form': 'application/x-www-form-urlencoded',\n  'form-data': 'application/x-www-form-urlencoded'\n};\n\n/**\n * Default serialization map.\n *\n *     superagent.serialize['application/xml'] = function(obj){\n *       return 'generated xml here';\n *     };\n *\n */\n\nrequest.serialize = {\n  'application/x-www-form-urlencoded': serialize,\n  'application/json': JSON.stringify,\n};\n\n/**\n  * Default parsers.\n  *\n  *     superagent.parse['application/xml'] = function(str){\n  *       return { object parsed from str };\n  *     };\n  *\n  */\n\nrequest.parse = {\n  'application/x-www-form-urlencoded': parseString,\n  'application/json': JSON.parse,\n};\n\n/**\n * Parse the given header `str` into\n * an object containing the mapped fields.\n *\n * @param {String} str\n * @return {Object}\n * @api private\n */\n\nfunction parseHeader(str) {\n  var lines = str.split(/\\r?\\n/);\n  var fields = {};\n  var index;\n  var line;\n  var field;\n  var val;\n\n  for (var i = 0, len = lines.length; i < len; ++i) {\n    line = lines[i];\n    index = line.indexOf(':');\n    if (index === -1) { // could be empty line, just skip it\n      continue;\n    }\n    field = line.slice(0, index).toLowerCase();\n    val = trim(line.slice(index + 1));\n    fields[field] = val;\n  }\n\n  return fields;\n}\n\n/**\n * Check if `mime` is json or has +json structured syntax suffix.\n *\n * @param {String} mime\n * @return {Boolean}\n * @api private\n */\n\nfunction isJSON(mime) {\n  return /[\\/+]json\\b/.test(mime);\n}\n\n/**\n * Initialize a new `Response` with the given `xhr`.\n *\n *  - set flags (.ok, .error, etc)\n *  - parse header\n *\n * Examples:\n *\n *  Aliasing `superagent` as `request` is nice:\n *\n *      request = superagent;\n *\n *  We can use the promise-like API, or pass callbacks:\n *\n *      request.get('/').end(function(res){});\n *      request.get('/', function(res){});\n *\n *  Sending data can be chained:\n *\n *      request\n *        .post('/user')\n *        .send({ name: 'tj' })\n *        .end(function(res){});\n *\n *  Or passed to `.send()`:\n *\n *      request\n *        .post('/user')\n *        .send({ name: 'tj' }, function(res){});\n *\n *  Or passed to `.post()`:\n *\n *      request\n *        .post('/user', { name: 'tj' })\n *        .end(function(res){});\n *\n * Or further reduced to a single call for simple cases:\n *\n *      request\n *        .post('/user', { name: 'tj' }, function(res){});\n *\n * @param {XMLHTTPRequest} xhr\n * @param {Object} options\n * @api private\n */\n\nfunction Response(req) {\n  this.req = req;\n  this.xhr = this.req.xhr;\n  // responseText is accessible only if responseType is '' or 'text' and on older browsers\n  this.text = ((this.req.method !='HEAD' && (this.xhr.responseType === '' || this.xhr.responseType === 'text')) || typeof this.xhr.responseType === 'undefined')\n     ? this.xhr.responseText\n     : null;\n  this.statusText = this.req.xhr.statusText;\n  var status = this.xhr.status;\n  // handle IE9 bug: http://stackoverflow.com/questions/10046972/msie-returns-status-code-of-1223-for-ajax-request\n  if (status === 1223) {\n    status = 204;\n  }\n  this._setStatusProperties(status);\n  this.header = this.headers = parseHeader(this.xhr.getAllResponseHeaders());\n  // getAllResponseHeaders sometimes falsely returns \"\" for CORS requests, but\n  // getResponseHeader still works. so we get content-type even if getting\n  // other headers fails.\n  this.header['content-type'] = this.xhr.getResponseHeader('content-type');\n  this._setHeaderProperties(this.header);\n\n  if (null === this.text && req._responseType) {\n    this.body = this.xhr.response;\n  } else {\n    this.body = this.req.method != 'HEAD'\n      ? this._parseBody(this.text ? this.text : this.xhr.response)\n      : null;\n  }\n}\n\nResponseBase(Response.prototype);\n\n/**\n * Parse the given body `str`.\n *\n * Used for auto-parsing of bodies. Parsers\n * are defined on the `superagent.parse` object.\n *\n * @param {String} str\n * @return {Mixed}\n * @api private\n */\n\nResponse.prototype._parseBody = function(str) {\n  var parse = request.parse[this.type];\n  if (this.req._parser) {\n    return this.req._parser(this, str);\n  }\n  if (!parse && isJSON(this.type)) {\n    parse = request.parse['application/json'];\n  }\n  return parse && str && (str.length || str instanceof Object)\n    ? parse(str)\n    : null;\n};\n\n/**\n * Return an `Error` representative of this response.\n *\n * @return {Error}\n * @api public\n */\n\nResponse.prototype.toError = function(){\n  var req = this.req;\n  var method = req.method;\n  var url = req.url;\n\n  var msg = 'cannot ' + method + ' ' + url + ' (' + this.status + ')';\n  var err = new Error(msg);\n  err.status = this.status;\n  err.method = method;\n  err.url = url;\n\n  return err;\n};\n\n/**\n * Expose `Response`.\n */\n\nrequest.Response = Response;\n\n/**\n * Initialize a new `Request` with the given `method` and `url`.\n *\n * @param {String} method\n * @param {String} url\n * @api public\n */\n\nfunction Request(method, url) {\n  var self = this;\n  this._query = this._query || [];\n  this.method = method;\n  this.url = url;\n  this.header = {}; // preserves header name case\n  this._header = {}; // coerces header names to lowercase\n  this.on('end', function(){\n    var err = null;\n    var res = null;\n\n    try {\n      res = new Response(self);\n    } catch(e) {\n      err = new Error('Parser is unable to parse the response');\n      err.parse = true;\n      err.original = e;\n      // issue #675: return the raw response if the response parsing fails\n      if (self.xhr) {\n        // ie9 doesn't have 'response' property\n        err.rawResponse = typeof self.xhr.responseType == 'undefined' ? self.xhr.responseText : self.xhr.response;\n        // issue #876: return the http status code if the response parsing fails\n        err.status = self.xhr.status ? self.xhr.status : null;\n        err.statusCode = err.status; // backwards-compat only\n      } else {\n        err.rawResponse = null;\n        err.status = null;\n      }\n\n      return self.callback(err);\n    }\n\n    self.emit('response', res);\n\n    var new_err;\n    try {\n      if (!self._isResponseOK(res)) {\n        new_err = new Error(res.statusText || 'Unsuccessful HTTP response');\n      }\n    } catch(custom_err) {\n      new_err = custom_err; // ok() callback can throw\n    }\n\n    // #1000 don't catch errors from the callback to avoid double calling it\n    if (new_err) {\n      new_err.original = err;\n      new_err.response = res;\n      new_err.status = res.status;\n      self.callback(new_err, res);\n    } else {\n      self.callback(null, res);\n    }\n  });\n}\n\n/**\n * Mixin `Emitter` and `RequestBase`.\n */\n\nEmitter(Request.prototype);\nRequestBase(Request.prototype);\n\n/**\n * Set Content-Type to `type`, mapping values from `request.types`.\n *\n * Examples:\n *\n *      superagent.types.xml = 'application/xml';\n *\n *      request.post('/')\n *        .type('xml')\n *        .send(xmlstring)\n *        .end(callback);\n *\n *      request.post('/')\n *        .type('application/xml')\n *        .send(xmlstring)\n *        .end(callback);\n *\n * @param {String} type\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.type = function(type){\n  this.set('Content-Type', request.types[type] || type);\n  return this;\n};\n\n/**\n * Set Accept to `type`, mapping values from `request.types`.\n *\n * Examples:\n *\n *      superagent.types.json = 'application/json';\n *\n *      request.get('/agent')\n *        .accept('json')\n *        .end(callback);\n *\n *      request.get('/agent')\n *        .accept('application/json')\n *        .end(callback);\n *\n * @param {String} accept\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.accept = function(type){\n  this.set('Accept', request.types[type] || type);\n  return this;\n};\n\n/**\n * Set Authorization field value with `user` and `pass`.\n *\n * @param {String} user\n * @param {String} [pass] optional in case of using 'bearer' as type\n * @param {Object} options with 'type' property 'auto', 'basic' or 'bearer' (default 'basic')\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.auth = function(user, pass, options){\n  if (1 === arguments.length) pass = '';\n  if (typeof pass === 'object' && pass !== null) { // pass is optional and can be replaced with options\n    options = pass;\n    pass = '';\n  }\n  if (!options) {\n    options = {\n      type: 'function' === typeof btoa ? 'basic' : 'auto',\n    };\n  }\n\n  var encoder = function(string) {\n    if ('function' === typeof btoa) {\n      return btoa(string);\n    }\n    throw new Error('Cannot use basic auth, btoa is not a function');\n  };\n\n  return this._auth(user, pass, options, encoder);\n};\n\n/**\n * Add query-string `val`.\n *\n * Examples:\n *\n *   request.get('/shoes')\n *     .query('size=10')\n *     .query({ color: 'blue' })\n *\n * @param {Object|String} val\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.query = function(val){\n  if ('string' != typeof val) val = serialize(val);\n  if (val) this._query.push(val);\n  return this;\n};\n\n/**\n * Queue the given `file` as an attachment to the specified `field`,\n * with optional `options` (or filename).\n *\n * ``` js\n * request.post('/upload')\n *   .attach('content', new Blob(['<a id=\"a\"><b id=\"b\">hey!</b></a>'], { type: \"text/html\"}))\n *   .end(callback);\n * ```\n *\n * @param {String} field\n * @param {Blob|File} file\n * @param {String|Object} options\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.attach = function(field, file, options){\n  if (file) {\n    if (this._data) {\n      throw Error(\"superagent can't mix .send() and .attach()\");\n    }\n\n    this._getFormData().append(field, file, options || file.name);\n  }\n  return this;\n};\n\nRequest.prototype._getFormData = function(){\n  if (!this._formData) {\n    this._formData = new root.FormData();\n  }\n  return this._formData;\n};\n\n/**\n * Invoke the callback with `err` and `res`\n * and handle arity check.\n *\n * @param {Error} err\n * @param {Response} res\n * @api private\n */\n\nRequest.prototype.callback = function(err, res){\n  if (this._shouldRetry(err, res)) {\n    return this._retry();\n  }\n\n  var fn = this._callback;\n  this.clearTimeout();\n\n  if (err) {\n    if (this._maxRetries) err.retries = this._retries - 1;\n    this.emit('error', err);\n  }\n\n  fn(err, res);\n};\n\n/**\n * Invoke callback with x-domain error.\n *\n * @api private\n */\n\nRequest.prototype.crossDomainError = function(){\n  var err = new Error('Request has been terminated\\nPossible causes: the network is offline, Origin is not allowed by Access-Control-Allow-Origin, the page is being unloaded, etc.');\n  err.crossDomain = true;\n\n  err.status = this.status;\n  err.method = this.method;\n  err.url = this.url;\n\n  this.callback(err);\n};\n\n// This only warns, because the request is still likely to work\nRequest.prototype.buffer = Request.prototype.ca = Request.prototype.agent = function(){\n  console.warn(\"This is not supported in browser version of superagent\");\n  return this;\n};\n\n// This throws, because it can't send/receive data as expected\nRequest.prototype.pipe = Request.prototype.write = function(){\n  throw Error(\"Streaming is not supported in browser version of superagent\");\n};\n\n/**\n * Check if `obj` is a host object,\n * we don't want to serialize these :)\n *\n * @param {Object} obj\n * @return {Boolean}\n * @api private\n */\nRequest.prototype._isHost = function _isHost(obj) {\n  // Native objects stringify to [object File], [object Blob], [object FormData], etc.\n  return obj && 'object' === typeof obj && !Array.isArray(obj) && Object.prototype.toString.call(obj) !== '[object Object]';\n}\n\n/**\n * Initiate request, invoking callback `fn(res)`\n * with an instanceof `Response`.\n *\n * @param {Function} fn\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.end = function(fn){\n  if (this._endCalled) {\n    console.warn(\"Warning: .end() was called twice. This is not supported in superagent\");\n  }\n  this._endCalled = true;\n\n  // store callback\n  this._callback = fn || noop;\n\n  // querystring\n  this._finalizeQueryString();\n\n  return this._end();\n};\n\nRequest.prototype._end = function() {\n  var self = this;\n  var xhr = (this.xhr = request.getXHR());\n  var data = this._formData || this._data;\n\n  this._setTimeouts();\n\n  // state change\n  xhr.onreadystatechange = function(){\n    var readyState = xhr.readyState;\n    if (readyState >= 2 && self._responseTimeoutTimer) {\n      clearTimeout(self._responseTimeoutTimer);\n    }\n    if (4 != readyState) {\n      return;\n    }\n\n    // In IE9, reads to any property (e.g. status) off of an aborted XHR will\n    // result in the error \"Could not complete the operation due to error c00c023f\"\n    var status;\n    try { status = xhr.status } catch(e) { status = 0; }\n\n    if (!status) {\n      if (self.timedout || self._aborted) return;\n      return self.crossDomainError();\n    }\n    self.emit('end');\n  };\n\n  // progress\n  var handleProgress = function(direction, e) {\n    if (e.total > 0) {\n      e.percent = e.loaded / e.total * 100;\n    }\n    e.direction = direction;\n    self.emit('progress', e);\n  };\n  if (this.hasListeners('progress')) {\n    try {\n      xhr.onprogress = handleProgress.bind(null, 'download');\n      if (xhr.upload) {\n        xhr.upload.onprogress = handleProgress.bind(null, 'upload');\n      }\n    } catch(e) {\n      // Accessing xhr.upload fails in IE from a web worker, so just pretend it doesn't exist.\n      // Reported here:\n      // https://connect.microsoft.com/IE/feedback/details/837245/xmlhttprequest-upload-throws-invalid-argument-when-used-from-web-worker-context\n    }\n  }\n\n  // initiate request\n  try {\n    if (this.username && this.password) {\n      xhr.open(this.method, this.url, true, this.username, this.password);\n    } else {\n      xhr.open(this.method, this.url, true);\n    }\n  } catch (err) {\n    // see #1149\n    return this.callback(err);\n  }\n\n  // CORS\n  if (this._withCredentials) xhr.withCredentials = true;\n\n  // body\n  if (!this._formData && 'GET' != this.method && 'HEAD' != this.method && 'string' != typeof data && !this._isHost(data)) {\n    // serialize stuff\n    var contentType = this._header['content-type'];\n    var serialize = this._serializer || request.serialize[contentType ? contentType.split(';')[0] : ''];\n    if (!serialize && isJSON(contentType)) {\n      serialize = request.serialize['application/json'];\n    }\n    if (serialize) data = serialize(data);\n  }\n\n  // set header fields\n  for (var field in this.header) {\n    if (null == this.header[field]) continue;\n\n    if (this.header.hasOwnProperty(field))\n      xhr.setRequestHeader(field, this.header[field]);\n  }\n\n  if (this._responseType) {\n    xhr.responseType = this._responseType;\n  }\n\n  // send stuff\n  this.emit('request', this);\n\n  // IE11 xhr.send(undefined) sends 'undefined' string as POST payload (instead of nothing)\n  // We need null here if data is undefined\n  xhr.send(typeof data !== 'undefined' ? data : null);\n  return this;\n};\n\nrequest.agent = function() {\n  return new Agent();\n};\n\n[\"GET\", \"POST\", \"OPTIONS\", \"PATCH\", \"PUT\", \"DELETE\"].forEach(function(method) {\n  Agent.prototype[method.toLowerCase()] = function(url, fn) {\n    var req = new request.Request(method, url);\n    this._setDefaults(req);\n    if (fn) {\n      req.end(fn);\n    }\n    return req;\n  };\n});\n\nAgent.prototype.del = Agent.prototype['delete'];\n\n/**\n * GET `url` with optional callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed|Function} [data] or fn\n * @param {Function} [fn]\n * @return {Request}\n * @api public\n */\n\nrequest.get = function(url, data, fn) {\n  var req = request('GET', url);\n  if ('function' == typeof data) (fn = data), (data = null);\n  if (data) req.query(data);\n  if (fn) req.end(fn);\n  return req;\n};\n\n/**\n * HEAD `url` with optional callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed|Function} [data] or fn\n * @param {Function} [fn]\n * @return {Request}\n * @api public\n */\n\nrequest.head = function(url, data, fn) {\n  var req = request('HEAD', url);\n  if ('function' == typeof data) (fn = data), (data = null);\n  if (data) req.query(data);\n  if (fn) req.end(fn);\n  return req;\n};\n\n/**\n * OPTIONS query to `url` with optional callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed|Function} [data] or fn\n * @param {Function} [fn]\n * @return {Request}\n * @api public\n */\n\nrequest.options = function(url, data, fn) {\n  var req = request('OPTIONS', url);\n  if ('function' == typeof data) (fn = data), (data = null);\n  if (data) req.send(data);\n  if (fn) req.end(fn);\n  return req;\n};\n\n/**\n * DELETE `url` with optional `data` and callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed} [data]\n * @param {Function} [fn]\n * @return {Request}\n * @api public\n */\n\nfunction del(url, data, fn) {\n  var req = request('DELETE', url);\n  if ('function' == typeof data) (fn = data), (data = null);\n  if (data) req.send(data);\n  if (fn) req.end(fn);\n  return req;\n}\n\nrequest['del'] = del;\nrequest['delete'] = del;\n\n/**\n * PATCH `url` with optional `data` and callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed} [data]\n * @param {Function} [fn]\n * @return {Request}\n * @api public\n */\n\nrequest.patch = function(url, data, fn) {\n  var req = request('PATCH', url);\n  if ('function' == typeof data) (fn = data), (data = null);\n  if (data) req.send(data);\n  if (fn) req.end(fn);\n  return req;\n};\n\n/**\n * POST `url` with optional `data` and callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed} [data]\n * @param {Function} [fn]\n * @return {Request}\n * @api public\n */\n\nrequest.post = function(url, data, fn) {\n  var req = request('POST', url);\n  if ('function' == typeof data) (fn = data), (data = null);\n  if (data) req.send(data);\n  if (fn) req.end(fn);\n  return req;\n};\n\n/**\n * PUT `url` with optional `data` and callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed|Function} [data] or fn\n * @param {Function} [fn]\n * @return {Request}\n * @api public\n */\n\nrequest.put = function(url, data, fn) {\n  var req = request('PUT', url);\n  if ('function' == typeof data) (fn = data), (data = null);\n  if (data) req.send(data);\n  if (fn) req.end(fn);\n  return req;\n};\n\n\n//# sourceURL=webpack://invisibles23/./node_modules/superagent/lib/client.js?");

/***/ }),

/***/ "./node_modules/superagent/lib/is-object.js":
/*!**************************************************!*\
  !*** ./node_modules/superagent/lib/is-object.js ***!
  \**************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/**\n * Check if `obj` is an object.\n *\n * @param {Object} obj\n * @return {Boolean}\n * @api private\n */\n\nfunction isObject(obj) {\n  return null !== obj && 'object' === typeof obj;\n}\n\nmodule.exports = isObject;\n\n\n//# sourceURL=webpack://invisibles23/./node_modules/superagent/lib/is-object.js?");

/***/ }),

/***/ "./node_modules/superagent/lib/request-base.js":
/*!*****************************************************!*\
  !*** ./node_modules/superagent/lib/request-base.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/console-browserify/index.js */ \"./node_modules/console-browserify/index.js\");\n\n\n/**\n * Module of mixed-in functions shared between node and client code\n */\nvar isObject = __webpack_require__(/*! ./is-object */ \"./node_modules/superagent/lib/is-object.js\");\n\n/**\n * Expose `RequestBase`.\n */\n\nmodule.exports = RequestBase;\n\n/**\n * Initialize a new `RequestBase`.\n *\n * @api public\n */\n\nfunction RequestBase(obj) {\n  if (obj) return mixin(obj);\n}\n\n/**\n * Mixin the prototype properties.\n *\n * @param {Object} obj\n * @return {Object}\n * @api private\n */\n\nfunction mixin(obj) {\n  for (var key in RequestBase.prototype) {\n    obj[key] = RequestBase.prototype[key];\n  }\n  return obj;\n}\n\n/**\n * Clear previous timeout.\n *\n * @return {Request} for chaining\n * @api public\n */\n\nRequestBase.prototype.clearTimeout = function _clearTimeout(){\n  clearTimeout(this._timer);\n  clearTimeout(this._responseTimeoutTimer);\n  delete this._timer;\n  delete this._responseTimeoutTimer;\n  return this;\n};\n\n/**\n * Override default response body parser\n *\n * This function will be called to convert incoming data into request.body\n *\n * @param {Function}\n * @api public\n */\n\nRequestBase.prototype.parse = function parse(fn){\n  this._parser = fn;\n  return this;\n};\n\n/**\n * Set format of binary response body.\n * In browser valid formats are 'blob' and 'arraybuffer',\n * which return Blob and ArrayBuffer, respectively.\n *\n * In Node all values result in Buffer.\n *\n * Examples:\n *\n *      req.get('/')\n *        .responseType('blob')\n *        .end(callback);\n *\n * @param {String} val\n * @return {Request} for chaining\n * @api public\n */\n\nRequestBase.prototype.responseType = function(val){\n  this._responseType = val;\n  return this;\n};\n\n/**\n * Override default request body serializer\n *\n * This function will be called to convert data set via .send or .attach into payload to send\n *\n * @param {Function}\n * @api public\n */\n\nRequestBase.prototype.serialize = function serialize(fn){\n  this._serializer = fn;\n  return this;\n};\n\n/**\n * Set timeouts.\n *\n * - response timeout is time between sending request and receiving the first byte of the response. Includes DNS and connection time.\n * - deadline is the time from start of the request to receiving response body in full. If the deadline is too short large files may not load at all on slow connections.\n *\n * Value of 0 or false means no timeout.\n *\n * @param {Number|Object} ms or {response, deadline}\n * @return {Request} for chaining\n * @api public\n */\n\nRequestBase.prototype.timeout = function timeout(options){\n  if (!options || 'object' !== typeof options) {\n    this._timeout = options;\n    this._responseTimeout = 0;\n    return this;\n  }\n\n  for(var option in options) {\n    switch(option) {\n      case 'deadline':\n        this._timeout = options.deadline;\n        break;\n      case 'response':\n        this._responseTimeout = options.response;\n        break;\n      default:\n        console.warn(\"Unknown timeout option\", option);\n    }\n  }\n  return this;\n};\n\n/**\n * Set number of retry attempts on error.\n *\n * Failed requests will be retried 'count' times if timeout or err.code >= 500.\n *\n * @param {Number} count\n * @param {Function} [fn]\n * @return {Request} for chaining\n * @api public\n */\n\nRequestBase.prototype.retry = function retry(count, fn){\n  // Default to 1 if no count passed or true\n  if (arguments.length === 0 || count === true) count = 1;\n  if (count <= 0) count = 0;\n  this._maxRetries = count;\n  this._retries = 0;\n  this._retryCallback = fn;\n  return this;\n};\n\nvar ERROR_CODES = [\n  'ECONNRESET',\n  'ETIMEDOUT',\n  'EADDRINFO',\n  'ESOCKETTIMEDOUT'\n];\n\n/**\n * Determine if a request should be retried.\n * (Borrowed from segmentio/superagent-retry)\n *\n * @param {Error} err\n * @param {Response} [res]\n * @returns {Boolean}\n */\nRequestBase.prototype._shouldRetry = function(err, res) {\n  if (!this._maxRetries || this._retries++ >= this._maxRetries) {\n    return false;\n  }\n  if (this._retryCallback) {\n    try {\n      var override = this._retryCallback(err, res);\n      if (override === true) return true;\n      if (override === false) return false;\n      // undefined falls back to defaults\n    } catch(e) {\n      console.error(e);\n    }\n  }\n  if (res && res.status && res.status >= 500 && res.status != 501) return true;\n  if (err) {\n    if (err.code && ~ERROR_CODES.indexOf(err.code)) return true;\n    // Superagent timeout\n    if (err.timeout && err.code == 'ECONNABORTED') return true;\n    if (err.crossDomain) return true;\n  }\n  return false;\n};\n\n/**\n * Retry request\n *\n * @return {Request} for chaining\n * @api private\n */\n\nRequestBase.prototype._retry = function() {\n\n  this.clearTimeout();\n\n  // node\n  if (this.req) {\n    this.req = null;\n    this.req = this.request();\n  }\n\n  this._aborted = false;\n  this.timedout = false;\n\n  return this._end();\n};\n\n/**\n * Promise support\n *\n * @param {Function} resolve\n * @param {Function} [reject]\n * @return {Request}\n */\n\nRequestBase.prototype.then = function then(resolve, reject) {\n  if (!this._fullfilledPromise) {\n    var self = this;\n    if (this._endCalled) {\n      console.warn(\"Warning: superagent request was sent twice, because both .end() and .then() were called. Never call .end() if you use promises\");\n    }\n    this._fullfilledPromise = new Promise(function(innerResolve, innerReject) {\n      self.end(function(err, res) {\n        if (err) innerReject(err);\n        else innerResolve(res);\n      });\n    });\n  }\n  return this._fullfilledPromise.then(resolve, reject);\n};\n\nRequestBase.prototype.catch = function(cb) {\n  return this.then(undefined, cb);\n};\n\n/**\n * Allow for extension\n */\n\nRequestBase.prototype.use = function use(fn) {\n  fn(this);\n  return this;\n};\n\nRequestBase.prototype.ok = function(cb) {\n  if ('function' !== typeof cb) throw Error(\"Callback required\");\n  this._okCallback = cb;\n  return this;\n};\n\nRequestBase.prototype._isResponseOK = function(res) {\n  if (!res) {\n    return false;\n  }\n\n  if (this._okCallback) {\n    return this._okCallback(res);\n  }\n\n  return res.status >= 200 && res.status < 300;\n};\n\n/**\n * Get request header `field`.\n * Case-insensitive.\n *\n * @param {String} field\n * @return {String}\n * @api public\n */\n\nRequestBase.prototype.get = function(field){\n  return this._header[field.toLowerCase()];\n};\n\n/**\n * Get case-insensitive header `field` value.\n * This is a deprecated internal API. Use `.get(field)` instead.\n *\n * (getHeader is no longer used internally by the superagent code base)\n *\n * @param {String} field\n * @return {String}\n * @api private\n * @deprecated\n */\n\nRequestBase.prototype.getHeader = RequestBase.prototype.get;\n\n/**\n * Set header `field` to `val`, or multiple fields with one object.\n * Case-insensitive.\n *\n * Examples:\n *\n *      req.get('/')\n *        .set('Accept', 'application/json')\n *        .set('X-API-Key', 'foobar')\n *        .end(callback);\n *\n *      req.get('/')\n *        .set({ Accept: 'application/json', 'X-API-Key': 'foobar' })\n *        .end(callback);\n *\n * @param {String|Object} field\n * @param {String} val\n * @return {Request} for chaining\n * @api public\n */\n\nRequestBase.prototype.set = function(field, val){\n  if (isObject(field)) {\n    for (var key in field) {\n      this.set(key, field[key]);\n    }\n    return this;\n  }\n  this._header[field.toLowerCase()] = val;\n  this.header[field] = val;\n  return this;\n};\n\n/**\n * Remove header `field`.\n * Case-insensitive.\n *\n * Example:\n *\n *      req.get('/')\n *        .unset('User-Agent')\n *        .end(callback);\n *\n * @param {String} field\n */\nRequestBase.prototype.unset = function(field){\n  delete this._header[field.toLowerCase()];\n  delete this.header[field];\n  return this;\n};\n\n/**\n * Write the field `name` and `val`, or multiple fields with one object\n * for \"multipart/form-data\" request bodies.\n *\n * ``` js\n * request.post('/upload')\n *   .field('foo', 'bar')\n *   .end(callback);\n *\n * request.post('/upload')\n *   .field({ foo: 'bar', baz: 'qux' })\n *   .end(callback);\n * ```\n *\n * @param {String|Object} name\n * @param {String|Blob|File|Buffer|fs.ReadStream} val\n * @return {Request} for chaining\n * @api public\n */\nRequestBase.prototype.field = function(name, val) {\n  // name should be either a string or an object.\n  if (null === name || undefined === name) {\n    throw new Error('.field(name, val) name can not be empty');\n  }\n\n  if (this._data) {\n    console.error(\".field() can't be used if .send() is used. Please use only .send() or only .field() & .attach()\");\n  }\n\n  if (isObject(name)) {\n    for (var key in name) {\n      this.field(key, name[key]);\n    }\n    return this;\n  }\n\n  if (Array.isArray(val)) {\n    for (var i in val) {\n      this.field(name, val[i]);\n    }\n    return this;\n  }\n\n  // val should be defined now\n  if (null === val || undefined === val) {\n    throw new Error('.field(name, val) val can not be empty');\n  }\n  if ('boolean' === typeof val) {\n    val = '' + val;\n  }\n  this._getFormData().append(name, val);\n  return this;\n};\n\n/**\n * Abort the request, and clear potential timeout.\n *\n * @return {Request}\n * @api public\n */\nRequestBase.prototype.abort = function(){\n  if (this._aborted) {\n    return this;\n  }\n  this._aborted = true;\n  this.xhr && this.xhr.abort(); // browser\n  this.req && this.req.abort(); // node\n  this.clearTimeout();\n  this.emit('abort');\n  return this;\n};\n\nRequestBase.prototype._auth = function(user, pass, options, base64Encoder) {\n  switch (options.type) {\n    case 'basic':\n      this.set('Authorization', 'Basic ' + base64Encoder(user + ':' + pass));\n      break;\n\n    case 'auto':\n      this.username = user;\n      this.password = pass;\n      break;\n\n    case 'bearer': // usage would be .auth(accessToken, { type: 'bearer' })\n      this.set('Authorization', 'Bearer ' + user);\n      break;\n  }\n  return this;\n};\n\n/**\n * Enable transmission of cookies with x-domain requests.\n *\n * Note that for this to work the origin must not be\n * using \"Access-Control-Allow-Origin\" with a wildcard,\n * and also must set \"Access-Control-Allow-Credentials\"\n * to \"true\".\n *\n * @api public\n */\n\nRequestBase.prototype.withCredentials = function(on) {\n  // This is browser-only functionality. Node side is no-op.\n  if (on == undefined) on = true;\n  this._withCredentials = on;\n  return this;\n};\n\n/**\n * Set the max redirects to `n`. Does noting in browser XHR implementation.\n *\n * @param {Number} n\n * @return {Request} for chaining\n * @api public\n */\n\nRequestBase.prototype.redirects = function(n){\n  this._maxRedirects = n;\n  return this;\n};\n\n/**\n * Maximum size of buffered response body, in bytes. Counts uncompressed size.\n * Default 200MB.\n *\n * @param {Number} n\n * @return {Request} for chaining\n */\nRequestBase.prototype.maxResponseSize = function(n){\n  if ('number' !== typeof n) {\n    throw TypeError(\"Invalid argument\");\n  }\n  this._maxResponseSize = n;\n  return this;\n};\n\n/**\n * Convert to a plain javascript object (not JSON string) of scalar properties.\n * Note as this method is designed to return a useful non-this value,\n * it cannot be chained.\n *\n * @return {Object} describing method, url, and data of this request\n * @api public\n */\n\nRequestBase.prototype.toJSON = function() {\n  return {\n    method: this.method,\n    url: this.url,\n    data: this._data,\n    headers: this._header,\n  };\n};\n\n/**\n * Send `data` as the request body, defaulting the `.type()` to \"json\" when\n * an object is given.\n *\n * Examples:\n *\n *       // manual json\n *       request.post('/user')\n *         .type('json')\n *         .send('{\"name\":\"tj\"}')\n *         .end(callback)\n *\n *       // auto json\n *       request.post('/user')\n *         .send({ name: 'tj' })\n *         .end(callback)\n *\n *       // manual x-www-form-urlencoded\n *       request.post('/user')\n *         .type('form')\n *         .send('name=tj')\n *         .end(callback)\n *\n *       // auto x-www-form-urlencoded\n *       request.post('/user')\n *         .type('form')\n *         .send({ name: 'tj' })\n *         .end(callback)\n *\n *       // defaults to x-www-form-urlencoded\n *      request.post('/user')\n *        .send('name=tobi')\n *        .send('species=ferret')\n *        .end(callback)\n *\n * @param {String|Object} data\n * @return {Request} for chaining\n * @api public\n */\n\nRequestBase.prototype.send = function(data){\n  var isObj = isObject(data);\n  var type = this._header['content-type'];\n\n  if (this._formData) {\n    console.error(\".send() can't be used if .attach() or .field() is used. Please use only .send() or only .field() & .attach()\");\n  }\n\n  if (isObj && !this._data) {\n    if (Array.isArray(data)) {\n      this._data = [];\n    } else if (!this._isHost(data)) {\n      this._data = {};\n    }\n  } else if (data && this._data && this._isHost(this._data)) {\n    throw Error(\"Can't merge these send calls\");\n  }\n\n  // merge\n  if (isObj && isObject(this._data)) {\n    for (var key in data) {\n      this._data[key] = data[key];\n    }\n  } else if ('string' == typeof data) {\n    // default to x-www-form-urlencoded\n    if (!type) this.type('form');\n    type = this._header['content-type'];\n    if ('application/x-www-form-urlencoded' == type) {\n      this._data = this._data\n        ? this._data + '&' + data\n        : data;\n    } else {\n      this._data = (this._data || '') + data;\n    }\n  } else {\n    this._data = data;\n  }\n\n  if (!isObj || this._isHost(data)) {\n    return this;\n  }\n\n  // default to json\n  if (!type) this.type('json');\n  return this;\n};\n\n/**\n * Sort `querystring` by the sort function\n *\n *\n * Examples:\n *\n *       // default order\n *       request.get('/user')\n *         .query('name=Nick')\n *         .query('search=Manny')\n *         .sortQuery()\n *         .end(callback)\n *\n *       // customized sort function\n *       request.get('/user')\n *         .query('name=Nick')\n *         .query('search=Manny')\n *         .sortQuery(function(a, b){\n *           return a.length - b.length;\n *         })\n *         .end(callback)\n *\n *\n * @param {Function} sort\n * @return {Request} for chaining\n * @api public\n */\n\nRequestBase.prototype.sortQuery = function(sort) {\n  // _sort default to true but otherwise can be a function or boolean\n  this._sort = typeof sort === 'undefined' ? true : sort;\n  return this;\n};\n\n/**\n * Compose querystring to append to req.url\n *\n * @api private\n */\nRequestBase.prototype._finalizeQueryString = function(){\n  var query = this._query.join('&');\n  if (query) {\n    this.url += (this.url.indexOf('?') >= 0 ? '&' : '?') + query;\n  }\n  this._query.length = 0; // Makes the call idempotent\n\n  if (this._sort) {\n    var index = this.url.indexOf('?');\n    if (index >= 0) {\n      var queryArr = this.url.substring(index + 1).split('&');\n      if ('function' === typeof this._sort) {\n        queryArr.sort(this._sort);\n      } else {\n        queryArr.sort();\n      }\n      this.url = this.url.substring(0, index) + '?' + queryArr.join('&');\n    }\n  }\n};\n\n// For backwards compat only\nRequestBase.prototype._appendQueryString = function() {console.trace(\"Unsupported\");}\n\n/**\n * Invoke callback with timeout error.\n *\n * @api private\n */\n\nRequestBase.prototype._timeoutError = function(reason, timeout, errno){\n  if (this._aborted) {\n    return;\n  }\n  var err = new Error(reason + timeout + 'ms exceeded');\n  err.timeout = timeout;\n  err.code = 'ECONNABORTED';\n  err.errno = errno;\n  this.timedout = true;\n  this.abort();\n  this.callback(err);\n};\n\nRequestBase.prototype._setTimeouts = function() {\n  var self = this;\n\n  // deadline\n  if (this._timeout && !this._timer) {\n    this._timer = setTimeout(function(){\n      self._timeoutError('Timeout of ', self._timeout, 'ETIME');\n    }, this._timeout);\n  }\n  // response timeout\n  if (this._responseTimeout && !this._responseTimeoutTimer) {\n    this._responseTimeoutTimer = setTimeout(function(){\n      self._timeoutError('Response timeout of ', self._responseTimeout, 'ETIMEDOUT');\n    }, this._responseTimeout);\n  }\n};\n\n\n//# sourceURL=webpack://invisibles23/./node_modules/superagent/lib/request-base.js?");

/***/ }),

/***/ "./node_modules/superagent/lib/response-base.js":
/*!******************************************************!*\
  !*** ./node_modules/superagent/lib/response-base.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\n/**\n * Module dependencies.\n */\n\nvar utils = __webpack_require__(/*! ./utils */ \"./node_modules/superagent/lib/utils.js\");\n\n/**\n * Expose `ResponseBase`.\n */\n\nmodule.exports = ResponseBase;\n\n/**\n * Initialize a new `ResponseBase`.\n *\n * @api public\n */\n\nfunction ResponseBase(obj) {\n  if (obj) return mixin(obj);\n}\n\n/**\n * Mixin the prototype properties.\n *\n * @param {Object} obj\n * @return {Object}\n * @api private\n */\n\nfunction mixin(obj) {\n  for (var key in ResponseBase.prototype) {\n    obj[key] = ResponseBase.prototype[key];\n  }\n  return obj;\n}\n\n/**\n * Get case-insensitive `field` value.\n *\n * @param {String} field\n * @return {String}\n * @api public\n */\n\nResponseBase.prototype.get = function(field) {\n  return this.header[field.toLowerCase()];\n};\n\n/**\n * Set header related properties:\n *\n *   - `.type` the content type without params\n *\n * A response of \"Content-Type: text/plain; charset=utf-8\"\n * will provide you with a `.type` of \"text/plain\".\n *\n * @param {Object} header\n * @api private\n */\n\nResponseBase.prototype._setHeaderProperties = function(header){\n    // TODO: moar!\n    // TODO: make this a util\n\n    // content-type\n    var ct = header['content-type'] || '';\n    this.type = utils.type(ct);\n\n    // params\n    var params = utils.params(ct);\n    for (var key in params) this[key] = params[key];\n\n    this.links = {};\n\n    // links\n    try {\n        if (header.link) {\n            this.links = utils.parseLinks(header.link);\n        }\n    } catch (err) {\n        // ignore\n    }\n};\n\n/**\n * Set flags such as `.ok` based on `status`.\n *\n * For example a 2xx response will give you a `.ok` of __true__\n * whereas 5xx will be __false__ and `.error` will be __true__. The\n * `.clientError` and `.serverError` are also available to be more\n * specific, and `.statusType` is the class of error ranging from 1..5\n * sometimes useful for mapping respond colors etc.\n *\n * \"sugar\" properties are also defined for common cases. Currently providing:\n *\n *   - .noContent\n *   - .badRequest\n *   - .unauthorized\n *   - .notAcceptable\n *   - .notFound\n *\n * @param {Number} status\n * @api private\n */\n\nResponseBase.prototype._setStatusProperties = function(status){\n    var type = status / 100 | 0;\n\n    // status / class\n    this.status = this.statusCode = status;\n    this.statusType = type;\n\n    // basics\n    this.info = 1 == type;\n    this.ok = 2 == type;\n    this.redirect = 3 == type;\n    this.clientError = 4 == type;\n    this.serverError = 5 == type;\n    this.error = (4 == type || 5 == type)\n        ? this.toError()\n        : false;\n\n    // sugar\n    this.accepted = 202 == status;\n    this.noContent = 204 == status;\n    this.badRequest = 400 == status;\n    this.unauthorized = 401 == status;\n    this.notAcceptable = 406 == status;\n    this.forbidden = 403 == status;\n    this.notFound = 404 == status;\n};\n\n\n//# sourceURL=webpack://invisibles23/./node_modules/superagent/lib/response-base.js?");

/***/ }),

/***/ "./node_modules/superagent/lib/utils.js":
/*!**********************************************!*\
  !*** ./node_modules/superagent/lib/utils.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\n/**\n * Return the mime type for the given `str`.\n *\n * @param {String} str\n * @return {String}\n * @api private\n */\n\nexports.type = function(str){\n  return str.split(/ *; */).shift();\n};\n\n/**\n * Return header field parameters.\n *\n * @param {String} str\n * @return {Object}\n * @api private\n */\n\nexports.params = function(str){\n  return str.split(/ *; */).reduce(function(obj, str){\n    var parts = str.split(/ *= */);\n    var key = parts.shift();\n    var val = parts.shift();\n\n    if (key && val) obj[key] = val;\n    return obj;\n  }, {});\n};\n\n/**\n * Parse Link header fields.\n *\n * @param {String} str\n * @return {Object}\n * @api private\n */\n\nexports.parseLinks = function(str){\n  return str.split(/ *, */).reduce(function(obj, str){\n    var parts = str.split(/ *; */);\n    var url = parts[0].slice(1, -1);\n    var rel = parts[1].split(/ *= */)[1].slice(1, -1);\n    obj[rel] = url;\n    return obj;\n  }, {});\n};\n\n/**\n * Strip content related fields from `header`.\n *\n * @param {Object} header\n * @return {Object} header\n * @api private\n */\n\nexports.cleanHeader = function(header, changesOrigin){\n  delete header['content-type'];\n  delete header['content-length'];\n  delete header['transfer-encoding'];\n  delete header['host'];\n  // secuirty\n  if (changesOrigin) {\n    delete header['authorization'];\n    delete header['cookie'];\n  }\n  return header;\n};\n\n\n//# sourceURL=webpack://invisibles23/./node_modules/superagent/lib/utils.js?");

/***/ }),

/***/ "./node_modules/util/support/isBufferBrowser.js":
/*!******************************************************!*\
  !*** ./node_modules/util/support/isBufferBrowser.js ***!
  \******************************************************/
/***/ ((module) => {

eval("module.exports = function isBuffer(arg) {\n  return arg && typeof arg === 'object'\n    && typeof arg.copy === 'function'\n    && typeof arg.fill === 'function'\n    && typeof arg.readUInt8 === 'function';\n}\n\n//# sourceURL=webpack://invisibles23/./node_modules/util/support/isBufferBrowser.js?");

/***/ }),

/***/ "./node_modules/util/support/types.js":
/*!********************************************!*\
  !*** ./node_modules/util/support/types.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("// Currently in sync with Node.js lib/internal/util/types.js\n// https://github.com/nodejs/node/commit/112cc7c27551254aa2b17098fb774867f05ed0d9\n\n\n\nvar isArgumentsObject = __webpack_require__(/*! is-arguments */ \"./node_modules/is-arguments/index.js\");\nvar isGeneratorFunction = __webpack_require__(/*! is-generator-function */ \"./node_modules/is-generator-function/index.js\");\nvar whichTypedArray = __webpack_require__(/*! which-typed-array */ \"./node_modules/which-typed-array/index.js\");\nvar isTypedArray = __webpack_require__(/*! is-typed-array */ \"./node_modules/is-typed-array/index.js\");\n\nfunction uncurryThis(f) {\n  return f.call.bind(f);\n}\n\nvar BigIntSupported = typeof BigInt !== 'undefined';\nvar SymbolSupported = typeof Symbol !== 'undefined';\n\nvar ObjectToString = uncurryThis(Object.prototype.toString);\n\nvar numberValue = uncurryThis(Number.prototype.valueOf);\nvar stringValue = uncurryThis(String.prototype.valueOf);\nvar booleanValue = uncurryThis(Boolean.prototype.valueOf);\n\nif (BigIntSupported) {\n  var bigIntValue = uncurryThis(BigInt.prototype.valueOf);\n}\n\nif (SymbolSupported) {\n  var symbolValue = uncurryThis(Symbol.prototype.valueOf);\n}\n\nfunction checkBoxedPrimitive(value, prototypeValueOf) {\n  if (typeof value !== 'object') {\n    return false;\n  }\n  try {\n    prototypeValueOf(value);\n    return true;\n  } catch(e) {\n    return false;\n  }\n}\n\nexports.isArgumentsObject = isArgumentsObject;\nexports.isGeneratorFunction = isGeneratorFunction;\nexports.isTypedArray = isTypedArray;\n\n// Taken from here and modified for better browser support\n// https://github.com/sindresorhus/p-is-promise/blob/cda35a513bda03f977ad5cde3a079d237e82d7ef/index.js\nfunction isPromise(input) {\n\treturn (\n\t\t(\n\t\t\ttypeof Promise !== 'undefined' &&\n\t\t\tinput instanceof Promise\n\t\t) ||\n\t\t(\n\t\t\tinput !== null &&\n\t\t\ttypeof input === 'object' &&\n\t\t\ttypeof input.then === 'function' &&\n\t\t\ttypeof input.catch === 'function'\n\t\t)\n\t);\n}\nexports.isPromise = isPromise;\n\nfunction isArrayBufferView(value) {\n  if (typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView) {\n    return ArrayBuffer.isView(value);\n  }\n\n  return (\n    isTypedArray(value) ||\n    isDataView(value)\n  );\n}\nexports.isArrayBufferView = isArrayBufferView;\n\n\nfunction isUint8Array(value) {\n  return whichTypedArray(value) === 'Uint8Array';\n}\nexports.isUint8Array = isUint8Array;\n\nfunction isUint8ClampedArray(value) {\n  return whichTypedArray(value) === 'Uint8ClampedArray';\n}\nexports.isUint8ClampedArray = isUint8ClampedArray;\n\nfunction isUint16Array(value) {\n  return whichTypedArray(value) === 'Uint16Array';\n}\nexports.isUint16Array = isUint16Array;\n\nfunction isUint32Array(value) {\n  return whichTypedArray(value) === 'Uint32Array';\n}\nexports.isUint32Array = isUint32Array;\n\nfunction isInt8Array(value) {\n  return whichTypedArray(value) === 'Int8Array';\n}\nexports.isInt8Array = isInt8Array;\n\nfunction isInt16Array(value) {\n  return whichTypedArray(value) === 'Int16Array';\n}\nexports.isInt16Array = isInt16Array;\n\nfunction isInt32Array(value) {\n  return whichTypedArray(value) === 'Int32Array';\n}\nexports.isInt32Array = isInt32Array;\n\nfunction isFloat32Array(value) {\n  return whichTypedArray(value) === 'Float32Array';\n}\nexports.isFloat32Array = isFloat32Array;\n\nfunction isFloat64Array(value) {\n  return whichTypedArray(value) === 'Float64Array';\n}\nexports.isFloat64Array = isFloat64Array;\n\nfunction isBigInt64Array(value) {\n  return whichTypedArray(value) === 'BigInt64Array';\n}\nexports.isBigInt64Array = isBigInt64Array;\n\nfunction isBigUint64Array(value) {\n  return whichTypedArray(value) === 'BigUint64Array';\n}\nexports.isBigUint64Array = isBigUint64Array;\n\nfunction isMapToString(value) {\n  return ObjectToString(value) === '[object Map]';\n}\nisMapToString.working = (\n  typeof Map !== 'undefined' &&\n  isMapToString(new Map())\n);\n\nfunction isMap(value) {\n  if (typeof Map === 'undefined') {\n    return false;\n  }\n\n  return isMapToString.working\n    ? isMapToString(value)\n    : value instanceof Map;\n}\nexports.isMap = isMap;\n\nfunction isSetToString(value) {\n  return ObjectToString(value) === '[object Set]';\n}\nisSetToString.working = (\n  typeof Set !== 'undefined' &&\n  isSetToString(new Set())\n);\nfunction isSet(value) {\n  if (typeof Set === 'undefined') {\n    return false;\n  }\n\n  return isSetToString.working\n    ? isSetToString(value)\n    : value instanceof Set;\n}\nexports.isSet = isSet;\n\nfunction isWeakMapToString(value) {\n  return ObjectToString(value) === '[object WeakMap]';\n}\nisWeakMapToString.working = (\n  typeof WeakMap !== 'undefined' &&\n  isWeakMapToString(new WeakMap())\n);\nfunction isWeakMap(value) {\n  if (typeof WeakMap === 'undefined') {\n    return false;\n  }\n\n  return isWeakMapToString.working\n    ? isWeakMapToString(value)\n    : value instanceof WeakMap;\n}\nexports.isWeakMap = isWeakMap;\n\nfunction isWeakSetToString(value) {\n  return ObjectToString(value) === '[object WeakSet]';\n}\nisWeakSetToString.working = (\n  typeof WeakSet !== 'undefined' &&\n  isWeakSetToString(new WeakSet())\n);\nfunction isWeakSet(value) {\n  return isWeakSetToString(value);\n}\nexports.isWeakSet = isWeakSet;\n\nfunction isArrayBufferToString(value) {\n  return ObjectToString(value) === '[object ArrayBuffer]';\n}\nisArrayBufferToString.working = (\n  typeof ArrayBuffer !== 'undefined' &&\n  isArrayBufferToString(new ArrayBuffer())\n);\nfunction isArrayBuffer(value) {\n  if (typeof ArrayBuffer === 'undefined') {\n    return false;\n  }\n\n  return isArrayBufferToString.working\n    ? isArrayBufferToString(value)\n    : value instanceof ArrayBuffer;\n}\nexports.isArrayBuffer = isArrayBuffer;\n\nfunction isDataViewToString(value) {\n  return ObjectToString(value) === '[object DataView]';\n}\nisDataViewToString.working = (\n  typeof ArrayBuffer !== 'undefined' &&\n  typeof DataView !== 'undefined' &&\n  isDataViewToString(new DataView(new ArrayBuffer(1), 0, 1))\n);\nfunction isDataView(value) {\n  if (typeof DataView === 'undefined') {\n    return false;\n  }\n\n  return isDataViewToString.working\n    ? isDataViewToString(value)\n    : value instanceof DataView;\n}\nexports.isDataView = isDataView;\n\n// Store a copy of SharedArrayBuffer in case it's deleted elsewhere\nvar SharedArrayBufferCopy = typeof SharedArrayBuffer !== 'undefined' ? SharedArrayBuffer : undefined;\nfunction isSharedArrayBufferToString(value) {\n  return ObjectToString(value) === '[object SharedArrayBuffer]';\n}\nfunction isSharedArrayBuffer(value) {\n  if (typeof SharedArrayBufferCopy === 'undefined') {\n    return false;\n  }\n\n  if (typeof isSharedArrayBufferToString.working === 'undefined') {\n    isSharedArrayBufferToString.working = isSharedArrayBufferToString(new SharedArrayBufferCopy());\n  }\n\n  return isSharedArrayBufferToString.working\n    ? isSharedArrayBufferToString(value)\n    : value instanceof SharedArrayBufferCopy;\n}\nexports.isSharedArrayBuffer = isSharedArrayBuffer;\n\nfunction isAsyncFunction(value) {\n  return ObjectToString(value) === '[object AsyncFunction]';\n}\nexports.isAsyncFunction = isAsyncFunction;\n\nfunction isMapIterator(value) {\n  return ObjectToString(value) === '[object Map Iterator]';\n}\nexports.isMapIterator = isMapIterator;\n\nfunction isSetIterator(value) {\n  return ObjectToString(value) === '[object Set Iterator]';\n}\nexports.isSetIterator = isSetIterator;\n\nfunction isGeneratorObject(value) {\n  return ObjectToString(value) === '[object Generator]';\n}\nexports.isGeneratorObject = isGeneratorObject;\n\nfunction isWebAssemblyCompiledModule(value) {\n  return ObjectToString(value) === '[object WebAssembly.Module]';\n}\nexports.isWebAssemblyCompiledModule = isWebAssemblyCompiledModule;\n\nfunction isNumberObject(value) {\n  return checkBoxedPrimitive(value, numberValue);\n}\nexports.isNumberObject = isNumberObject;\n\nfunction isStringObject(value) {\n  return checkBoxedPrimitive(value, stringValue);\n}\nexports.isStringObject = isStringObject;\n\nfunction isBooleanObject(value) {\n  return checkBoxedPrimitive(value, booleanValue);\n}\nexports.isBooleanObject = isBooleanObject;\n\nfunction isBigIntObject(value) {\n  return BigIntSupported && checkBoxedPrimitive(value, bigIntValue);\n}\nexports.isBigIntObject = isBigIntObject;\n\nfunction isSymbolObject(value) {\n  return SymbolSupported && checkBoxedPrimitive(value, symbolValue);\n}\nexports.isSymbolObject = isSymbolObject;\n\nfunction isBoxedPrimitive(value) {\n  return (\n    isNumberObject(value) ||\n    isStringObject(value) ||\n    isBooleanObject(value) ||\n    isBigIntObject(value) ||\n    isSymbolObject(value)\n  );\n}\nexports.isBoxedPrimitive = isBoxedPrimitive;\n\nfunction isAnyArrayBuffer(value) {\n  return typeof Uint8Array !== 'undefined' && (\n    isArrayBuffer(value) ||\n    isSharedArrayBuffer(value)\n  );\n}\nexports.isAnyArrayBuffer = isAnyArrayBuffer;\n\n['isProxy', 'isExternal', 'isModuleNamespaceObject'].forEach(function(method) {\n  Object.defineProperty(exports, method, {\n    enumerable: false,\n    value: function() {\n      throw new Error(method + ' is not supported in userland');\n    }\n  });\n});\n\n\n//# sourceURL=webpack://invisibles23/./node_modules/util/support/types.js?");

/***/ }),

/***/ "./node_modules/util/util.js":
/*!***********************************!*\
  !*** ./node_modules/util/util.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/* provided dependency */ var process = __webpack_require__(/*! ./node_modules/process/browser.js */ \"./node_modules/process/browser.js\");\n/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/console-browserify/index.js */ \"./node_modules/console-browserify/index.js\");\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors ||\n  function getOwnPropertyDescriptors(obj) {\n    var keys = Object.keys(obj);\n    var descriptors = {};\n    for (var i = 0; i < keys.length; i++) {\n      descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);\n    }\n    return descriptors;\n  };\n\nvar formatRegExp = /%[sdj%]/g;\nexports.format = function(f) {\n  if (!isString(f)) {\n    var objects = [];\n    for (var i = 0; i < arguments.length; i++) {\n      objects.push(inspect(arguments[i]));\n    }\n    return objects.join(' ');\n  }\n\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  var str = String(f).replace(formatRegExp, function(x) {\n    if (x === '%%') return '%';\n    if (i >= len) return x;\n    switch (x) {\n      case '%s': return String(args[i++]);\n      case '%d': return Number(args[i++]);\n      case '%j':\n        try {\n          return JSON.stringify(args[i++]);\n        } catch (_) {\n          return '[Circular]';\n        }\n      default:\n        return x;\n    }\n  });\n  for (var x = args[i]; i < len; x = args[++i]) {\n    if (isNull(x) || !isObject(x)) {\n      str += ' ' + x;\n    } else {\n      str += ' ' + inspect(x);\n    }\n  }\n  return str;\n};\n\n\n// Mark that a method should not be used.\n// Returns a modified function which warns once by default.\n// If --no-deprecation is set, then it is a no-op.\nexports.deprecate = function(fn, msg) {\n  if (typeof process !== 'undefined' && process.noDeprecation === true) {\n    return fn;\n  }\n\n  // Allow for deprecating things in the process of starting up.\n  if (typeof process === 'undefined') {\n    return function() {\n      return exports.deprecate(fn, msg).apply(this, arguments);\n    };\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (process.throwDeprecation) {\n        throw new Error(msg);\n      } else if (process.traceDeprecation) {\n        console.trace(msg);\n      } else {\n        console.error(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n};\n\n\nvar debugs = {};\nvar debugEnvRegex = /^$/;\n\nif (process.env.NODE_DEBUG) {\n  var debugEnv = process.env.NODE_DEBUG;\n  debugEnv = debugEnv.replace(/[|\\\\{}()[\\]^$+?.]/g, '\\\\$&')\n    .replace(/\\*/g, '.*')\n    .replace(/,/g, '$|^')\n    .toUpperCase();\n  debugEnvRegex = new RegExp('^' + debugEnv + '$', 'i');\n}\nexports.debuglog = function(set) {\n  set = set.toUpperCase();\n  if (!debugs[set]) {\n    if (debugEnvRegex.test(set)) {\n      var pid = process.pid;\n      debugs[set] = function() {\n        var msg = exports.format.apply(exports, arguments);\n        console.error('%s %d: %s', set, pid, msg);\n      };\n    } else {\n      debugs[set] = function() {};\n    }\n  }\n  return debugs[set];\n};\n\n\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Object} opts Optional options object that alters the output.\n */\n/* legacy: obj, showHidden, depth, colors*/\nfunction inspect(obj, opts) {\n  // default options\n  var ctx = {\n    seen: [],\n    stylize: stylizeNoColor\n  };\n  // legacy...\n  if (arguments.length >= 3) ctx.depth = arguments[2];\n  if (arguments.length >= 4) ctx.colors = arguments[3];\n  if (isBoolean(opts)) {\n    // legacy...\n    ctx.showHidden = opts;\n  } else if (opts) {\n    // got an \"options\" object\n    exports._extend(ctx, opts);\n  }\n  // set default options\n  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n  if (isUndefined(ctx.depth)) ctx.depth = 2;\n  if (isUndefined(ctx.colors)) ctx.colors = false;\n  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n  if (ctx.colors) ctx.stylize = stylizeWithColor;\n  return formatValue(ctx, obj, ctx.depth);\n}\nexports.inspect = inspect;\n\n\n// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\ninspect.colors = {\n  'bold' : [1, 22],\n  'italic' : [3, 23],\n  'underline' : [4, 24],\n  'inverse' : [7, 27],\n  'white' : [37, 39],\n  'grey' : [90, 39],\n  'black' : [30, 39],\n  'blue' : [34, 39],\n  'cyan' : [36, 39],\n  'green' : [32, 39],\n  'magenta' : [35, 39],\n  'red' : [31, 39],\n  'yellow' : [33, 39]\n};\n\n// Don't use 'blue' not visible on cmd.exe\ninspect.styles = {\n  'special': 'cyan',\n  'number': 'yellow',\n  'boolean': 'yellow',\n  'undefined': 'grey',\n  'null': 'bold',\n  'string': 'green',\n  'date': 'magenta',\n  // \"name\": intentionally not styling\n  'regexp': 'red'\n};\n\n\nfunction stylizeWithColor(str, styleType) {\n  var style = inspect.styles[styleType];\n\n  if (style) {\n    return '\\u001b[' + inspect.colors[style][0] + 'm' + str +\n           '\\u001b[' + inspect.colors[style][1] + 'm';\n  } else {\n    return str;\n  }\n}\n\n\nfunction stylizeNoColor(str, styleType) {\n  return str;\n}\n\n\nfunction arrayToHash(array) {\n  var hash = {};\n\n  array.forEach(function(val, idx) {\n    hash[val] = true;\n  });\n\n  return hash;\n}\n\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (ctx.customInspect &&\n      value &&\n      isFunction(value.inspect) &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== exports.inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n    if (!isString(ret)) {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // Look up the keys of the object.\n  var keys = Object.keys(value);\n  var visibleKeys = arrayToHash(keys);\n\n  if (ctx.showHidden) {\n    keys = Object.getOwnPropertyNames(value);\n  }\n\n  // IE doesn't make error fields non-enumerable\n  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n  if (isError(value)\n      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n    return formatError(value);\n  }\n\n  // Some type of object without properties can be shortcutted.\n  if (keys.length === 0) {\n    if (isFunction(value)) {\n      var name = value.name ? ': ' + value.name : '';\n      return ctx.stylize('[Function' + name + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '', array = false, braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (isFunction(value)) {\n    var n = value.name ? ': ' + value.name : '';\n    base = ' [Function' + n + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    base = ' ' + formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\n\nfunction formatPrimitive(ctx, value) {\n  if (isUndefined(value))\n    return ctx.stylize('undefined', 'undefined');\n  if (isString(value)) {\n    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                             .replace(/'/g, \"\\\\'\")\n                                             .replace(/\\\\\"/g, '\"') + '\\'';\n    return ctx.stylize(simple, 'string');\n  }\n  if (isNumber(value))\n    return ctx.stylize('' + value, 'number');\n  if (isBoolean(value))\n    return ctx.stylize('' + value, 'boolean');\n  // For some reason typeof null is \"object\", so special case here.\n  if (isNull(value))\n    return ctx.stylize('null', 'null');\n}\n\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (hasOwnProperty(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str, desc;\n  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };\n  if (desc.get) {\n    if (desc.set) {\n      str = ctx.stylize('[Getter/Setter]', 'special');\n    } else {\n      str = ctx.stylize('[Getter]', 'special');\n    }\n  } else {\n    if (desc.set) {\n      str = ctx.stylize('[Setter]', 'special');\n    }\n  }\n  if (!hasOwnProperty(visibleKeys, key)) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(desc.value) < 0) {\n      if (isNull(recurseTimes)) {\n        str = formatValue(ctx, desc.value, null);\n      } else {\n        str = formatValue(ctx, desc.value, recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').slice(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (isUndefined(name)) {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.slice(1, -1);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\nexports.types = __webpack_require__(/*! ./support/types */ \"./node_modules/util/support/types.js\");\n\nfunction isArray(ar) {\n  return Array.isArray(ar);\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return isObject(re) && objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\nexports.types.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return isObject(d) && objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\nexports.types.isDate = isDate;\n\nfunction isError(e) {\n  return isObject(e) &&\n      (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\nexports.types.isNativeError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nexports.isBuffer = __webpack_require__(/*! ./support/isBuffer */ \"./node_modules/util/support/isBufferBrowser.js\");\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n\nfunction pad(n) {\n  return n < 10 ? '0' + n.toString(10) : n.toString(10);\n}\n\n\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n              'Oct', 'Nov', 'Dec'];\n\n// 26 Feb 16:19:34\nfunction timestamp() {\n  var d = new Date();\n  var time = [pad(d.getHours()),\n              pad(d.getMinutes()),\n              pad(d.getSeconds())].join(':');\n  return [d.getDate(), months[d.getMonth()], time].join(' ');\n}\n\n\n// log is just a thin wrapper to console.log that prepends a timestamp\nexports.log = function() {\n  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));\n};\n\n\n/**\n * Inherit the prototype methods from one constructor into another.\n *\n * The Function.prototype.inherits from lang.js rewritten as a standalone\n * function (not on Function.prototype). NOTE: If this file is to be loaded\n * during bootstrapping this function needs to be rewritten using some native\n * functions as prototype setup using normal JavaScript does not work as\n * expected during bootstrapping (see mirror.js in r114903).\n *\n * @param {function} ctor Constructor function which needs to inherit the\n *     prototype.\n * @param {function} superCtor Constructor function to inherit prototype from.\n */\nexports.inherits = __webpack_require__(/*! inherits */ \"./node_modules/inherits/inherits_browser.js\");\n\nexports._extend = function(origin, add) {\n  // Don't do anything if add isn't an object\n  if (!add || !isObject(add)) return origin;\n\n  var keys = Object.keys(add);\n  var i = keys.length;\n  while (i--) {\n    origin[keys[i]] = add[keys[i]];\n  }\n  return origin;\n};\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nvar kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;\n\nexports.promisify = function promisify(original) {\n  if (typeof original !== 'function')\n    throw new TypeError('The \"original\" argument must be of type Function');\n\n  if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {\n    var fn = original[kCustomPromisifiedSymbol];\n    if (typeof fn !== 'function') {\n      throw new TypeError('The \"util.promisify.custom\" argument must be of type Function');\n    }\n    Object.defineProperty(fn, kCustomPromisifiedSymbol, {\n      value: fn, enumerable: false, writable: false, configurable: true\n    });\n    return fn;\n  }\n\n  function fn() {\n    var promiseResolve, promiseReject;\n    var promise = new Promise(function (resolve, reject) {\n      promiseResolve = resolve;\n      promiseReject = reject;\n    });\n\n    var args = [];\n    for (var i = 0; i < arguments.length; i++) {\n      args.push(arguments[i]);\n    }\n    args.push(function (err, value) {\n      if (err) {\n        promiseReject(err);\n      } else {\n        promiseResolve(value);\n      }\n    });\n\n    try {\n      original.apply(this, args);\n    } catch (err) {\n      promiseReject(err);\n    }\n\n    return promise;\n  }\n\n  Object.setPrototypeOf(fn, Object.getPrototypeOf(original));\n\n  if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {\n    value: fn, enumerable: false, writable: false, configurable: true\n  });\n  return Object.defineProperties(\n    fn,\n    getOwnPropertyDescriptors(original)\n  );\n}\n\nexports.promisify.custom = kCustomPromisifiedSymbol\n\nfunction callbackifyOnRejected(reason, cb) {\n  // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).\n  // Because `null` is a special error value in callbacks which means \"no error\n  // occurred\", we error-wrap so the callback consumer can distinguish between\n  // \"the promise rejected with null\" or \"the promise fulfilled with undefined\".\n  if (!reason) {\n    var newReason = new Error('Promise was rejected with a falsy value');\n    newReason.reason = reason;\n    reason = newReason;\n  }\n  return cb(reason);\n}\n\nfunction callbackify(original) {\n  if (typeof original !== 'function') {\n    throw new TypeError('The \"original\" argument must be of type Function');\n  }\n\n  // We DO NOT return the promise as it gives the user a false sense that\n  // the promise is actually somehow related to the callback's execution\n  // and that the callback throwing will reject the promise.\n  function callbackified() {\n    var args = [];\n    for (var i = 0; i < arguments.length; i++) {\n      args.push(arguments[i]);\n    }\n\n    var maybeCb = args.pop();\n    if (typeof maybeCb !== 'function') {\n      throw new TypeError('The last argument must be of type Function');\n    }\n    var self = this;\n    var cb = function() {\n      return maybeCb.apply(self, arguments);\n    };\n    // In true node style we process the callback on `nextTick` with all the\n    // implications (stack, `uncaughtException`, `async_hooks`)\n    original.apply(this, args)\n      .then(function(ret) { process.nextTick(cb.bind(null, null, ret)) },\n            function(rej) { process.nextTick(callbackifyOnRejected.bind(null, rej, cb)) });\n  }\n\n  Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));\n  Object.defineProperties(callbackified,\n                          getOwnPropertyDescriptors(original));\n  return callbackified;\n}\nexports.callbackify = callbackify;\n\n\n//# sourceURL=webpack://invisibles23/./node_modules/util/util.js?");

/***/ }),

/***/ "./node_modules/which-typed-array/index.js":
/*!*************************************************!*\
  !*** ./node_modules/which-typed-array/index.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar forEach = __webpack_require__(/*! for-each */ \"./node_modules/for-each/index.js\");\nvar availableTypedArrays = __webpack_require__(/*! available-typed-arrays */ \"./node_modules/available-typed-arrays/index.js\");\nvar callBound = __webpack_require__(/*! call-bind/callBound */ \"./node_modules/call-bind/callBound.js\");\nvar gOPD = __webpack_require__(/*! gopd */ \"./node_modules/gopd/index.js\");\n\nvar $toString = callBound('Object.prototype.toString');\nvar hasToStringTag = __webpack_require__(/*! has-tostringtag/shams */ \"./node_modules/has-tostringtag/shams.js\")();\n\nvar g = typeof globalThis === 'undefined' ? __webpack_require__.g : globalThis;\nvar typedArrays = availableTypedArrays();\n\nvar $slice = callBound('String.prototype.slice');\nvar toStrTags = {};\nvar getPrototypeOf = Object.getPrototypeOf; // require('getprototypeof');\nif (hasToStringTag && gOPD && getPrototypeOf) {\n\tforEach(typedArrays, function (typedArray) {\n\t\tif (typeof g[typedArray] === 'function') {\n\t\t\tvar arr = new g[typedArray]();\n\t\t\tif (Symbol.toStringTag in arr) {\n\t\t\t\tvar proto = getPrototypeOf(arr);\n\t\t\t\tvar descriptor = gOPD(proto, Symbol.toStringTag);\n\t\t\t\tif (!descriptor) {\n\t\t\t\t\tvar superProto = getPrototypeOf(proto);\n\t\t\t\t\tdescriptor = gOPD(superProto, Symbol.toStringTag);\n\t\t\t\t}\n\t\t\t\ttoStrTags[typedArray] = descriptor.get;\n\t\t\t}\n\t\t}\n\t});\n}\n\nvar tryTypedArrays = function tryAllTypedArrays(value) {\n\tvar foundName = false;\n\tforEach(toStrTags, function (getter, typedArray) {\n\t\tif (!foundName) {\n\t\t\ttry {\n\t\t\t\tvar name = getter.call(value);\n\t\t\t\tif (name === typedArray) {\n\t\t\t\t\tfoundName = name;\n\t\t\t\t}\n\t\t\t} catch (e) {}\n\t\t}\n\t});\n\treturn foundName;\n};\n\nvar isTypedArray = __webpack_require__(/*! is-typed-array */ \"./node_modules/is-typed-array/index.js\");\n\nmodule.exports = function whichTypedArray(value) {\n\tif (!isTypedArray(value)) { return false; }\n\tif (!hasToStringTag || !(Symbol.toStringTag in value)) { return $slice($toString(value), 8, -1); }\n\treturn tryTypedArrays(value);\n};\n\n\n//# sourceURL=webpack://invisibles23/./node_modules/which-typed-array/index.js?");

/***/ }),

/***/ "./src/js/main.js":
/*!************************!*\
  !*** ./src/js/main.js ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _modules_common_navbar_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modules/common/navbar.js */ \"./src/js/modules/common/navbar.js\");\n/* harmony import */ var _modules_common_ScrollToTop_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modules/common/ScrollToTop.js */ \"./src/js/modules/common/ScrollToTop.js\");\n/* harmony import */ var _modules_common_contactForm_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modules/common/contactForm.js */ \"./src/js/modules/common/contactForm.js\");\n/* harmony import */ var _modules_insertPodcasts_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./modules/insertPodcasts.js */ \"./src/js/modules/insertPodcasts.js\");\n/* harmony import */ var _modules_ressources_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./modules/ressources.js */ \"./src/js/modules/ressources.js\");\n/* harmony import */ var _modules_common_utils_helpers_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./modules/common/utils/helpers.js */ \"./src/js/modules/common/utils/helpers.js\");\n/* harmony import */ var _modules_common_newsletterForm_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./modules/common/newsletterForm.js */ \"./src/js/modules/common/newsletterForm.js\");\n\n\n\n\n\n\n\n\n/**\n * Initialize the webpage\n */\nasync function initialize() {    \n    const currentPage = window.location.pathname;\n\n    (0,_modules_common_navbar_js__WEBPACK_IMPORTED_MODULE_0__.navbar)(); // Initialize the navbar\n    (0,_modules_common_ScrollToTop_js__WEBPACK_IMPORTED_MODULE_1__.scrollToTop)(); // Initialize the scroll to top button\n    (0,_modules_common_newsletterForm_js__WEBPACK_IMPORTED_MODULE_6__.newsletterForm)(\"newsletterFooter\"); // Initialize the newsletter form (footer)\n   \n    if (currentPage === '/') {\n        (0,_modules_common_contactForm_js__WEBPACK_IMPORTED_MODULE_2__.contactForm)(\"#contactForm\"); // Initialize the contact form\n        (0,_modules_insertPodcasts_js__WEBPACK_IMPORTED_MODULE_3__.homepagePodcasts)(); // Get and create the last podcasts for the homepage section\n        (0,_modules_common_newsletterForm_js__WEBPACK_IMPORTED_MODULE_6__.newsletterForm)(\"newsletterC2A\"); // Initialize the newsletter form (c2a section)\n    }\n    else if (currentPage === '/podcasts/') {\n        (0,_modules_insertPodcasts_js__WEBPACK_IMPORTED_MODULE_3__.podcastsPage)(); // Get and create all the podcasts for podcasts page\n    }\n    else if (/ressources/.test(currentPage)) {\n        (0,_modules_ressources_js__WEBPACK_IMPORTED_MODULE_4__.searchBehavior)(); // Initialize search behavior\n        (0,_modules_common_utils_helpers_js__WEBPACK_IMPORTED_MODULE_5__.expandText)('card-text', 25); // Initialize the expand text behavior\n    }\n    else if (currentPage === '/contact/') {\n        (0,_modules_common_contactForm_js__WEBPACK_IMPORTED_MODULE_2__.contactForm)(\"#contactFormPage\"); // Initialize the contact form\n    }\n    \n    // Initialize bootstrap popovers (to remove if not used)\n    const popoverTriggerList = document.querySelectorAll('[data-bs-toggle=\"popover\"]')\n    const popoverList = [...popoverTriggerList].map(popoverTriggerEl => new bootstrap.Popover(popoverTriggerEl))\n}\n\nwindow.onload = initialize;\n\n//# sourceURL=webpack://invisibles23/./src/js/main.js?");

/***/ }),

/***/ "./src/js/modules/common/ScrollToTop.js":
/*!**********************************************!*\
  !*** ./src/js/modules/common/ScrollToTop.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"scrollToTop\": () => (/* binding */ scrollToTop)\n/* harmony export */ });\nfunction scrollToTop() {\n    const scrollToTopButton = document.getElementById('scrollToTopButton');\n\n    window.addEventListener(\"scroll\", event => {\n        const scrollPos = document.documentElement.scrollTop\n        if (scrollPos > 300) {\n            scrollToTopButton.style.display = 'block';\n        } else {\n            scrollToTopButton.style.display = 'none';\n        }\n    }, {passive: true})\n\n    scrollToTopButton.addEventListener('click', () => {\n        window.scrollTo({\n            top: 0,\n            behavior: 'smooth'\n        });\n    });\n}\n\n//# sourceURL=webpack://invisibles23/./src/js/modules/common/ScrollToTop.js?");

/***/ }),

/***/ "./src/js/modules/common/contactForm.js":
/*!**********************************************!*\
  !*** ./src/js/modules/common/contactForm.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"contactForm\": () => (/* binding */ contactForm)\n/* harmony export */ });\n/* harmony import */ var just_validate__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! just-validate */ \"./node_modules/just-validate/dist/just-validate.es.js\");\n/* harmony import */ var _emailjs_browser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @emailjs/browser */ \"./node_modules/@emailjs/browser/es/index.js\");\n/* harmony import */ var _utils_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/helpers */ \"./src/js/modules/common/utils/helpers.js\");\n/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/console-browserify/index.js */ \"./node_modules/console-browserify/index.js\");\n\n\n\n\nconst nameRegex = /^[^#+*/()=?°§$£!%_;:<>]+$/;\nconst messageRegex = /^[^\\[\\]{}<>]+$/;\n\nfunction contactForm(formID) {\n    const form = document.querySelector(formID);\n\n    const validator = new just_validate__WEBPACK_IMPORTED_MODULE_0__[\"default\"](formID, {\n        successFieldCssClass: 'is-valid', // CSS class to add when input is valid\n        errorFieldCssClass: 'is-invalid', // CSS class to add when input is invalid\n        errorLabelCssClass: 'invalid-feedback', // CSS class to add for error message\n        validateBeforeSubmitting: false,\n    });\n\n    const inputs = form.querySelectorAll('input, textarea');\n\n    inputs.forEach((input) => {\n        const inputType = input.getAttribute('type');\n        const inputID = input.getAttribute('id');\n        const isTextarea = (input.nodeName === 'TEXTAREA');\n        const rules = [];\n\n        if (inputType === 'text' || isTextarea) {\n            rules.push(\n                {\n                    rule: 'required',\n                    errorMessage: \"Ce champ est obligatoire\",\n                },\n                {\n                    rule: 'minLength',\n                    value: 2,\n                    errorMessage: \"Ce champ doit contenir au moins 2 caractères\",\n                },\n                {\n                    rule: 'maxLength',\n                    value: isTextarea ? 10000 : 50,\n                    errorMessage: `Ce champ ne peut pas contenir plus de ${isTextarea ? 10000 : 50} caractères`,\n                },\n                {\n                    rule: 'customRegexp',\n                    value: isTextarea ? messageRegex : nameRegex,\n                    errorMessage: \"Un caractère invalide a été détecté\",\n                }\n            );\n        } else if (inputType === 'email') {\n            rules.push(\n                {\n                    rule: 'required',\n                    errorMessage: \"Ce champ est obligatoire\",\n                },\n                {\n                    rule: 'email',\n                    errorMessage: \"Veuillez saisir une adresse email valide\",\n                }\n            );\n        }\n        \n        if(inputType !== 'hidden' && inputType !== 'submit') {\n            try {\n                validator.addField(`#${inputID}`, rules);\n            } catch (error) {\n                console.log(input)\n                console.log(rules);\n                console.log(error);\n            }\n        }        \n    });\n\n    validator.onSuccess((form) => {\n        handleSubmit(form);\n    });\n}\n\nfunction handleSubmit(formObject) {\n    // Get form input values and put them in an object\n    const formData = {\n        first_name: formObject.target.elements[\"first_name\"].value,\n        last_name: formObject.target.elements[\"last_name\"].value,\n        email: formObject.target.elements[\"email\"].value,\n        message: formObject.target.elements[\"message\"].value,\n    };\n\n    sendEmail(formData)\n    .then(function(response) {\n        // Display success message\n        (0,_utils_helpers__WEBPACK_IMPORTED_MODULE_2__.displayMessage)(\n            formObject, \n            \"Votre message a bien été envoyé. Merci !\", \n            {\n                success: \"#successMessage\", \n                error: \"#errorMessage\"\n            }, \n            \"success\"\n        );\n        console.log(\"SUCCESS!\", response.status, response.text);\n    })\n    .catch(function(error) {\n        // Display error message\n        (0,_utils_helpers__WEBPACK_IMPORTED_MODULE_2__.displayMessage)(\n            formObject, \n            \"Désolé, une erreur est survenue ! Réessayez plus tard et si le problème persiste, contactez l'administrateur du site.\", \n            {\n                success: \"#successMessage\",\n                error: \"#errorMessage\"\n            },\n            \"error\"\n        );\n        console.log(\"FAILED...\", error);\n    });\n}\n\nfunction sendEmail(data) {\n    return new Promise(function(resolve, reject) {\n        // Get environment variables from .env file\n        let serviceId = \"service_tjy46fw\";\n        let templateId = \"template_xr7tydo\";\n        let userId = \"iizyhd3n6xCNfKq-0\";\n        // Use EmailJS library or service to send the email\n        _emailjs_browser__WEBPACK_IMPORTED_MODULE_1__[\"default\"].send(\n            serviceId, \n            templateId, {\n                to_email: \"afra.amaya7@gmail.com\",\n                from_email: \"test@dev_invisibles23.com\",\n                subject: \"Test message for DEV\",\n                first_name: data.first_name,\n                last_name: data.last_name,\n                email: data.email,\n                message: data.message,\n            }, \n            userId,\n        )\n        .then(function(response) {\n            resolve(response); // Resolve the Promise when email is sent successfully\n        })\n        .catch(function(error) {\n            reject(error); // Reject the Promise if there is an error in sending the email\n        });\n    });\n}\n\n//# sourceURL=webpack://invisibles23/./src/js/modules/common/contactForm.js?");

/***/ }),

/***/ "./src/js/modules/common/navbar.js":
/*!*****************************************!*\
  !*** ./src/js/modules/common/navbar.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"navbar\": () => (/* binding */ navbar)\n/* harmony export */ });\nfunction navbar() {\n    /**\n     * Make navbar appear/disappear when scrolling.\n     */\n    window.addEventListener(\"scroll\", event => {\n        const scrollPos = document.documentElement.scrollTop\n        const nav = document.getElementsByClassName(\"navbar\")\n        \n        if(scrollPos >= 70) {\n            nav.item(0).classList.add(\"show\")\n        }\n        else {\n            nav.item(0).classList.remove(\"show\")\n        }  \n    }, {passive: true})\n}\n\n\n//# sourceURL=webpack://invisibles23/./src/js/modules/common/navbar.js?");

/***/ }),

/***/ "./src/js/modules/common/newsletterForm.js":
/*!*************************************************!*\
  !*** ./src/js/modules/common/newsletterForm.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"newsletterForm\": () => (/* binding */ newsletterForm)\n/* harmony export */ });\n/* harmony import */ var just_validate__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! just-validate */ \"./node_modules/just-validate/dist/just-validate.es.js\");\n/* harmony import */ var _utils_helpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/helpers */ \"./src/js/modules/common/utils/helpers.js\");\n/* harmony import */ var _utils_api__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/api */ \"./src/js/modules/common/utils/api.js\");\n\n\n\n\n/**\n * Initialize the newsletter form.\n * @param {string} formID - The ID of the form\n * @returns {void}\n * \n * @example\n * newsletterForm(\"newsletterFooter\");\n */\nfunction newsletterForm(formID) {\n    const inputID = `email-${formID}`;\n    const validator = new just_validate__WEBPACK_IMPORTED_MODULE_0__[\"default\"](`#${formID}`,\n        {\n            successFieldCssClass: ['is-valid'], // CSS class to add when input is valid\n            errorFieldCssClass: ['is-invalid'], // CSS class to add when input is invalid\n            errorLabelCssClass: ['invalid-feedback'], // CSS class to add for error message\n            validateBeforeSubmitting: false,\n            errorLabelCssClass: ['custom-invalid'],\n        }\n    );\n\n    validator\n        .addField(`#${inputID}`, [\n            {\n                rule: \"required\",\n                errorMessage: \"Merci d'indiquer votre adresse email\",\n            },\n            {\n                rule: 'email',\n                errorMessage: \"Merci d'indiquer une adresse email valide\",\n            },\n        ])\n        .onSuccess((form) => {\n            // If the form is valid, we add the contact to the list\n            handleNewsletterSubmit(form, form.target.elements[inputID].value);\n        }\n        )\n}\n\nasync function handleNewsletterSubmit(formObject, email) {\n    const formID = formObject.target.id;\n    const messageSelectors = {\n        success: `#${formID}SuccessMessage`,\n        warning: `#${formID}WarningMessage`,\n        error: `#${formID}ErrorMessage`,\n    };\n\n    try {\n        await (0,_utils_api__WEBPACK_IMPORTED_MODULE_2__.addContactToList)(email);\n        (0,_utils_helpers__WEBPACK_IMPORTED_MODULE_1__.displayMessage)(formObject, \"Votre adresse email a bien été ajoutée à la liste de diffusion. Merci !\", messageSelectors, \"success\");\n    } \n    catch (error) {\n        const errorStatus = error.response ? error.response.status : null;\n        let errorMessage = \"Désolé, une erreur est survenue ! Réessayez plus tard et si le problème persiste, contactez l'administrateur du site.\";\n        let errorType = \"error\";\n\n        if (errorStatus === 400) {\n            errorMessage = \"Cette adresse email est déjà inscrite à la liste de diffusion.\";\n            errorType = \"warning\";\n        }\n\n        (0,_utils_helpers__WEBPACK_IMPORTED_MODULE_1__.displayMessage)(formObject, errorMessage, messageSelectors, errorType);\n    }\n}\n\n//# sourceURL=webpack://invisibles23/./src/js/modules/common/newsletterForm.js?");

/***/ }),

/***/ "./src/js/modules/common/utils/PodcastPlayer.js":
/*!******************************************************!*\
  !*** ./src/js/modules/common/utils/PodcastPlayer.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"PodcastPlayer\": () => (/* binding */ PodcastPlayer)\n/* harmony export */ });\n/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/console-browserify/index.js */ \"./node_modules/console-browserify/index.js\");\n/**\n * PodcastPlayer class to play audio files from a URL.\n * @class\n * @example\n * // Create a new PodcastPlayer instance\n * let podcastPlayer = new PodcastPlayer(podcastData);\n * \n * // Attach the podcast player to a container\n * podcastPlayer.attachPodcastTo(container);\n */\nclass PodcastPlayer {\n    /**\n     * Creates an instance of PodcastPlayer.\n     * @constructor\n     * @param {Object} podcastData - The podcast data object\n     * @param {string} podcastData.id - The podcast ID\n     * @param {string} podcastData.image_url - The podcast image URL\n     * @param {string} podcastData.name - The podcast title\n     * @param {string} podcastData.html_description - The HTML podcast description\n     * @param {string} podcastData.created_at - The podcast creation date\n     * @param {string} podcastData.audio_url - The podcast audio URL\n     * @param {string} [classPrefix=''] - The prefix for CSS classes to offer possibility of styling multiple players\n     */\n    constructor(podcastData, classPrefix = '', descriptionWordLimit = 30) {\n        this.classPrefix = classPrefix; // Prefix for CSS classes\n        this.descriptionWordLimit  = descriptionWordLimit; // Limit of words for the description\n        this.podcastID = podcastData.id + \"_\" + Math.floor(Math.random() * (1000 - 1 + 1) + 1);\n        this.podcastImage = podcastData.image_url;\n        this.podcastTitle = podcastData.name;\n        this.podcastDescription = podcastData.html_description;\n        this.podcastDateCreation = this.convertDateFormat(podcastData.created_at);\n        this.audioUrl = podcastData.audio_url;\n        this.audioElement = new Audio(podcastData.audio_url);\n        this.isPlaying = false;\n        this.playPauseButton = PodcastPlayer.generateHtmlTag('i', { \n            className: 'playPause-btn bi bi-play-circle' \n        });\n    }\n  \n    // ========= Podcast player methods ========= //\n\n    /**\n     * Toggles the playback state of the audio.\n     * If currently playing, it pauses; if paused, it plays.\n     */\n    togglePlayback() {\n        if (this.isPlaying) {\n            this.pause();\n        } else {\n            this.play();\n        }\n    }\n\n    /**\n     * Plays the audio.\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/readyState|HTMLMediaElement.readyState}\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/HAVE_ENOUGH_DATA|HTMLMediaElement.HAVE_ENOUGH_DATA}\n     */\n    play() {\n        // Display loading wheel on play button\n        this.playPauseButton.className = 'load-icon';\n        \n        // HTMLMediaElement.HAVE_ENOUGH_DATA is always equal to 4 (see readyState link above)\n        if (this.audioElement.readyState >= HTMLMediaElement.HAVE_ENOUGH_DATA) {\n            // If audio is already loaded, remove the loading wheel and play the audio\n            this.playPauseButton.className = 'playPause-btn bi bi-pause-circle';\n            this.audioElement.play();\n            this.isPlaying = true;\n        } \n        else \n        {\n            // Load the audio (Safari requires this otherwise it won't play)\n            this.loadAudio();\n\n            const playAfterLoad = () => {\n                // Remove the event listener to avoid looping forever (ended calls loadAudio() again and triggers this event)\n                this.audioElement.removeEventListener('canplaythrough', playAfterLoad);\n\n                // Remove the loading wheel and play the audio\n                console.log('Audio loaded.');\n                this.playPauseButton.className = 'playPause-btn bi bi-pause-circle';\n                this.audioElement.play();\n                this.isPlaying = true;\n            };\n\n            this.audioElement.addEventListener('canplaythrough', playAfterLoad);\n\n            // If the audio fails to load, handle the error\n            this.audioElement.addEventListener('error', () => {\n                // Remove the loading wheel and reset the play button\n                this.playPauseButton.className = 'playPause-btn bi bi-play-circle';\n                this.isPlaying = false;\n                console.log('Error loading audio.');\n            });\n        }\n    }\n  \n    pause() {\n        this.audioElement.pause();\n        this.isPlaying = false;\n        this.playPauseButton.className = 'playPause-btn bi bi-play-circle';\n    }\n\n    // Not used (kept for reference)\n    stop() {\n        this.audioElement.pause();\n        this.audioElement.currentTime = 0;\n        this.isPlaying = false;\n    }\n  \n    backTenSeconds() {\n        this.audioElement.currentTime -= 10;\n    }\n  \n    forwardTenSeconds() {\n        this.audioElement.currentTime += 10;\n    }\n\n    /**\n     * Seeks the audio to the specified value.\n     * @param {number} seekBarValue - The seek bar value (0-100)\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/seeked_event|HTMLMediaElement.seeked}\n     */\n    seek(seekBarValue) {\n        // Show the loading indicator (spinner)\n        this.playPauseButton.className = 'load-icon';\n        // Calculate the new time when the seek bar is changed\n        let seekTo = this.audioElement.duration * (seekBarValue / 100); \n\n        // Check if seekTo is a valid value (can happen if user slides real hard to the right with cursor)\n        if (!isFinite(seekTo)) {\n            console.log('Invalid seek time:', seekTo);\n            seekTo = 0; // Set it to 0 as a default value\n        }\n\n        // Update the audio time to the new time\n        this.audioElement.currentTime = seekTo;\n\n        this.audioElement.addEventListener('seeked', () => {\n            // Resume audio playback if it was playing before seeking\n            if (this.isPlaying) {\n                // show the play button\n                this.playPauseButton.className = 'playPause-btn bi bi-pause-circle';\n                this.audioElement.play();\n            }\n        });\n    }\n\n    /**\n     * Sets the playback speed of the audio.\n     * @param {number} speed - The playback speed\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/playbackRate|HTMLMediaElement.playbackRate}\n     */\n    setPlaybackSpeed(speed) {\n        this.audioElement.playbackRate = speed;\n    }\n  \n    loadAudio() {\n        this.audioElement.load();\n    }\n\n    // ========= Helper methods ========= //\n\n    formatTime(time) {\n        return time < 10 ? '0' + time : time;\n    }\n\n    /**\n     * Method to attach event listeners to the share icons\n     * @param {string} linkToShare - The link to share\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Window/open|Window.open()}\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Window/open#Window_features|Window features}\n     */\n    attachShareEventListeners() {\n        function shareOnFacebook(linkToShare) {\n            // Open a new window with the Facebook share dialog\n            window.open(\n                `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(linkToShare)}`,\n                'facebook-share-dialog',\n                'width=800,height=600'\n            );\n        }\n\n        function shareOnTwitter(linkToShare) {\n            // Open a new window with the Twitter share dialog\n            window.open(\n                `https://twitter.com/intent/tweet?text=${encodeURIComponent(linkToShare)}`,\n                'twitter-share-dialog',\n                'width=800,height=600'\n            );\n        }\n\n        function shareOnLinkedIn(linkToShare) {\n            // Open a new window with the LinkedIn share dialog\n            window.open(\n                `https://www.linkedin.com/shareArticle?mini=true&url=${encodeURIComponent(linkToShare)}`,\n                'linkedin-share-dialog',\n                'width=800,height=600'\n            );\n        }\n\n        function shareViaEmail(linkToShare) {\n            const subject = 'Le Podcast \"Les Invisibles\" de Tamara Pellegrini';\n            const body = `Je souhaiterais partager ce podcast avec toi :\\n\\n ${linkToShare}`;\n            const url = `mailto:?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(body)}`;\n            window.location.href = url;\n            /**\n             * Reload the page after email client is opened to avoid error \"Not allowed to launch mailto because a user gesture is required\" (security issue)\n             * when the user tries to share different podcasts several times in a row (youtube has a better solution with a new tab opening but I can't find it).\n             * When user share several podcasts in a row, the first share works but the following ones don't and first request is sent again instead.\n             */\n            window.location.reload();\n        }\n\n        const shareIcons = document.querySelectorAll(`.share-icons-${this.podcastID}`);\n        const copyLinkButton = document.getElementById(`copyButton_${this.podcastID}`);\n        \n        shareIcons.forEach((icon) => {\n            icon.addEventListener('click', (event) => {\n                const linkToShare = this.audioUrl;\n                const icon = event.target;\n                // Get last class name of the icon (the social media platform)\n                const socialMedia = icon.classList[icon.classList.length - 1];\n                switch (socialMedia) {\n                    case 'bi-facebook':\n                        shareOnFacebook(linkToShare);\n                        break;\n                    case 'bi-twitter':\n                        shareOnTwitter(linkToShare);\n                        break;\n                    case 'bi-linkedin':\n                        shareOnLinkedIn(linkToShare);\n                        break;\n                    case 'bi-envelope':\n                        shareViaEmail(linkToShare);\n                        break;\n                    default:\n                        break;\n                }\n            });\n        });\n\n        copyLinkButton.addEventListener('click', () => {\n            const linkToShare = this.audioUrl;\n            // navigator.clipboard.writeText(linkToShare);\n            \n            navigator.clipboard.writeText(linkToShare).then(\n                () => {\n                    /* clipboard successfully set */\n                    console.log(\"clipboard successfully set\");\n                    copyLinkButton.textContent = 'Copié !';\n                    setTimeout(() => {\n                        copyLinkButton.textContent = 'Copier';\n                    }, 2000);\n                },\n                () => {\n                    /* clipboard write failed */\n                    console.log(\"clipboard write failed\");\n                }\n            );\n            console.log(this.audioUrl);\n        });\n    }\n\n    /**\n     * Static method to generate an HTML element dynamically.\n     *\n     * @param {string} tag - The HTML tag name of the element to create.\n     * @param {Object} options - Options for configuring the element.\n     * @param {string} [options.text=''] - The text content of the element.\n     * @param {string} [options.html=''] - The inner HTML of the element.\n     * @param {string} [options.className=''] - The class name to apply to the element.\n     * @param {Object} [attributes={}] - Additional attributes to set on the element.\n     * @returns {HTMLElement} The created HTML element.\n     *\n     * @example\n     * // Create a simple div with nothing inside\n     * const divElement = PodcastPlayer.generateHtmlTag('div');\n     *\n     * @example\n     * // Create a p with text \"Hello World!\"\n     * const pElement = PodcastPlayer.generateHtmlTag('p', { text: 'Hello World!' });\n     *\n     * @example\n     * // Create an img with className \"myImage\" and src \"www.mysource.com\"\n     * const imgElement = PodcastPlayer.generateHtmlTag('img', { className: 'myImage', src: 'www.mysource.com' });\n     *\n     * @example\n     * // Create a div with custom innerHTML, className, and attributes\n     * const customElement = PodcastPlayer.generateHtmlTag('div', {\n     *   html: '<span>Custom Content</span>',\n     *   className: 'myCustomClass',\n     *   dataAttribute: 'example',\n     * });\n     * \n     * @example\n     * // Since this is a static method, you can use it outside of an instance of PodcastPlayer class.\n     * // Create a div outside of an instance of PodcastPlayer class :\n     * \n     * const divElement = PodcastPlayer.generateHtmlTag('div', { className: 'myDiv' });\n     * document.body.appendChild(divElement);\n     */\n    static generateHtmlTag(tag, {text = '', html = '', className = '', ...attributes } = {}) {\n        const element = document.createElement(tag);\n    \n        if (text) {\n          element.textContent = text;\n        }\n\n        if (html) {\n            element.innerHTML = html;\n        }\n    \n        if (className) {\n          element.className = className;\n        }\n    \n        Object.entries(attributes).forEach(([key, value]) => {\n          element.setAttribute(key, value);\n        });\n    \n        return element;\n    }\n    \n    /**\n     * Converts a date string to a readable date format. It also adds leading zeros to the date and time values if needed.\n     * For example, \"2021-05-01T12:00:00\" becomes \"01/05/2021\".\n     * @param {*} dateString \n     * @returns \n     */\n    convertDateFormat(dateString) {\n        const date = new Date(dateString);\n        \n        // Extracting the components\n        const year = date.getFullYear();\n        const month = date.getMonth() + 1;\n        const day = date.getDate();\n        const hours = date.getHours();\n        const minutes = date.getMinutes();\n        const seconds = date.getSeconds();\n        \n        // Padding the values with leading zeros if needed\n        const formattedMonth = month.toString().padStart(2, '0');\n        const formattedDay = day.toString().padStart(2, '0');\n        const formattedHours = hours.toString().padStart(2, '0');\n        const formattedMinutes = minutes.toString().padStart(2, '0');\n        // const formattedSeconds = seconds.toString().padStart(2, '0');\n        \n        // Creating the readable date and time string\n        const readableDate = `${formattedDay}/${formattedMonth}/${year}`;\n        const readableTime = `${formattedHours}:${formattedMinutes}`;\n        \n        return {\n          date: readableDate,\n          time: readableTime\n        };\n    }\n\n    /**\n     * Limits the number of words in a string to avoid overflowing. It adds \"...\" at the end of the string if it is longer than the limit.\n     */\n    limitStringByWords(str, limit) {\n        // Split the string into an array of words\n        const words = str.split(' ');\n      \n        // Check if the number of words is already within the limit\n        if (words.length <= limit) {\n          return str;\n        }\n      \n        // Create a new array with the limited number of words\n        const limitedWords = words.slice(0, limit);\n      \n        // Join the limited words back into a string\n        const limitedString = limitedWords.join(' ');\n      \n        return limitedString + \" ...\";\n    }\n  \n    decodeHtmlEntities(str) {\n        let txt = new DOMParser().parseFromString(str, \"text/html\");    \n        return txt.documentElement.textContent;\n    }    \n    // ========= Element creation methods ========= //\n    \n    createPodcastImage() {\n        return PodcastPlayer.generateHtmlTag('img', { className: 'podcast-image', src: this.podcastImage });;\n    }\n\n    /**\n     * This method creates the text content of the podcast player.\n     * \n     * @param {*} isMobile - If true, the text content will be created for mobile devices.\n     * @returns \n     */\n    createText(isMobile = false) {\n        // Create a wrapper for the title and text (desktop only)\n        const textDivWrapper = PodcastPlayer.generateHtmlTag('div', { \n            className: isMobile? 'mobile-text-group hidden' : 'desktop-text-wrapper'\n        });\n    \n        // Title and text\n        const title = PodcastPlayer.generateHtmlTag('h4', { \n            text: this.limitStringByWords(this.podcastTitle, 10) || 'Sans titre' \n        });\n        const fullText = this.decodeHtmlEntities(this.podcastDescription) || 'Pas de description disponible ...';\n        const limitedText = this.limitStringByWords(fullText, isMobile ? 25 : this.descriptionWordLimit);\n    \n        // Create text container\n        const textContainer = PodcastPlayer.generateHtmlTag('div', {\n            className: isMobile ? 'mobile-podcast-description' : 'podcast-description',\n            html: limitedText\n        });\n    \n        // Create show more/show less link\n        const showMoreLink = PodcastPlayer.generateHtmlTag('a', { text: 'Voir plus' });\n    \n        let isFullText = false;\n    \n        const toggleText = () => {\n            textContainer.innerHTML = isFullText ? limitedText : fullText;\n            showMoreLink.textContent = isFullText ? 'Voir plus' : 'Voir moins';\n            textContainer.appendChild(showMoreLink);\n            isFullText = !isFullText;\n        };\n    \n        showMoreLink.addEventListener('click', (event) => {\n            event.preventDefault();\n            toggleText();\n        });\n    \n        // Add title, text container, and show more/show less link to desktop text wrapper\n        textDivWrapper.appendChild(title);\n        textDivWrapper.appendChild(textContainer);\n        textContainer.appendChild(showMoreLink);\n        //textDivWrapper.appendChild(showMoreLink);\n    \n        return textDivWrapper;\n    }    \n\n    createAudioNavCtrl() {\n        // Play/Pause button\n        this.playPauseButton.addEventListener('click', (e) => {\n            this.togglePlayback();\n        });\n\n        // Backward and forward buttons\n        const backButton = PodcastPlayer.generateHtmlTag('i', { className: 'bck-btn bi bi-arrow-counterclockwise' });\n        backButton.addEventListener('click', () => {\n            this.backTenSeconds();\n        });\n\n        const forwardButton = PodcastPlayer.generateHtmlTag('i', { className: 'fwd-btn bi bi-arrow-clockwise' });\n        forwardButton.addEventListener('click', () => {\n            this.forwardTenSeconds();\n        });\n        \n        // Audio controls wrapper (back, play/pause, forward)\n        const audioControls = PodcastPlayer.generateHtmlTag('div', { className: 'audio-ctrl-wrapper' });\n        audioControls.appendChild(backButton);\n        audioControls.appendChild(this.playPauseButton);\n        audioControls.appendChild(forwardButton);\n\n        return audioControls;\n    }\n\n    createSeekBar() {\n        // == Seek bar == //\n        const seekBarWrapper = PodcastPlayer.generateHtmlTag('div', { className: 'seek-bar-wrapper' });\n\n        const seekBar = PodcastPlayer.generateHtmlTag('input', { \n            className: 'seek-bar', \n            type: 'range', \n            min: 0, \n            max: 100, \n            value: 0 \n        });\n\n        // Update the seek bar when it is seeked\n        seekBar.addEventListener('input', (e) => {\n            this.seek(e.target.value);\n        });\n\n        const currentTime = PodcastPlayer.generateHtmlTag('span', { className: 'current-time', text: '00:00' });\n        const totalTime = PodcastPlayer.generateHtmlTag('span', { className: 'total-time', text: '00:00' });\n        \n        // Initialize totalTime text content on load\n        this.audioElement.addEventListener('loadedmetadata', () => {\n            let durationMinutes = Math.floor(this.audioElement.duration / 60);\n            let durationSeconds = Math.floor(this.audioElement.duration - durationMinutes * 60);\n            totalTime.textContent = this.formatTime(durationMinutes) + ':' + this.formatTime(durationSeconds);\n        });\n\n        // Update the seek bar as the audio plays\n        this.audioElement.addEventListener('timeupdate', () => {\n            if (!isNaN(this.audioElement.duration) && !isNaN(this.audioElement.currentTime)) {\n                seekBar.value = (this.audioElement.currentTime / this.audioElement.duration) * 100;\n\n                // Calculate the minutes and seconds of time left\n                let currentMinutes = Math.floor(this.audioElement.currentTime / 60);\n                let currentSeconds = Math.floor(this.audioElement.currentTime - currentMinutes * 60);\n                let durationMinutes = Math.floor(this.audioElement.duration / 60);\n                let durationSeconds = Math.floor(this.audioElement.duration - durationMinutes * 60);\n\n                // Add a leading zero to the minutes and seconds if they are less than 10\n                currentTime.textContent = this.formatTime(currentMinutes) + ':' + this.formatTime(currentSeconds);\n                totalTime.textContent = this.formatTime(durationMinutes) + ':' + this.formatTime(durationSeconds);\n            }\n        });\n\n        // Reset the seek bar when the audio ends\n        this.audioElement.addEventListener('ended', () => {\n                console.log('Audio ended');\n                seekBar.value = 0;\n                currentTime.textContent = '00:00';\n                this.playPauseButton.className = 'playPause-btn bi bi-play-circle';\n                this.isPlaying = false;\n                this.loadAudio(); // Reset the audio element (for Firefox)\n        });\n\n        // Add seek bar to seek bar wrapper\n        seekBarWrapper.appendChild(currentTime);\n        seekBarWrapper.appendChild(seekBar);\n        seekBarWrapper.appendChild(totalTime);\n\n        return seekBarWrapper;\n    }\n\n    createShareButton() {\n        const shareButton = document.createElement('i');\n        shareButton.className = 'bi bi-share';\n        shareButton.setAttribute('data-bs-toggle', 'modal');\n        shareButton.setAttribute('data-bs-target', `#shareModal_${this.podcastID}`);\n\n        return shareButton;\n    }\n\n    createSpeedButton() {\n        const speedButton = PodcastPlayer.generateHtmlTag('button', { \n            className: 'speed-btn', \n            type: 'button',\n            'data-bs-toggle': 'dropdown',\n            'aria-expanded': 'false'\n        });\n        const speedIcon = PodcastPlayer.generateHtmlTag('i', { className: 'bi bi-speedometer2' });\n        const speedOptions = [0.5, 1, 1.5, 2];\n        \n        const speedMenu = PodcastPlayer.generateHtmlTag('ul', { className: 'speed-menu dropdown-menu' });\n        \n        speedOptions.forEach((speed) => {\n            const speedItem = PodcastPlayer.generateHtmlTag('li');\n            const speedLink = PodcastPlayer.generateHtmlTag('a', { \n                text: speed + 'x', \n                className: 'dropdown-item'\n            });\n        \n            speedLink.addEventListener('click', () => {\n                this.setPlaybackSpeed(speed);\n            });\n        \n            speedItem.appendChild(speedLink);\n            speedMenu.appendChild(speedItem);\n        });\n        \n        speedButton.appendChild(speedIcon);\n        speedButton.appendChild(speedMenu);\n        \n        return speedButton;\n    }\n\n    createShareModal() {\n        const shareModal = PodcastPlayer.generateHtmlTag('div', {\n            className: 'modal fade',\n            id: `shareModal_${this.podcastID}`,\n            tabindex: '-1',\n            'aria-labelledby': 'shareModalLabel',\n            'aria-hidden': 'true'\n        });\n        \n        shareModal.innerHTML = `\n            <div class=\"modal-dialog modal-dialog-centered\">\n                <div class=\"modal-content\">\n                    <div class=\"modal-header\">\n                        <h4 class=\"modal-title\" id=\"shareModalLabel\">Partagez le podcast !</h4>\n                        <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n                    </div>\n                    <div class=\"modal-body\">\n                        <div class=\"d-flex gap-5 justify-content-center\">\n                            <i class=\"share-icons-${this.podcastID} social-icons bi bi-facebook\"></i>\n                            <i class=\"share-icons-${this.podcastID} social-icons bi bi-twitter\"></i>\n                            <i class=\"share-icons-${this.podcastID} social-icons bi bi-linkedin\"></i>\n                            <i class=\"share-icons-${this.podcastID} social-icons bi bi-envelope\"></i>\n                        </div>\n                        <hr />\n                        <div class=\"d-flex justify-content-center gap-3\">   \n                            <input type=\"text\" class=\"share-link form-control\" value=\"${this.audioUrl}\" />\n                            <button class=\"btn btn-primary copy-button\" id=\"copyButton_${this.podcastID}\">Copier</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `;\n\n        return shareModal;\n    }\n\n    createDownloadButton() {\n        const downloadButton = PodcastPlayer.generateHtmlTag('i', { className: 'bi bi-download' });\n        \n        downloadButton.addEventListener('click', async () => {\n            // Cool experimental feature, but not supported by all browsers yet, keep an eye on it\n            // https://web.dev/file-system-access/\n            \n            // try {\n            //     const options = {\n            //         suggestedName: this.podcastTitle, // Set the initial file name\n            //         types: [{\n            //                 description: 'Audio Files',\n            //                 accept: {\n            //                     'audio/*': ['.mp3', '.wav'] // Set the accepted file types\n            //                 }\n            //         }]\n            //     };\n            //     const handle = await window.showSaveFilePicker(options);\n            //     const writable = await handle.createWritable();\n          \n            //     const response = await fetch(this.audioUrl);\n            //     const blob = await response.blob();\n                \n            //     const contentType = response.headers.get('Content-Type');\n            //     const file = new File([blob], this.podcastTitle, { type: contentType });\n          \n            //     await writable.write(file);\n            //     await writable.close();\n            // } catch (error) {\n            //     console.error('Error while saving the file:', error);\n            // }\n\n            // Best solution for now\n            try {\n                const response = await fetch(this.audioUrl);\n                const blob = await response.blob();\n            \n                const contentType = response.headers.get('Content-Type');\n                const file = new File([blob], this.podcastTitle, { type: contentType });\n            \n                const downloadUrl = URL.createObjectURL(file);\n                const link = document.createElement('a');\n                link.href = downloadUrl;\n                link.download = this.podcastTitle; // Set the desired file name\n                link.click();\n            \n                URL.revokeObjectURL(downloadUrl);\n            } catch (error) {\n                console.error('Error while saving the file:', error);\n            }\n        });\n\n        return downloadButton;\n    }\n\n    createDateTimeWrapper() {\n        // Create a wrapper for the date and time\n        const dateWrapper = PodcastPlayer.generateHtmlTag('div', { className: 'date-wrapper' });\n        \n        const timeGroup = PodcastPlayer.generateHtmlTag('span', { \n            className: 'time-group', \n            html: `<i class=\"podcast-time-icon bi bi-clock\"></i> ${this.podcastDateCreation.time}` || \"Pas d'heure disponible ...\" \n        });\n\n        const dateSpan = PodcastPlayer.generateHtmlTag('span', {\n            className: 'date-group',\n            html: `<i class=\"podcast-date-icon bi bi-calendar\"></i> ${this.podcastDateCreation.date}` || \"Pas de date disponible ...\"\n        });\n\n        // Add time and date to date wrapper\n        dateWrapper.appendChild(timeGroup);\n        dateWrapper.appendChild(dateSpan);\n\n        return dateWrapper;\n    }\n\n    // ========= Main Method (attach podcast to DOM) ========= //\n\n    /**\n     * Attach the podcast to the DOM.\n     * @example\n     * const podcast = new PodcastPlayer({ ... });\n     * podcast.attachPodcastTo(document.body);\n     * @param {*} element \n     */\n    attachPodcastTo(element) {\n        // === Create main podcast containers === //\n        const podcastContainer = PodcastPlayer.generateHtmlTag('div', { \n            className: `${this.classPrefix ? this.classPrefix + '-' : ''}podcast-player` \n        });\n        const colOne = PodcastPlayer.generateHtmlTag('div', { className: 'col-one' });\n        const colTwo = PodcastPlayer.generateHtmlTag('div', { className: 'col-two' });\n        \n        // === Create all podcast elements & attach listeners (if needed) === //\n        const image = this.createPodcastImage(); // Podcast image\n        const mobileTextWrapper = this.createText(true);  // Podcast title and text (mobile)\n        const desktopTextWrapper = this.createText(); // Podcast title and text (desktop)\n        const audioNavControls = this.createAudioNavCtrl(); // Audio navigation controls (back, play/pause, forward)\n        const seekBar = this.createSeekBar(); // Seek bar\n        const shareButton = this.createShareButton(); // Share button\n        shareButton.addEventListener('click', this.attachShareEventListeners.bind(this)); // Attach event listeners to share button\n        const shareModal = this.createShareModal();  // Share modal\n        const downloadButton = this.createDownloadButton(); // Download button\n        const speedButton = this.createSpeedButton(); // Speed button\n        const dateTimeWrapper = this.createDateTimeWrapper(); // Date and time\n        const mobileDateTimeWrapper = dateTimeWrapper.cloneNode(true);\n        mobileDateTimeWrapper.classList.add('hidden'); // Hide date and time on mobile\n        \n        // Controls container (where all audio controls are) //\n        const controlsContainer = PodcastPlayer.generateHtmlTag('div', { className: 'player-controls' });        \n        controlsContainer.appendChild(audioNavControls);    \n        controlsContainer.appendChild(seekBar);\n        \n        // Share container\n        const shareContainer = PodcastPlayer.generateHtmlTag('div', { className: 'share-container' });\n        shareContainer.appendChild(speedButton);\n        shareContainer.appendChild(shareButton);\n        shareContainer.appendChild(shareModal);\n        shareContainer.appendChild(downloadButton);\n            \n        // === Append all elements to columns === // \n        // Column 1\n        colOne.appendChild(image);\n        colOne.appendChild(mobileTextWrapper); // Only visible on mobile\n        colOne.appendChild(controlsContainer);\n        colOne.appendChild(shareContainer);\n        colOne.appendChild(mobileDateTimeWrapper); // Only visible on mobile\n\n        // Column 2\n        colTwo.appendChild(desktopTextWrapper);\n        colTwo.appendChild(dateTimeWrapper);\n\n        // === Finally append columns to podcast container === //\n        podcastContainer.appendChild(colOne);\n        podcastContainer.appendChild(colTwo);\n        element.appendChild(podcastContainer);\n    }\n}\n\n//# sourceURL=webpack://invisibles23/./src/js/modules/common/utils/PodcastPlayer.js?");

/***/ }),

/***/ "./src/js/modules/common/utils/api.js":
/*!********************************************!*\
  !*** ./src/js/modules/common/utils/api.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"addContactToList\": () => (/* binding */ addContactToList),\n/* harmony export */   \"callPing\": () => (/* binding */ callPing),\n/* harmony export */   \"getAushaPodcasts\": () => (/* binding */ getAushaPodcasts),\n/* harmony export */   \"queryAPIAndCalculateTime\": () => (/* binding */ queryAPIAndCalculateTime)\n/* harmony export */ });\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helpers.js */ \"./src/js/modules/common/utils/helpers.js\");\n/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/console-browserify/index.js */ \"./node_modules/console-browserify/index.js\");\n\nconst axios = __webpack_require__(/*! axios */ \"./node_modules/axios/dist/browser/axios.cjs\");\nconst mailchimp = __webpack_require__(/*! @mailchimp/mailchimp_marketing */ \"./node_modules/@mailchimp/mailchimp_marketing/src/index.js\");\n\n\n/*\n    * Fetch sensitive data from the server.\n    * @returns {Promise} - Promise object representing the sensitive data\n    * @throws {Error} - Error object\n*/\nfunction fetchSensitiveData() {\n    return axios.get('/get_sensitive_info/')\n        .then(response => response.data)\n        .catch(error => {\n            console.error('Error fetching sensitive information:', error);\n        });\n}\n\n// ======================== //\n// === Aush Podcast API === //\n// ======================== //\n\n/**\n * Get the last 'n' podcasts from the Ausha API.\n * \n * @param {number} numberOfPodcasts - Number of podcasts to retrieve (if left empty, all podcasts are retrieved)\n * @returns {Promise} - Promise object representing the last 'n' podcasts\n * @throws {Error} - Error object\n * @example\n * // Get the last 4 podcasts\n * const n = 4;\n * getLastNPodcasts(n)\n *   .then(podcasts => {\n *     console.log('Last', n, 'podcasts:', podcasts);\n *  })\n * .catch(error => {\n *    // Handle the error\n *   console.error('Error retrieving podcasts:', error);\n * }\n */\nasync function getAushaPodcasts(numberOfPodcasts = 0) {\n    const url = \"https://developers.ausha.co/v1/shows/44497/podcasts\";\n    const tokens = await fetchSensitiveData();\n\n    // Set the headers\n    const headers = {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${tokens.ausha_api_token}`\n    };\n\n    try {\n        const response = await axios.get(url, { headers });\n        const allPodcasts = response.data;\n        console.log('All podcasts:', allPodcasts);\n\n        return (numberOfPodcasts > 0) ? allPodcasts.data.slice(0, numberOfPodcasts) : allPodcasts;\n    } catch (error) {\n        console.error('Error retrieving podcasts:', error);\n        throw error;\n    }\n}\n\n/**\n * Test the API query and calculate the elapsed time.\n */\nasync function queryAPIAndCalculateTime() {\n    const apiEndpoint = 'https://developers.ausha.co/v1/shows/44497/podcasts';\n    const startTime = new Date().getTime(); // Get the current time in milliseconds\n    const tokens = await fetchSensitiveData();\n\n    fetch(apiEndpoint, {\n        headers: {\n            'Authorization': `Bearer ${tokens.ausha_api_token}`\n        }\n    })\n        .then(response => response.json())\n        .then(data => {\n            const endTime = new Date().getTime(); // Get the current time after the API request completes\n            const elapsedTime = endTime - startTime; // Calculate the elapsed time in milliseconds\n            console.log(`API query completed in ${elapsedTime} ms`);\n            // Process the retrieved data here\n        })\n        .catch(error => {\n            console.error('Error querying API:', error);\n        });\n}\n\n// ===================== //\n// === Mailchimp API === //\n// ===================== //\n\nasync function callPing() {\n    try {\n        const tokens = await fetchSensitiveData();\n        mailchimp.setConfig({\n            apiKey: tokens.mailchimp_api_key,\n            server: 'us21',\n        });\n        console.log('Calling ping...');\n        const response = await mailchimp.ping.get();\n        console.log(response);\n    } catch (error) {\n        console.error('An error occurred while calling ping:', error);\n    }\n}\n\n/**\n * Add a contact to the Mailchimp list.\n * \n * @param {string} email - Email address of the contact\n * @param {int} test_status - For testing, set to any status code to simulate code being returned from the Mailchimp API (default: null)\n * @returns {Promise} - Promise object representing the response from the server\n * @throws {Error} - Error object\n * \n * @example\n * // Add a contact to the Mailchimp list with await\n * const email = 'test@gmail.com';\n * \n * try {\n *  const response = await addContactToList(email, test_status);\n * console.log('Response:', response);\n * } catch (error) {\n *  console.error('Error adding contact to list:', error);\n * }\n * \n * @example\n * // Simulate a http 400 error with test_status\n * const email = 'test@gmail.com'\n * \n * try {\n *  const response = await addContactToList(email, 400);\n *  console.log('Response:', response);\n * } catch (error) {\n *  console.error('Error adding contact to list:', error);\n * }\n */\nasync function addContactToList(email, test_status = null) {\n    // Get the CSRF token with getCookie()\n    const csrftoken = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.getCookie)('csrftoken');\n\n    console.log('csrftoken:', csrftoken);\n\n    // Send the request to the server      \n    const formData = new FormData();\n    formData.append('email', email);\n    formData.append('test_status', test_status)\n\n    try {\n        const response = await axios.post('/api/proxy/mailchimp/', formData, {\n            headers: {\n                'X-CSRFToken': csrftoken,\n                'Content-Type': 'multipart/form-data'  // Set the content type to form data\n            }\n        });\n        console.log('Response:', response);\n    } catch (error) {\n        console.error('Error adding contact to list:', error);\n        throw error;\n    }\n}\n\n//# sourceURL=webpack://invisibles23/./src/js/modules/common/utils/api.js?");

/***/ }),

/***/ "./src/js/modules/common/utils/helpers.js":
/*!************************************************!*\
  !*** ./src/js/modules/common/utils/helpers.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"displayMessage\": () => (/* binding */ displayMessage),\n/* harmony export */   \"expandText\": () => (/* binding */ expandText),\n/* harmony export */   \"getCookie\": () => (/* binding */ getCookie)\n/* harmony export */ });\n/**\n * Function to expand text with a toggle link to show more or less text.\n * \n * @param {*} textWrapperClass - The class of the wrapper of the text to expand\n * @param {*} limit - The number of words to show before the toggle link\n */\nfunction expandText(textWrapperClass, limit = 20) {\n    const wrappers = document.querySelectorAll(`.${textWrapperClass}`);\n\n    wrappers.forEach((wrapper, index) => {\n        let isExpanded = false;\n        const fullText = wrapper.innerText;\n\n        // get paragraph of the wrapper with the text\n        const paragraph = wrapper.querySelector('p');\n\n\n        // Count number of words\n        const wordCount = fullText.split(\" \").length;\n\n        // If the text is shorter than the limit, do nothing\n        if (wordCount <= limit) {\n            return;\n        }\n        \n        // Extract the first 20 words and add \"...\" at the end\n        const words = fullText.split(\" \");\n        let excerpt = words.slice(0, limit).join(\" \");\n        excerpt += \" ...\";\n        paragraph.innerText = excerpt;\n\n        // Create the toggle link\n        const toggleLink = document.createElement(\"a\");\n        toggleLink.setAttribute(\"class\", \"ressource-toggle\");\n        toggleLink.innerText = \"Voir plus\";\n        \n        // Add the toggle link after the text\n        paragraph.appendChild(toggleLink);\n\n        // Add event listener to the toggle link\n        toggleLink.addEventListener(\"click\", toggleText);\n\n        // Function to toggle the visibility of the full text\n        function toggleText() {\n            if (isExpanded) {\n                // Show the excerpt\n                paragraph.innerText = excerpt;\n                paragraph.appendChild(toggleLink);\n                toggleLink.innerText = \"Voir plus\";\n            } else {\n                // add text to the paragraph\n                paragraph.innerText = fullText;\n                // Show the full text\n                //wrapper.innerText = fullText;\n                paragraph.appendChild(toggleLink);\n                toggleLink.innerText = \"Voir moins\";\n            }\n            isExpanded = !isExpanded;\n        }\n    })\n}\n\n/**\n * Function to display a message on the form. \n * It will display a success message if the form was submitted successfully, or an error message if there was an error.\n * \n * @param {Object} formObject - The form object\n * @param {String} statusMessage - The message to display\n * @param {Object} containersID - The IDs of the containers for the success, warning and error messages\n * @param {String} type - The type of message (success or error)\n * @returns {void}\n * \n * @example\n * displayMessage(\n *  formObject,\n *  \"Désolé, une erreur est survenue ! Réessayez plus tard et si le problème persiste, contactez l'administrateur du site.\",\n *  {\n *      success: \"#successMessage\",\n *      warning: \"#warningMessage\",\n *      error: \"#errorMessage\",\n *  },\n *  \"error\"\n * );\n * \n * @example\n * displayMessage(\n *  formObject,\n *  \"Votre adresse email a bien été ajoutée à la liste de diffusion. Merci !\",\n *  {\n *      success: \"#successMessage\",\n *      warning: \"#warningMessage\",\n *      error: \"#errorMessage\",\n *  },\n *  \"success\"\n * );\n */\nfunction displayMessage(formObject, statusMessage, containersID, type) {\n    const currentForm = formObject.target;\n    // Get containers for success and error messages\n    const successContainer = currentForm.querySelector(containersID.success);\n    const warningContainer = currentForm.querySelector(containersID.warning);\n    const errorContainer = currentForm.querySelector(containersID.error);\n    const inputs = Array.from(currentForm.querySelectorAll(\"input, textarea\"));\n\n    const showMessage = (container, message) => {\n        container.innerHTML = message;\n        container.classList.replace(\"hideMessage\", \"showMessage\");\n    };\n\n    const hideMessage = (container) => {\n        container.classList.replace(\"showMessage\", \"hideMessage\");\n    };\n\n    const resetForm = () => {\n        inputs.forEach((input) => input.classList.remove(\"is-valid\"));\n        currentForm.reset();\n    };\n\n    if (type === \"success\") {\n        showMessage(successContainer, statusMessage);\n        setTimeout(() => {\n            hideMessage(successContainer);\n            resetForm();\n        }, 3000);\n    }\n    else if (type === \"warning\") {\n        showMessage(warningContainer, statusMessage);\n        setTimeout(() => {\n            hideMessage(warningContainer);\n            resetForm();\n        }, 5000);\n    }\n    else if (type === \"error\") {\n        showMessage(errorContainer, statusMessage);\n        setTimeout(() => {\n            hideMessage(errorContainer);\n            resetForm();\n        }, 5000);\n    }\n}\n\nfunction getCookie(name) {\n    const cookies = document.cookie.split(';');\n    const rawCookie = cookies.find(cookie => cookie.startsWith(name));\n    return rawCookie.split('=')[1];\n}\n\n//# sourceURL=webpack://invisibles23/./src/js/modules/common/utils/helpers.js?");

/***/ }),

/***/ "./src/js/modules/insertPodcasts.js":
/*!******************************************!*\
  !*** ./src/js/modules/insertPodcasts.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"homepagePodcasts\": () => (/* binding */ homepagePodcasts),\n/* harmony export */   \"podcastsPage\": () => (/* binding */ podcastsPage)\n/* harmony export */ });\n/* harmony import */ var _common_utils_PodcastPlayer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common/utils/PodcastPlayer.js */ \"./src/js/modules/common/utils/PodcastPlayer.js\");\n/* harmony import */ var _common_utils_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./common/utils/api.js */ \"./src/js/modules/common/utils/api.js\");\n/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/console-browserify/index.js */ \"./node_modules/console-browserify/index.js\");\n/**\n * Instantiate the PodcastPlayer class and attach it to the container\n */\n\n\n\n/**\n * Create the last podcasts for the homepage section\n * @returns {HTMLDivElement}\n */\nfunction homepagePodcasts() {\n    // Show the spinner\n    const spinners = document.querySelectorAll('.load-spinner');\n    spinners.forEach((spinner) => {\n        spinner.classList.remove('d-none');\n    });\n\n    // Get the last 4 podcasts from the API\n    const n = 4; // Get the last 4 podcasts\n    (0,_common_utils_api_js__WEBPACK_IMPORTED_MODULE_1__.getAushaPodcasts)(4)\n        .then(podcasts => {\n            // Hide the spinner\n            spinners.forEach((spinner) => {\n                spinner.classList.add('d-none');\n            });\n\n            console.log('Last', n, 'podcasts:', podcasts);\n            \n            // Assign the podcasts to the podcastArray\n            const podcastArray = podcasts;\n\n            // Get the containers where the podcast players will be attached\n            const playerContainers1 = document.querySelectorAll('.lastPodcast1');\n            const playerContainers2 = document.querySelectorAll('.lastPodcast2');\n            const playerContainers3 = document.querySelectorAll('.lastPodcast3');\n            const playerContainers4 = document.querySelectorAll('.lastPodcast4');\n\n            playerContainers1.forEach((playerContainer) => {\n                let podcastPlayer = new _common_utils_PodcastPlayer_js__WEBPACK_IMPORTED_MODULE_0__.PodcastPlayer(podcastArray[0]);\n                podcastPlayer.attachPodcastTo(playerContainer);\n            });\n            \n            playerContainers2.forEach((playerContainer) => {\n                let podcastPlayer = new _common_utils_PodcastPlayer_js__WEBPACK_IMPORTED_MODULE_0__.PodcastPlayer(podcastArray[1]);\n                podcastPlayer.attachPodcastTo(playerContainer);\n            });\n            \n            playerContainers3.forEach((playerContainer) => {\n                let podcastPlayer = new _common_utils_PodcastPlayer_js__WEBPACK_IMPORTED_MODULE_0__.PodcastPlayer(podcastArray[2]);\n                podcastPlayer.attachPodcastTo(playerContainer);\n            });\n\n            playerContainers4.forEach((playerContainer) => {\n                let podcastPlayer = new _common_utils_PodcastPlayer_js__WEBPACK_IMPORTED_MODULE_0__.PodcastPlayer(podcastArray[3]);\n                podcastPlayer.attachPodcastTo(playerContainer);\n            });\n        })\n        .catch(error => {\n            // Hide the spinner\n            spinners.forEach((spinner) => {\n                spinner.classList.add('d-none');\n            });\n            // Handle the error\n            console.error('Error retrieving podcasts:', error);\n        });\n}\n\n/**\n * Create the podcasts for the podcasts page\n * @returns {HTMLDivElement}\n */\nfunction podcastsPage() {\n    // Show the spinner\n    const spinner = document.getElementById('podcast-load-spin');\n    spinner.classList.remove('d-none');\n    \n    // Get all the podcasts from the API\n    (0,_common_utils_api_js__WEBPACK_IMPORTED_MODULE_1__.getAushaPodcasts)()\n        .then(podcasts => {\n            // Hide the spinner\n            spinner.classList.add('d-none');\n\n            // Assign the podcasts to the podcastArray\n            const podcastArray = podcasts.data; \n\n            const playersPerPage = 4;\n            let currentPage = 1;\n            const container = document.getElementById('podcasts-section-container');\n            \n            const totalPlayers = podcastArray.length;\n            const totalPages = Math.ceil(totalPlayers / playersPerPage);\n\n            /**\n             * Instantiate the players to display\n             */\n            function instantiatePlayers() {\n                const startIndex = (currentPage - 1) * playersPerPage; // Determine the start index of the players to display\n                const endIndex = startIndex + playersPerPage; // Determine the end index of the players to display\n                const players = podcastArray.slice(startIndex, endIndex); // Get the players to display \n    \n                // Clear container\n                container.innerHTML = '';\n\n                players.forEach(data => {\n                    const player = createPlayerRows(data);\n                    container.appendChild(player);\n                });\n\n                createPagination();\n            }\n\n            /**\n             * Create the rows for the players and attach them to the container\n             * @param {Object} podcastData\n             * @returns {HTMLDivElement}\n             */\n            function createPlayerRows(podcastData) {\n                let rowDiv = _common_utils_PodcastPlayer_js__WEBPACK_IMPORTED_MODULE_0__.PodcastPlayer.generateHtmlTag('div', {\n                    className: 'row mb-5',\n                });\n\n                let colDiv = _common_utils_PodcastPlayer_js__WEBPACK_IMPORTED_MODULE_0__.PodcastPlayer.generateHtmlTag('div', {\n                    className: 'col-12 d-flex justify-content-center',\n                });\n\n                let podcastPlayer = new _common_utils_PodcastPlayer_js__WEBPACK_IMPORTED_MODULE_0__.PodcastPlayer(podcastData, 'big', 60);\n                podcastPlayer.attachPodcastTo(colDiv);\n\n                rowDiv.appendChild(colDiv);\n\n                return rowDiv;\n            }\n\n            /**\n             * Create the pagination\n             * @returns {HTMLUListElement}\n             */\n            function createPagination() {\n                const paginationNav = _common_utils_PodcastPlayer_js__WEBPACK_IMPORTED_MODULE_0__.PodcastPlayer.generateHtmlTag('nav', {\n                    'aria-label' :'Page navigation podcasts',\n                    'className' : 'site-pagination'\n                });\n\n                const paginationUl = _common_utils_PodcastPlayer_js__WEBPACK_IMPORTED_MODULE_0__.PodcastPlayer.generateHtmlTag('ul', {\n                    className: 'pagination justify-content-center',\n                });\n\n                for (let i = 1; i <= totalPages; i++) {\n                    const listElement = _common_utils_PodcastPlayer_js__WEBPACK_IMPORTED_MODULE_0__.PodcastPlayer.generateHtmlTag('li', {\n                        className: 'page-item',\n                    });\n                    const link = _common_utils_PodcastPlayer_js__WEBPACK_IMPORTED_MODULE_0__.PodcastPlayer.generateHtmlTag('a', {\n                        className: 'page-link',\n                        href: '#',\n                        text: i,\n                    });\n                    if (i === currentPage) {\n                        link.classList.add('active');\n                    }\n                    link.addEventListener('click', () => {\n                        currentPage = i;\n                        instantiatePlayers();\n                    });\n                    listElement.appendChild(link);\n                    paginationUl.appendChild(listElement);\n                }\n                paginationNav.appendChild(paginationUl);\n                container.appendChild(paginationNav);\n            }\n\n            instantiatePlayers();\n        })\n        .catch(error => {\n            // Hide the spinner\n            spinner.classList.add('d-none');\n            // Handle the error\n            console.error('Error retrieving podcasts:', error);\n        });   \n}\n\n//# sourceURL=webpack://invisibles23/./src/js/modules/insertPodcasts.js?");

/***/ }),

/***/ "./src/js/modules/ressources.js":
/*!**************************************!*\
  !*** ./src/js/modules/ressources.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"searchBehavior\": () => (/* binding */ searchBehavior)\n/* harmony export */ });\n\n/**\n * Scroll down to the search results in ressources pages\n */\nfunction searchBehavior() {\n    const fullUrl = window.location.href;\n    const isKeywords = fullUrl.match(/keywords=([^&]*)/)\n    if(isKeywords) {\n        if(isKeywords[1] !== '') {\n            // Scroll down to the search results\n            window.scrollTo({\n                top: 400,\n                behavior: 'smooth'\n            });\n        }\n    }\n}\n\n//# sourceURL=webpack://invisibles23/./src/js/modules/ressources.js?");

/***/ }),

/***/ "?c5ea":
/*!********************!*\
  !*** fs (ignored) ***!
  \********************/
/***/ (() => {

eval("/* (ignored) */\n\n//# sourceURL=webpack://invisibles23/fs_(ignored)?");

/***/ }),

/***/ "./node_modules/axios/dist/browser/axios.cjs":
/*!***************************************************!*\
  !*** ./node_modules/axios/dist/browser/axios.cjs ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/* provided dependency */ var Buffer = __webpack_require__(/*! ./node_modules/buffer/index.js */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/console-browserify/index.js */ \"./node_modules/console-browserify/index.js\");\n// Axios v1.4.0 Copyright (c) 2023 Matt Zabriskie and contributors\n\n\nfunction bind(fn, thisArg) {\n  return function wrap() {\n    return fn.apply(thisArg, arguments);\n  };\n}\n\n// utils is a library of generic helper functions non-specific to axios\n\nconst {toString} = Object.prototype;\nconst {getPrototypeOf} = Object;\n\nconst kindOf = (cache => thing => {\n    const str = toString.call(thing);\n    return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());\n})(Object.create(null));\n\nconst kindOfTest = (type) => {\n  type = type.toLowerCase();\n  return (thing) => kindOf(thing) === type\n};\n\nconst typeOfTest = type => thing => typeof thing === type;\n\n/**\n * Determine if a value is an Array\n *\n * @param {Object} val The value to test\n *\n * @returns {boolean} True if value is an Array, otherwise false\n */\nconst {isArray} = Array;\n\n/**\n * Determine if a value is undefined\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if the value is undefined, otherwise false\n */\nconst isUndefined = typeOfTest('undefined');\n\n/**\n * Determine if a value is a Buffer\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Buffer, otherwise false\n */\nfunction isBuffer(val) {\n  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)\n    && isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);\n}\n\n/**\n * Determine if a value is an ArrayBuffer\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is an ArrayBuffer, otherwise false\n */\nconst isArrayBuffer = kindOfTest('ArrayBuffer');\n\n\n/**\n * Determine if a value is a view on an ArrayBuffer\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false\n */\nfunction isArrayBufferView(val) {\n  let result;\n  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {\n    result = ArrayBuffer.isView(val);\n  } else {\n    result = (val) && (val.buffer) && (isArrayBuffer(val.buffer));\n  }\n  return result;\n}\n\n/**\n * Determine if a value is a String\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a String, otherwise false\n */\nconst isString = typeOfTest('string');\n\n/**\n * Determine if a value is a Function\n *\n * @param {*} val The value to test\n * @returns {boolean} True if value is a Function, otherwise false\n */\nconst isFunction = typeOfTest('function');\n\n/**\n * Determine if a value is a Number\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Number, otherwise false\n */\nconst isNumber = typeOfTest('number');\n\n/**\n * Determine if a value is an Object\n *\n * @param {*} thing The value to test\n *\n * @returns {boolean} True if value is an Object, otherwise false\n */\nconst isObject = (thing) => thing !== null && typeof thing === 'object';\n\n/**\n * Determine if a value is a Boolean\n *\n * @param {*} thing The value to test\n * @returns {boolean} True if value is a Boolean, otherwise false\n */\nconst isBoolean = thing => thing === true || thing === false;\n\n/**\n * Determine if a value is a plain Object\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a plain Object, otherwise false\n */\nconst isPlainObject = (val) => {\n  if (kindOf(val) !== 'object') {\n    return false;\n  }\n\n  const prototype = getPrototypeOf(val);\n  return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);\n};\n\n/**\n * Determine if a value is a Date\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Date, otherwise false\n */\nconst isDate = kindOfTest('Date');\n\n/**\n * Determine if a value is a File\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a File, otherwise false\n */\nconst isFile = kindOfTest('File');\n\n/**\n * Determine if a value is a Blob\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Blob, otherwise false\n */\nconst isBlob = kindOfTest('Blob');\n\n/**\n * Determine if a value is a FileList\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a File, otherwise false\n */\nconst isFileList = kindOfTest('FileList');\n\n/**\n * Determine if a value is a Stream\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Stream, otherwise false\n */\nconst isStream = (val) => isObject(val) && isFunction(val.pipe);\n\n/**\n * Determine if a value is a FormData\n *\n * @param {*} thing The value to test\n *\n * @returns {boolean} True if value is an FormData, otherwise false\n */\nconst isFormData = (thing) => {\n  let kind;\n  return thing && (\n    (typeof FormData === 'function' && thing instanceof FormData) || (\n      isFunction(thing.append) && (\n        (kind = kindOf(thing)) === 'formdata' ||\n        // detect form-data instance\n        (kind === 'object' && isFunction(thing.toString) && thing.toString() === '[object FormData]')\n      )\n    )\n  )\n};\n\n/**\n * Determine if a value is a URLSearchParams object\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a URLSearchParams object, otherwise false\n */\nconst isURLSearchParams = kindOfTest('URLSearchParams');\n\n/**\n * Trim excess whitespace off the beginning and end of a string\n *\n * @param {String} str The String to trim\n *\n * @returns {String} The String freed of excess whitespace\n */\nconst trim = (str) => str.trim ?\n  str.trim() : str.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\n\n/**\n * Iterate over an Array or an Object invoking a function for each item.\n *\n * If `obj` is an Array callback will be called passing\n * the value, index, and complete array for each item.\n *\n * If 'obj' is an Object callback will be called passing\n * the value, key, and complete object for each property.\n *\n * @param {Object|Array} obj The object to iterate\n * @param {Function} fn The callback to invoke for each item\n *\n * @param {Boolean} [allOwnKeys = false]\n * @returns {any}\n */\nfunction forEach(obj, fn, {allOwnKeys = false} = {}) {\n  // Don't bother if no value provided\n  if (obj === null || typeof obj === 'undefined') {\n    return;\n  }\n\n  let i;\n  let l;\n\n  // Force an array if not already something iterable\n  if (typeof obj !== 'object') {\n    /*eslint no-param-reassign:0*/\n    obj = [obj];\n  }\n\n  if (isArray(obj)) {\n    // Iterate over array values\n    for (i = 0, l = obj.length; i < l; i++) {\n      fn.call(null, obj[i], i, obj);\n    }\n  } else {\n    // Iterate over object keys\n    const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);\n    const len = keys.length;\n    let key;\n\n    for (i = 0; i < len; i++) {\n      key = keys[i];\n      fn.call(null, obj[key], key, obj);\n    }\n  }\n}\n\nfunction findKey(obj, key) {\n  key = key.toLowerCase();\n  const keys = Object.keys(obj);\n  let i = keys.length;\n  let _key;\n  while (i-- > 0) {\n    _key = keys[i];\n    if (key === _key.toLowerCase()) {\n      return _key;\n    }\n  }\n  return null;\n}\n\nconst _global = (() => {\n  /*eslint no-undef:0*/\n  if (typeof globalThis !== \"undefined\") return globalThis;\n  return typeof self !== \"undefined\" ? self : (typeof window !== 'undefined' ? window : __webpack_require__.g)\n})();\n\nconst isContextDefined = (context) => !isUndefined(context) && context !== _global;\n\n/**\n * Accepts varargs expecting each argument to be an object, then\n * immutably merges the properties of each object and returns result.\n *\n * When multiple objects contain the same key the later object in\n * the arguments list will take precedence.\n *\n * Example:\n *\n * ```js\n * var result = merge({foo: 123}, {foo: 456});\n * console.log(result.foo); // outputs 456\n * ```\n *\n * @param {Object} obj1 Object to merge\n *\n * @returns {Object} Result of all merge properties\n */\nfunction merge(/* obj1, obj2, obj3, ... */) {\n  const {caseless} = isContextDefined(this) && this || {};\n  const result = {};\n  const assignValue = (val, key) => {\n    const targetKey = caseless && findKey(result, key) || key;\n    if (isPlainObject(result[targetKey]) && isPlainObject(val)) {\n      result[targetKey] = merge(result[targetKey], val);\n    } else if (isPlainObject(val)) {\n      result[targetKey] = merge({}, val);\n    } else if (isArray(val)) {\n      result[targetKey] = val.slice();\n    } else {\n      result[targetKey] = val;\n    }\n  };\n\n  for (let i = 0, l = arguments.length; i < l; i++) {\n    arguments[i] && forEach(arguments[i], assignValue);\n  }\n  return result;\n}\n\n/**\n * Extends object a by mutably adding to it the properties of object b.\n *\n * @param {Object} a The object to be extended\n * @param {Object} b The object to copy properties from\n * @param {Object} thisArg The object to bind function to\n *\n * @param {Boolean} [allOwnKeys]\n * @returns {Object} The resulting value of object a\n */\nconst extend = (a, b, thisArg, {allOwnKeys}= {}) => {\n  forEach(b, (val, key) => {\n    if (thisArg && isFunction(val)) {\n      a[key] = bind(val, thisArg);\n    } else {\n      a[key] = val;\n    }\n  }, {allOwnKeys});\n  return a;\n};\n\n/**\n * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)\n *\n * @param {string} content with BOM\n *\n * @returns {string} content value without BOM\n */\nconst stripBOM = (content) => {\n  if (content.charCodeAt(0) === 0xFEFF) {\n    content = content.slice(1);\n  }\n  return content;\n};\n\n/**\n * Inherit the prototype methods from one constructor into another\n * @param {function} constructor\n * @param {function} superConstructor\n * @param {object} [props]\n * @param {object} [descriptors]\n *\n * @returns {void}\n */\nconst inherits = (constructor, superConstructor, props, descriptors) => {\n  constructor.prototype = Object.create(superConstructor.prototype, descriptors);\n  constructor.prototype.constructor = constructor;\n  Object.defineProperty(constructor, 'super', {\n    value: superConstructor.prototype\n  });\n  props && Object.assign(constructor.prototype, props);\n};\n\n/**\n * Resolve object with deep prototype chain to a flat object\n * @param {Object} sourceObj source object\n * @param {Object} [destObj]\n * @param {Function|Boolean} [filter]\n * @param {Function} [propFilter]\n *\n * @returns {Object}\n */\nconst toFlatObject = (sourceObj, destObj, filter, propFilter) => {\n  let props;\n  let i;\n  let prop;\n  const merged = {};\n\n  destObj = destObj || {};\n  // eslint-disable-next-line no-eq-null,eqeqeq\n  if (sourceObj == null) return destObj;\n\n  do {\n    props = Object.getOwnPropertyNames(sourceObj);\n    i = props.length;\n    while (i-- > 0) {\n      prop = props[i];\n      if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {\n        destObj[prop] = sourceObj[prop];\n        merged[prop] = true;\n      }\n    }\n    sourceObj = filter !== false && getPrototypeOf(sourceObj);\n  } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);\n\n  return destObj;\n};\n\n/**\n * Determines whether a string ends with the characters of a specified string\n *\n * @param {String} str\n * @param {String} searchString\n * @param {Number} [position= 0]\n *\n * @returns {boolean}\n */\nconst endsWith = (str, searchString, position) => {\n  str = String(str);\n  if (position === undefined || position > str.length) {\n    position = str.length;\n  }\n  position -= searchString.length;\n  const lastIndex = str.indexOf(searchString, position);\n  return lastIndex !== -1 && lastIndex === position;\n};\n\n\n/**\n * Returns new array from array like object or null if failed\n *\n * @param {*} [thing]\n *\n * @returns {?Array}\n */\nconst toArray = (thing) => {\n  if (!thing) return null;\n  if (isArray(thing)) return thing;\n  let i = thing.length;\n  if (!isNumber(i)) return null;\n  const arr = new Array(i);\n  while (i-- > 0) {\n    arr[i] = thing[i];\n  }\n  return arr;\n};\n\n/**\n * Checking if the Uint8Array exists and if it does, it returns a function that checks if the\n * thing passed in is an instance of Uint8Array\n *\n * @param {TypedArray}\n *\n * @returns {Array}\n */\n// eslint-disable-next-line func-names\nconst isTypedArray = (TypedArray => {\n  // eslint-disable-next-line func-names\n  return thing => {\n    return TypedArray && thing instanceof TypedArray;\n  };\n})(typeof Uint8Array !== 'undefined' && getPrototypeOf(Uint8Array));\n\n/**\n * For each entry in the object, call the function with the key and value.\n *\n * @param {Object<any, any>} obj - The object to iterate over.\n * @param {Function} fn - The function to call for each entry.\n *\n * @returns {void}\n */\nconst forEachEntry = (obj, fn) => {\n  const generator = obj && obj[Symbol.iterator];\n\n  const iterator = generator.call(obj);\n\n  let result;\n\n  while ((result = iterator.next()) && !result.done) {\n    const pair = result.value;\n    fn.call(obj, pair[0], pair[1]);\n  }\n};\n\n/**\n * It takes a regular expression and a string, and returns an array of all the matches\n *\n * @param {string} regExp - The regular expression to match against.\n * @param {string} str - The string to search.\n *\n * @returns {Array<boolean>}\n */\nconst matchAll = (regExp, str) => {\n  let matches;\n  const arr = [];\n\n  while ((matches = regExp.exec(str)) !== null) {\n    arr.push(matches);\n  }\n\n  return arr;\n};\n\n/* Checking if the kindOfTest function returns true when passed an HTMLFormElement. */\nconst isHTMLForm = kindOfTest('HTMLFormElement');\n\nconst toCamelCase = str => {\n  return str.toLowerCase().replace(/[-_\\s]([a-z\\d])(\\w*)/g,\n    function replacer(m, p1, p2) {\n      return p1.toUpperCase() + p2;\n    }\n  );\n};\n\n/* Creating a function that will check if an object has a property. */\nconst hasOwnProperty = (({hasOwnProperty}) => (obj, prop) => hasOwnProperty.call(obj, prop))(Object.prototype);\n\n/**\n * Determine if a value is a RegExp object\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a RegExp object, otherwise false\n */\nconst isRegExp = kindOfTest('RegExp');\n\nconst reduceDescriptors = (obj, reducer) => {\n  const descriptors = Object.getOwnPropertyDescriptors(obj);\n  const reducedDescriptors = {};\n\n  forEach(descriptors, (descriptor, name) => {\n    if (reducer(descriptor, name, obj) !== false) {\n      reducedDescriptors[name] = descriptor;\n    }\n  });\n\n  Object.defineProperties(obj, reducedDescriptors);\n};\n\n/**\n * Makes all methods read-only\n * @param {Object} obj\n */\n\nconst freezeMethods = (obj) => {\n  reduceDescriptors(obj, (descriptor, name) => {\n    // skip restricted props in strict mode\n    if (isFunction(obj) && ['arguments', 'caller', 'callee'].indexOf(name) !== -1) {\n      return false;\n    }\n\n    const value = obj[name];\n\n    if (!isFunction(value)) return;\n\n    descriptor.enumerable = false;\n\n    if ('writable' in descriptor) {\n      descriptor.writable = false;\n      return;\n    }\n\n    if (!descriptor.set) {\n      descriptor.set = () => {\n        throw Error('Can not rewrite read-only method \\'' + name + '\\'');\n      };\n    }\n  });\n};\n\nconst toObjectSet = (arrayOrString, delimiter) => {\n  const obj = {};\n\n  const define = (arr) => {\n    arr.forEach(value => {\n      obj[value] = true;\n    });\n  };\n\n  isArray(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter));\n\n  return obj;\n};\n\nconst noop = () => {};\n\nconst toFiniteNumber = (value, defaultValue) => {\n  value = +value;\n  return Number.isFinite(value) ? value : defaultValue;\n};\n\nconst ALPHA = 'abcdefghijklmnopqrstuvwxyz';\n\nconst DIGIT = '0123456789';\n\nconst ALPHABET = {\n  DIGIT,\n  ALPHA,\n  ALPHA_DIGIT: ALPHA + ALPHA.toUpperCase() + DIGIT\n};\n\nconst generateString = (size = 16, alphabet = ALPHABET.ALPHA_DIGIT) => {\n  let str = '';\n  const {length} = alphabet;\n  while (size--) {\n    str += alphabet[Math.random() * length|0];\n  }\n\n  return str;\n};\n\n/**\n * If the thing is a FormData object, return true, otherwise return false.\n *\n * @param {unknown} thing - The thing to check.\n *\n * @returns {boolean}\n */\nfunction isSpecCompliantForm(thing) {\n  return !!(thing && isFunction(thing.append) && thing[Symbol.toStringTag] === 'FormData' && thing[Symbol.iterator]);\n}\n\nconst toJSONObject = (obj) => {\n  const stack = new Array(10);\n\n  const visit = (source, i) => {\n\n    if (isObject(source)) {\n      if (stack.indexOf(source) >= 0) {\n        return;\n      }\n\n      if(!('toJSON' in source)) {\n        stack[i] = source;\n        const target = isArray(source) ? [] : {};\n\n        forEach(source, (value, key) => {\n          const reducedValue = visit(value, i + 1);\n          !isUndefined(reducedValue) && (target[key] = reducedValue);\n        });\n\n        stack[i] = undefined;\n\n        return target;\n      }\n    }\n\n    return source;\n  };\n\n  return visit(obj, 0);\n};\n\nconst isAsyncFn = kindOfTest('AsyncFunction');\n\nconst isThenable = (thing) =>\n  thing && (isObject(thing) || isFunction(thing)) && isFunction(thing.then) && isFunction(thing.catch);\n\nvar utils = {\n  isArray,\n  isArrayBuffer,\n  isBuffer,\n  isFormData,\n  isArrayBufferView,\n  isString,\n  isNumber,\n  isBoolean,\n  isObject,\n  isPlainObject,\n  isUndefined,\n  isDate,\n  isFile,\n  isBlob,\n  isRegExp,\n  isFunction,\n  isStream,\n  isURLSearchParams,\n  isTypedArray,\n  isFileList,\n  forEach,\n  merge,\n  extend,\n  trim,\n  stripBOM,\n  inherits,\n  toFlatObject,\n  kindOf,\n  kindOfTest,\n  endsWith,\n  toArray,\n  forEachEntry,\n  matchAll,\n  isHTMLForm,\n  hasOwnProperty,\n  hasOwnProp: hasOwnProperty, // an alias to avoid ESLint no-prototype-builtins detection\n  reduceDescriptors,\n  freezeMethods,\n  toObjectSet,\n  toCamelCase,\n  noop,\n  toFiniteNumber,\n  findKey,\n  global: _global,\n  isContextDefined,\n  ALPHABET,\n  generateString,\n  isSpecCompliantForm,\n  toJSONObject,\n  isAsyncFn,\n  isThenable\n};\n\n/**\n * Create an Error with the specified message, config, error code, request and response.\n *\n * @param {string} message The error message.\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\n * @param {Object} [config] The config.\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n *\n * @returns {Error} The created error.\n */\nfunction AxiosError(message, code, config, request, response) {\n  Error.call(this);\n\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, this.constructor);\n  } else {\n    this.stack = (new Error()).stack;\n  }\n\n  this.message = message;\n  this.name = 'AxiosError';\n  code && (this.code = code);\n  config && (this.config = config);\n  request && (this.request = request);\n  response && (this.response = response);\n}\n\nutils.inherits(AxiosError, Error, {\n  toJSON: function toJSON() {\n    return {\n      // Standard\n      message: this.message,\n      name: this.name,\n      // Microsoft\n      description: this.description,\n      number: this.number,\n      // Mozilla\n      fileName: this.fileName,\n      lineNumber: this.lineNumber,\n      columnNumber: this.columnNumber,\n      stack: this.stack,\n      // Axios\n      config: utils.toJSONObject(this.config),\n      code: this.code,\n      status: this.response && this.response.status ? this.response.status : null\n    };\n  }\n});\n\nconst prototype$1 = AxiosError.prototype;\nconst descriptors = {};\n\n[\n  'ERR_BAD_OPTION_VALUE',\n  'ERR_BAD_OPTION',\n  'ECONNABORTED',\n  'ETIMEDOUT',\n  'ERR_NETWORK',\n  'ERR_FR_TOO_MANY_REDIRECTS',\n  'ERR_DEPRECATED',\n  'ERR_BAD_RESPONSE',\n  'ERR_BAD_REQUEST',\n  'ERR_CANCELED',\n  'ERR_NOT_SUPPORT',\n  'ERR_INVALID_URL'\n// eslint-disable-next-line func-names\n].forEach(code => {\n  descriptors[code] = {value: code};\n});\n\nObject.defineProperties(AxiosError, descriptors);\nObject.defineProperty(prototype$1, 'isAxiosError', {value: true});\n\n// eslint-disable-next-line func-names\nAxiosError.from = (error, code, config, request, response, customProps) => {\n  const axiosError = Object.create(prototype$1);\n\n  utils.toFlatObject(error, axiosError, function filter(obj) {\n    return obj !== Error.prototype;\n  }, prop => {\n    return prop !== 'isAxiosError';\n  });\n\n  AxiosError.call(axiosError, error.message, code, config, request, response);\n\n  axiosError.cause = error;\n\n  axiosError.name = error.name;\n\n  customProps && Object.assign(axiosError, customProps);\n\n  return axiosError;\n};\n\n// eslint-disable-next-line strict\nvar httpAdapter = null;\n\n/**\n * Determines if the given thing is a array or js object.\n *\n * @param {string} thing - The object or array to be visited.\n *\n * @returns {boolean}\n */\nfunction isVisitable(thing) {\n  return utils.isPlainObject(thing) || utils.isArray(thing);\n}\n\n/**\n * It removes the brackets from the end of a string\n *\n * @param {string} key - The key of the parameter.\n *\n * @returns {string} the key without the brackets.\n */\nfunction removeBrackets(key) {\n  return utils.endsWith(key, '[]') ? key.slice(0, -2) : key;\n}\n\n/**\n * It takes a path, a key, and a boolean, and returns a string\n *\n * @param {string} path - The path to the current key.\n * @param {string} key - The key of the current object being iterated over.\n * @param {string} dots - If true, the key will be rendered with dots instead of brackets.\n *\n * @returns {string} The path to the current key.\n */\nfunction renderKey(path, key, dots) {\n  if (!path) return key;\n  return path.concat(key).map(function each(token, i) {\n    // eslint-disable-next-line no-param-reassign\n    token = removeBrackets(token);\n    return !dots && i ? '[' + token + ']' : token;\n  }).join(dots ? '.' : '');\n}\n\n/**\n * If the array is an array and none of its elements are visitable, then it's a flat array.\n *\n * @param {Array<any>} arr - The array to check\n *\n * @returns {boolean}\n */\nfunction isFlatArray(arr) {\n  return utils.isArray(arr) && !arr.some(isVisitable);\n}\n\nconst predicates = utils.toFlatObject(utils, {}, null, function filter(prop) {\n  return /^is[A-Z]/.test(prop);\n});\n\n/**\n * Convert a data object to FormData\n *\n * @param {Object} obj\n * @param {?Object} [formData]\n * @param {?Object} [options]\n * @param {Function} [options.visitor]\n * @param {Boolean} [options.metaTokens = true]\n * @param {Boolean} [options.dots = false]\n * @param {?Boolean} [options.indexes = false]\n *\n * @returns {Object}\n **/\n\n/**\n * It converts an object into a FormData object\n *\n * @param {Object<any, any>} obj - The object to convert to form data.\n * @param {string} formData - The FormData object to append to.\n * @param {Object<string, any>} options\n *\n * @returns\n */\nfunction toFormData(obj, formData, options) {\n  if (!utils.isObject(obj)) {\n    throw new TypeError('target must be an object');\n  }\n\n  // eslint-disable-next-line no-param-reassign\n  formData = formData || new (FormData)();\n\n  // eslint-disable-next-line no-param-reassign\n  options = utils.toFlatObject(options, {\n    metaTokens: true,\n    dots: false,\n    indexes: false\n  }, false, function defined(option, source) {\n    // eslint-disable-next-line no-eq-null,eqeqeq\n    return !utils.isUndefined(source[option]);\n  });\n\n  const metaTokens = options.metaTokens;\n  // eslint-disable-next-line no-use-before-define\n  const visitor = options.visitor || defaultVisitor;\n  const dots = options.dots;\n  const indexes = options.indexes;\n  const _Blob = options.Blob || typeof Blob !== 'undefined' && Blob;\n  const useBlob = _Blob && utils.isSpecCompliantForm(formData);\n\n  if (!utils.isFunction(visitor)) {\n    throw new TypeError('visitor must be a function');\n  }\n\n  function convertValue(value) {\n    if (value === null) return '';\n\n    if (utils.isDate(value)) {\n      return value.toISOString();\n    }\n\n    if (!useBlob && utils.isBlob(value)) {\n      throw new AxiosError('Blob is not supported. Use a Buffer instead.');\n    }\n\n    if (utils.isArrayBuffer(value) || utils.isTypedArray(value)) {\n      return useBlob && typeof Blob === 'function' ? new Blob([value]) : Buffer.from(value);\n    }\n\n    return value;\n  }\n\n  /**\n   * Default visitor.\n   *\n   * @param {*} value\n   * @param {String|Number} key\n   * @param {Array<String|Number>} path\n   * @this {FormData}\n   *\n   * @returns {boolean} return true to visit the each prop of the value recursively\n   */\n  function defaultVisitor(value, key, path) {\n    let arr = value;\n\n    if (value && !path && typeof value === 'object') {\n      if (utils.endsWith(key, '{}')) {\n        // eslint-disable-next-line no-param-reassign\n        key = metaTokens ? key : key.slice(0, -2);\n        // eslint-disable-next-line no-param-reassign\n        value = JSON.stringify(value);\n      } else if (\n        (utils.isArray(value) && isFlatArray(value)) ||\n        ((utils.isFileList(value) || utils.endsWith(key, '[]')) && (arr = utils.toArray(value))\n        )) {\n        // eslint-disable-next-line no-param-reassign\n        key = removeBrackets(key);\n\n        arr.forEach(function each(el, index) {\n          !(utils.isUndefined(el) || el === null) && formData.append(\n            // eslint-disable-next-line no-nested-ternary\n            indexes === true ? renderKey([key], index, dots) : (indexes === null ? key : key + '[]'),\n            convertValue(el)\n          );\n        });\n        return false;\n      }\n    }\n\n    if (isVisitable(value)) {\n      return true;\n    }\n\n    formData.append(renderKey(path, key, dots), convertValue(value));\n\n    return false;\n  }\n\n  const stack = [];\n\n  const exposedHelpers = Object.assign(predicates, {\n    defaultVisitor,\n    convertValue,\n    isVisitable\n  });\n\n  function build(value, path) {\n    if (utils.isUndefined(value)) return;\n\n    if (stack.indexOf(value) !== -1) {\n      throw Error('Circular reference detected in ' + path.join('.'));\n    }\n\n    stack.push(value);\n\n    utils.forEach(value, function each(el, key) {\n      const result = !(utils.isUndefined(el) || el === null) && visitor.call(\n        formData, el, utils.isString(key) ? key.trim() : key, path, exposedHelpers\n      );\n\n      if (result === true) {\n        build(el, path ? path.concat(key) : [key]);\n      }\n    });\n\n    stack.pop();\n  }\n\n  if (!utils.isObject(obj)) {\n    throw new TypeError('data must be an object');\n  }\n\n  build(obj);\n\n  return formData;\n}\n\n/**\n * It encodes a string by replacing all characters that are not in the unreserved set with\n * their percent-encoded equivalents\n *\n * @param {string} str - The string to encode.\n *\n * @returns {string} The encoded string.\n */\nfunction encode$1(str) {\n  const charMap = {\n    '!': '%21',\n    \"'\": '%27',\n    '(': '%28',\n    ')': '%29',\n    '~': '%7E',\n    '%20': '+',\n    '%00': '\\x00'\n  };\n  return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {\n    return charMap[match];\n  });\n}\n\n/**\n * It takes a params object and converts it to a FormData object\n *\n * @param {Object<string, any>} params - The parameters to be converted to a FormData object.\n * @param {Object<string, any>} options - The options object passed to the Axios constructor.\n *\n * @returns {void}\n */\nfunction AxiosURLSearchParams(params, options) {\n  this._pairs = [];\n\n  params && toFormData(params, this, options);\n}\n\nconst prototype = AxiosURLSearchParams.prototype;\n\nprototype.append = function append(name, value) {\n  this._pairs.push([name, value]);\n};\n\nprototype.toString = function toString(encoder) {\n  const _encode = encoder ? function(value) {\n    return encoder.call(this, value, encode$1);\n  } : encode$1;\n\n  return this._pairs.map(function each(pair) {\n    return _encode(pair[0]) + '=' + _encode(pair[1]);\n  }, '').join('&');\n};\n\n/**\n * It replaces all instances of the characters `:`, `$`, `,`, `+`, `[`, and `]` with their\n * URI encoded counterparts\n *\n * @param {string} val The value to be encoded.\n *\n * @returns {string} The encoded value.\n */\nfunction encode(val) {\n  return encodeURIComponent(val).\n    replace(/%3A/gi, ':').\n    replace(/%24/g, '$').\n    replace(/%2C/gi, ',').\n    replace(/%20/g, '+').\n    replace(/%5B/gi, '[').\n    replace(/%5D/gi, ']');\n}\n\n/**\n * Build a URL by appending params to the end\n *\n * @param {string} url The base of the url (e.g., http://www.google.com)\n * @param {object} [params] The params to be appended\n * @param {?object} options\n *\n * @returns {string} The formatted url\n */\nfunction buildURL(url, params, options) {\n  /*eslint no-param-reassign:0*/\n  if (!params) {\n    return url;\n  }\n  \n  const _encode = options && options.encode || encode;\n\n  const serializeFn = options && options.serialize;\n\n  let serializedParams;\n\n  if (serializeFn) {\n    serializedParams = serializeFn(params, options);\n  } else {\n    serializedParams = utils.isURLSearchParams(params) ?\n      params.toString() :\n      new AxiosURLSearchParams(params, options).toString(_encode);\n  }\n\n  if (serializedParams) {\n    const hashmarkIndex = url.indexOf(\"#\");\n\n    if (hashmarkIndex !== -1) {\n      url = url.slice(0, hashmarkIndex);\n    }\n    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;\n  }\n\n  return url;\n}\n\nclass InterceptorManager {\n  constructor() {\n    this.handlers = [];\n  }\n\n  /**\n   * Add a new interceptor to the stack\n   *\n   * @param {Function} fulfilled The function to handle `then` for a `Promise`\n   * @param {Function} rejected The function to handle `reject` for a `Promise`\n   *\n   * @return {Number} An ID used to remove interceptor later\n   */\n  use(fulfilled, rejected, options) {\n    this.handlers.push({\n      fulfilled,\n      rejected,\n      synchronous: options ? options.synchronous : false,\n      runWhen: options ? options.runWhen : null\n    });\n    return this.handlers.length - 1;\n  }\n\n  /**\n   * Remove an interceptor from the stack\n   *\n   * @param {Number} id The ID that was returned by `use`\n   *\n   * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise\n   */\n  eject(id) {\n    if (this.handlers[id]) {\n      this.handlers[id] = null;\n    }\n  }\n\n  /**\n   * Clear all interceptors from the stack\n   *\n   * @returns {void}\n   */\n  clear() {\n    if (this.handlers) {\n      this.handlers = [];\n    }\n  }\n\n  /**\n   * Iterate over all the registered interceptors\n   *\n   * This method is particularly useful for skipping over any\n   * interceptors that may have become `null` calling `eject`.\n   *\n   * @param {Function} fn The function to call for each interceptor\n   *\n   * @returns {void}\n   */\n  forEach(fn) {\n    utils.forEach(this.handlers, function forEachHandler(h) {\n      if (h !== null) {\n        fn(h);\n      }\n    });\n  }\n}\n\nvar InterceptorManager$1 = InterceptorManager;\n\nvar transitionalDefaults = {\n  silentJSONParsing: true,\n  forcedJSONParsing: true,\n  clarifyTimeoutError: false\n};\n\nvar URLSearchParams$1 = typeof URLSearchParams !== 'undefined' ? URLSearchParams : AxiosURLSearchParams;\n\nvar FormData$1 = typeof FormData !== 'undefined' ? FormData : null;\n\nvar Blob$1 = typeof Blob !== 'undefined' ? Blob : null;\n\n/**\n * Determine if we're running in a standard browser environment\n *\n * This allows axios to run in a web worker, and react-native.\n * Both environments support XMLHttpRequest, but not fully standard globals.\n *\n * web workers:\n *  typeof window -> undefined\n *  typeof document -> undefined\n *\n * react-native:\n *  navigator.product -> 'ReactNative'\n * nativescript\n *  navigator.product -> 'NativeScript' or 'NS'\n *\n * @returns {boolean}\n */\nconst isStandardBrowserEnv = (() => {\n  let product;\n  if (typeof navigator !== 'undefined' && (\n    (product = navigator.product) === 'ReactNative' ||\n    product === 'NativeScript' ||\n    product === 'NS')\n  ) {\n    return false;\n  }\n\n  return typeof window !== 'undefined' && typeof document !== 'undefined';\n})();\n\n/**\n * Determine if we're running in a standard browser webWorker environment\n *\n * Although the `isStandardBrowserEnv` method indicates that\n * `allows axios to run in a web worker`, the WebWorker will still be\n * filtered out due to its judgment standard\n * `typeof window !== 'undefined' && typeof document !== 'undefined'`.\n * This leads to a problem when axios post `FormData` in webWorker\n */\n const isStandardBrowserWebWorkerEnv = (() => {\n  return (\n    typeof WorkerGlobalScope !== 'undefined' &&\n    // eslint-disable-next-line no-undef\n    self instanceof WorkerGlobalScope &&\n    typeof self.importScripts === 'function'\n  );\n})();\n\n\nvar platform = {\n  isBrowser: true,\n  classes: {\n    URLSearchParams: URLSearchParams$1,\n    FormData: FormData$1,\n    Blob: Blob$1\n  },\n  isStandardBrowserEnv,\n  isStandardBrowserWebWorkerEnv,\n  protocols: ['http', 'https', 'file', 'blob', 'url', 'data']\n};\n\nfunction toURLEncodedForm(data, options) {\n  return toFormData(data, new platform.classes.URLSearchParams(), Object.assign({\n    visitor: function(value, key, path, helpers) {\n      if (platform.isNode && utils.isBuffer(value)) {\n        this.append(key, value.toString('base64'));\n        return false;\n      }\n\n      return helpers.defaultVisitor.apply(this, arguments);\n    }\n  }, options));\n}\n\n/**\n * It takes a string like `foo[x][y][z]` and returns an array like `['foo', 'x', 'y', 'z']\n *\n * @param {string} name - The name of the property to get.\n *\n * @returns An array of strings.\n */\nfunction parsePropPath(name) {\n  // foo[x][y][z]\n  // foo.x.y.z\n  // foo-x-y-z\n  // foo x y z\n  return utils.matchAll(/\\w+|\\[(\\w*)]/g, name).map(match => {\n    return match[0] === '[]' ? '' : match[1] || match[0];\n  });\n}\n\n/**\n * Convert an array to an object.\n *\n * @param {Array<any>} arr - The array to convert to an object.\n *\n * @returns An object with the same keys and values as the array.\n */\nfunction arrayToObject(arr) {\n  const obj = {};\n  const keys = Object.keys(arr);\n  let i;\n  const len = keys.length;\n  let key;\n  for (i = 0; i < len; i++) {\n    key = keys[i];\n    obj[key] = arr[key];\n  }\n  return obj;\n}\n\n/**\n * It takes a FormData object and returns a JavaScript object\n *\n * @param {string} formData The FormData object to convert to JSON.\n *\n * @returns {Object<string, any> | null} The converted object.\n */\nfunction formDataToJSON(formData) {\n  function buildPath(path, value, target, index) {\n    let name = path[index++];\n    const isNumericKey = Number.isFinite(+name);\n    const isLast = index >= path.length;\n    name = !name && utils.isArray(target) ? target.length : name;\n\n    if (isLast) {\n      if (utils.hasOwnProp(target, name)) {\n        target[name] = [target[name], value];\n      } else {\n        target[name] = value;\n      }\n\n      return !isNumericKey;\n    }\n\n    if (!target[name] || !utils.isObject(target[name])) {\n      target[name] = [];\n    }\n\n    const result = buildPath(path, value, target[name], index);\n\n    if (result && utils.isArray(target[name])) {\n      target[name] = arrayToObject(target[name]);\n    }\n\n    return !isNumericKey;\n  }\n\n  if (utils.isFormData(formData) && utils.isFunction(formData.entries)) {\n    const obj = {};\n\n    utils.forEachEntry(formData, (name, value) => {\n      buildPath(parsePropPath(name), value, obj, 0);\n    });\n\n    return obj;\n  }\n\n  return null;\n}\n\nconst DEFAULT_CONTENT_TYPE = {\n  'Content-Type': undefined\n};\n\n/**\n * It takes a string, tries to parse it, and if it fails, it returns the stringified version\n * of the input\n *\n * @param {any} rawValue - The value to be stringified.\n * @param {Function} parser - A function that parses a string into a JavaScript object.\n * @param {Function} encoder - A function that takes a value and returns a string.\n *\n * @returns {string} A stringified version of the rawValue.\n */\nfunction stringifySafely(rawValue, parser, encoder) {\n  if (utils.isString(rawValue)) {\n    try {\n      (parser || JSON.parse)(rawValue);\n      return utils.trim(rawValue);\n    } catch (e) {\n      if (e.name !== 'SyntaxError') {\n        throw e;\n      }\n    }\n  }\n\n  return (encoder || JSON.stringify)(rawValue);\n}\n\nconst defaults = {\n\n  transitional: transitionalDefaults,\n\n  adapter: ['xhr', 'http'],\n\n  transformRequest: [function transformRequest(data, headers) {\n    const contentType = headers.getContentType() || '';\n    const hasJSONContentType = contentType.indexOf('application/json') > -1;\n    const isObjectPayload = utils.isObject(data);\n\n    if (isObjectPayload && utils.isHTMLForm(data)) {\n      data = new FormData(data);\n    }\n\n    const isFormData = utils.isFormData(data);\n\n    if (isFormData) {\n      if (!hasJSONContentType) {\n        return data;\n      }\n      return hasJSONContentType ? JSON.stringify(formDataToJSON(data)) : data;\n    }\n\n    if (utils.isArrayBuffer(data) ||\n      utils.isBuffer(data) ||\n      utils.isStream(data) ||\n      utils.isFile(data) ||\n      utils.isBlob(data)\n    ) {\n      return data;\n    }\n    if (utils.isArrayBufferView(data)) {\n      return data.buffer;\n    }\n    if (utils.isURLSearchParams(data)) {\n      headers.setContentType('application/x-www-form-urlencoded;charset=utf-8', false);\n      return data.toString();\n    }\n\n    let isFileList;\n\n    if (isObjectPayload) {\n      if (contentType.indexOf('application/x-www-form-urlencoded') > -1) {\n        return toURLEncodedForm(data, this.formSerializer).toString();\n      }\n\n      if ((isFileList = utils.isFileList(data)) || contentType.indexOf('multipart/form-data') > -1) {\n        const _FormData = this.env && this.env.FormData;\n\n        return toFormData(\n          isFileList ? {'files[]': data} : data,\n          _FormData && new _FormData(),\n          this.formSerializer\n        );\n      }\n    }\n\n    if (isObjectPayload || hasJSONContentType ) {\n      headers.setContentType('application/json', false);\n      return stringifySafely(data);\n    }\n\n    return data;\n  }],\n\n  transformResponse: [function transformResponse(data) {\n    const transitional = this.transitional || defaults.transitional;\n    const forcedJSONParsing = transitional && transitional.forcedJSONParsing;\n    const JSONRequested = this.responseType === 'json';\n\n    if (data && utils.isString(data) && ((forcedJSONParsing && !this.responseType) || JSONRequested)) {\n      const silentJSONParsing = transitional && transitional.silentJSONParsing;\n      const strictJSONParsing = !silentJSONParsing && JSONRequested;\n\n      try {\n        return JSON.parse(data);\n      } catch (e) {\n        if (strictJSONParsing) {\n          if (e.name === 'SyntaxError') {\n            throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);\n          }\n          throw e;\n        }\n      }\n    }\n\n    return data;\n  }],\n\n  /**\n   * A timeout in milliseconds to abort a request. If set to 0 (default) a\n   * timeout is not created.\n   */\n  timeout: 0,\n\n  xsrfCookieName: 'XSRF-TOKEN',\n  xsrfHeaderName: 'X-XSRF-TOKEN',\n\n  maxContentLength: -1,\n  maxBodyLength: -1,\n\n  env: {\n    FormData: platform.classes.FormData,\n    Blob: platform.classes.Blob\n  },\n\n  validateStatus: function validateStatus(status) {\n    return status >= 200 && status < 300;\n  },\n\n  headers: {\n    common: {\n      'Accept': 'application/json, text/plain, */*'\n    }\n  }\n};\n\nutils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {\n  defaults.headers[method] = {};\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);\n});\n\nvar defaults$1 = defaults;\n\n// RawAxiosHeaders whose duplicates are ignored by node\n// c.f. https://nodejs.org/api/http.html#http_message_headers\nconst ignoreDuplicateOf = utils.toObjectSet([\n  'age', 'authorization', 'content-length', 'content-type', 'etag',\n  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',\n  'last-modified', 'location', 'max-forwards', 'proxy-authorization',\n  'referer', 'retry-after', 'user-agent'\n]);\n\n/**\n * Parse headers into an object\n *\n * ```\n * Date: Wed, 27 Aug 2014 08:58:49 GMT\n * Content-Type: application/json\n * Connection: keep-alive\n * Transfer-Encoding: chunked\n * ```\n *\n * @param {String} rawHeaders Headers needing to be parsed\n *\n * @returns {Object} Headers parsed into an object\n */\nvar parseHeaders = rawHeaders => {\n  const parsed = {};\n  let key;\n  let val;\n  let i;\n\n  rawHeaders && rawHeaders.split('\\n').forEach(function parser(line) {\n    i = line.indexOf(':');\n    key = line.substring(0, i).trim().toLowerCase();\n    val = line.substring(i + 1).trim();\n\n    if (!key || (parsed[key] && ignoreDuplicateOf[key])) {\n      return;\n    }\n\n    if (key === 'set-cookie') {\n      if (parsed[key]) {\n        parsed[key].push(val);\n      } else {\n        parsed[key] = [val];\n      }\n    } else {\n      parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;\n    }\n  });\n\n  return parsed;\n};\n\nconst $internals = Symbol('internals');\n\nfunction normalizeHeader(header) {\n  return header && String(header).trim().toLowerCase();\n}\n\nfunction normalizeValue(value) {\n  if (value === false || value == null) {\n    return value;\n  }\n\n  return utils.isArray(value) ? value.map(normalizeValue) : String(value);\n}\n\nfunction parseTokens(str) {\n  const tokens = Object.create(null);\n  const tokensRE = /([^\\s,;=]+)\\s*(?:=\\s*([^,;]+))?/g;\n  let match;\n\n  while ((match = tokensRE.exec(str))) {\n    tokens[match[1]] = match[2];\n  }\n\n  return tokens;\n}\n\nconst isValidHeaderName = (str) => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());\n\nfunction matchHeaderValue(context, value, header, filter, isHeaderNameFilter) {\n  if (utils.isFunction(filter)) {\n    return filter.call(this, value, header);\n  }\n\n  if (isHeaderNameFilter) {\n    value = header;\n  }\n\n  if (!utils.isString(value)) return;\n\n  if (utils.isString(filter)) {\n    return value.indexOf(filter) !== -1;\n  }\n\n  if (utils.isRegExp(filter)) {\n    return filter.test(value);\n  }\n}\n\nfunction formatHeader(header) {\n  return header.trim()\n    .toLowerCase().replace(/([a-z\\d])(\\w*)/g, (w, char, str) => {\n      return char.toUpperCase() + str;\n    });\n}\n\nfunction buildAccessors(obj, header) {\n  const accessorName = utils.toCamelCase(' ' + header);\n\n  ['get', 'set', 'has'].forEach(methodName => {\n    Object.defineProperty(obj, methodName + accessorName, {\n      value: function(arg1, arg2, arg3) {\n        return this[methodName].call(this, header, arg1, arg2, arg3);\n      },\n      configurable: true\n    });\n  });\n}\n\nclass AxiosHeaders {\n  constructor(headers) {\n    headers && this.set(headers);\n  }\n\n  set(header, valueOrRewrite, rewrite) {\n    const self = this;\n\n    function setHeader(_value, _header, _rewrite) {\n      const lHeader = normalizeHeader(_header);\n\n      if (!lHeader) {\n        throw new Error('header name must be a non-empty string');\n      }\n\n      const key = utils.findKey(self, lHeader);\n\n      if(!key || self[key] === undefined || _rewrite === true || (_rewrite === undefined && self[key] !== false)) {\n        self[key || _header] = normalizeValue(_value);\n      }\n    }\n\n    const setHeaders = (headers, _rewrite) =>\n      utils.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));\n\n    if (utils.isPlainObject(header) || header instanceof this.constructor) {\n      setHeaders(header, valueOrRewrite);\n    } else if(utils.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {\n      setHeaders(parseHeaders(header), valueOrRewrite);\n    } else {\n      header != null && setHeader(valueOrRewrite, header, rewrite);\n    }\n\n    return this;\n  }\n\n  get(header, parser) {\n    header = normalizeHeader(header);\n\n    if (header) {\n      const key = utils.findKey(this, header);\n\n      if (key) {\n        const value = this[key];\n\n        if (!parser) {\n          return value;\n        }\n\n        if (parser === true) {\n          return parseTokens(value);\n        }\n\n        if (utils.isFunction(parser)) {\n          return parser.call(this, value, key);\n        }\n\n        if (utils.isRegExp(parser)) {\n          return parser.exec(value);\n        }\n\n        throw new TypeError('parser must be boolean|regexp|function');\n      }\n    }\n  }\n\n  has(header, matcher) {\n    header = normalizeHeader(header);\n\n    if (header) {\n      const key = utils.findKey(this, header);\n\n      return !!(key && this[key] !== undefined && (!matcher || matchHeaderValue(this, this[key], key, matcher)));\n    }\n\n    return false;\n  }\n\n  delete(header, matcher) {\n    const self = this;\n    let deleted = false;\n\n    function deleteHeader(_header) {\n      _header = normalizeHeader(_header);\n\n      if (_header) {\n        const key = utils.findKey(self, _header);\n\n        if (key && (!matcher || matchHeaderValue(self, self[key], key, matcher))) {\n          delete self[key];\n\n          deleted = true;\n        }\n      }\n    }\n\n    if (utils.isArray(header)) {\n      header.forEach(deleteHeader);\n    } else {\n      deleteHeader(header);\n    }\n\n    return deleted;\n  }\n\n  clear(matcher) {\n    const keys = Object.keys(this);\n    let i = keys.length;\n    let deleted = false;\n\n    while (i--) {\n      const key = keys[i];\n      if(!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {\n        delete this[key];\n        deleted = true;\n      }\n    }\n\n    return deleted;\n  }\n\n  normalize(format) {\n    const self = this;\n    const headers = {};\n\n    utils.forEach(this, (value, header) => {\n      const key = utils.findKey(headers, header);\n\n      if (key) {\n        self[key] = normalizeValue(value);\n        delete self[header];\n        return;\n      }\n\n      const normalized = format ? formatHeader(header) : String(header).trim();\n\n      if (normalized !== header) {\n        delete self[header];\n      }\n\n      self[normalized] = normalizeValue(value);\n\n      headers[normalized] = true;\n    });\n\n    return this;\n  }\n\n  concat(...targets) {\n    return this.constructor.concat(this, ...targets);\n  }\n\n  toJSON(asStrings) {\n    const obj = Object.create(null);\n\n    utils.forEach(this, (value, header) => {\n      value != null && value !== false && (obj[header] = asStrings && utils.isArray(value) ? value.join(', ') : value);\n    });\n\n    return obj;\n  }\n\n  [Symbol.iterator]() {\n    return Object.entries(this.toJSON())[Symbol.iterator]();\n  }\n\n  toString() {\n    return Object.entries(this.toJSON()).map(([header, value]) => header + ': ' + value).join('\\n');\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'AxiosHeaders';\n  }\n\n  static from(thing) {\n    return thing instanceof this ? thing : new this(thing);\n  }\n\n  static concat(first, ...targets) {\n    const computed = new this(first);\n\n    targets.forEach((target) => computed.set(target));\n\n    return computed;\n  }\n\n  static accessor(header) {\n    const internals = this[$internals] = (this[$internals] = {\n      accessors: {}\n    });\n\n    const accessors = internals.accessors;\n    const prototype = this.prototype;\n\n    function defineAccessor(_header) {\n      const lHeader = normalizeHeader(_header);\n\n      if (!accessors[lHeader]) {\n        buildAccessors(prototype, _header);\n        accessors[lHeader] = true;\n      }\n    }\n\n    utils.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);\n\n    return this;\n  }\n}\n\nAxiosHeaders.accessor(['Content-Type', 'Content-Length', 'Accept', 'Accept-Encoding', 'User-Agent', 'Authorization']);\n\nutils.freezeMethods(AxiosHeaders.prototype);\nutils.freezeMethods(AxiosHeaders);\n\nvar AxiosHeaders$1 = AxiosHeaders;\n\n/**\n * Transform the data for a request or a response\n *\n * @param {Array|Function} fns A single function or Array of functions\n * @param {?Object} response The response object\n *\n * @returns {*} The resulting transformed data\n */\nfunction transformData(fns, response) {\n  const config = this || defaults$1;\n  const context = response || config;\n  const headers = AxiosHeaders$1.from(context.headers);\n  let data = context.data;\n\n  utils.forEach(fns, function transform(fn) {\n    data = fn.call(config, data, headers.normalize(), response ? response.status : undefined);\n  });\n\n  headers.normalize();\n\n  return data;\n}\n\nfunction isCancel(value) {\n  return !!(value && value.__CANCEL__);\n}\n\n/**\n * A `CanceledError` is an object that is thrown when an operation is canceled.\n *\n * @param {string=} message The message.\n * @param {Object=} config The config.\n * @param {Object=} request The request.\n *\n * @returns {CanceledError} The created error.\n */\nfunction CanceledError(message, config, request) {\n  // eslint-disable-next-line no-eq-null,eqeqeq\n  AxiosError.call(this, message == null ? 'canceled' : message, AxiosError.ERR_CANCELED, config, request);\n  this.name = 'CanceledError';\n}\n\nutils.inherits(CanceledError, AxiosError, {\n  __CANCEL__: true\n});\n\n/**\n * Resolve or reject a Promise based on response status.\n *\n * @param {Function} resolve A function that resolves the promise.\n * @param {Function} reject A function that rejects the promise.\n * @param {object} response The response.\n *\n * @returns {object} The response.\n */\nfunction settle(resolve, reject, response) {\n  const validateStatus = response.config.validateStatus;\n  if (!response.status || !validateStatus || validateStatus(response.status)) {\n    resolve(response);\n  } else {\n    reject(new AxiosError(\n      'Request failed with status code ' + response.status,\n      [AxiosError.ERR_BAD_REQUEST, AxiosError.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],\n      response.config,\n      response.request,\n      response\n    ));\n  }\n}\n\nvar cookies = platform.isStandardBrowserEnv ?\n\n// Standard browser envs support document.cookie\n  (function standardBrowserEnv() {\n    return {\n      write: function write(name, value, expires, path, domain, secure) {\n        const cookie = [];\n        cookie.push(name + '=' + encodeURIComponent(value));\n\n        if (utils.isNumber(expires)) {\n          cookie.push('expires=' + new Date(expires).toGMTString());\n        }\n\n        if (utils.isString(path)) {\n          cookie.push('path=' + path);\n        }\n\n        if (utils.isString(domain)) {\n          cookie.push('domain=' + domain);\n        }\n\n        if (secure === true) {\n          cookie.push('secure');\n        }\n\n        document.cookie = cookie.join('; ');\n      },\n\n      read: function read(name) {\n        const match = document.cookie.match(new RegExp('(^|;\\\\s*)(' + name + ')=([^;]*)'));\n        return (match ? decodeURIComponent(match[3]) : null);\n      },\n\n      remove: function remove(name) {\n        this.write(name, '', Date.now() - 86400000);\n      }\n    };\n  })() :\n\n// Non standard browser env (web workers, react-native) lack needed support.\n  (function nonStandardBrowserEnv() {\n    return {\n      write: function write() {},\n      read: function read() { return null; },\n      remove: function remove() {}\n    };\n  })();\n\n/**\n * Determines whether the specified URL is absolute\n *\n * @param {string} url The URL to test\n *\n * @returns {boolean} True if the specified URL is absolute, otherwise false\n */\nfunction isAbsoluteURL(url) {\n  // A URL is considered absolute if it begins with \"<scheme>://\" or \"//\" (protocol-relative URL).\n  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed\n  // by any combination of letters, digits, plus, period, or hyphen.\n  return /^([a-z][a-z\\d+\\-.]*:)?\\/\\//i.test(url);\n}\n\n/**\n * Creates a new URL by combining the specified URLs\n *\n * @param {string} baseURL The base URL\n * @param {string} relativeURL The relative URL\n *\n * @returns {string} The combined URL\n */\nfunction combineURLs(baseURL, relativeURL) {\n  return relativeURL\n    ? baseURL.replace(/\\/+$/, '') + '/' + relativeURL.replace(/^\\/+/, '')\n    : baseURL;\n}\n\n/**\n * Creates a new URL by combining the baseURL with the requestedURL,\n * only when the requestedURL is not already an absolute URL.\n * If the requestURL is absolute, this function returns the requestedURL untouched.\n *\n * @param {string} baseURL The base URL\n * @param {string} requestedURL Absolute or relative URL to combine\n *\n * @returns {string} The combined full path\n */\nfunction buildFullPath(baseURL, requestedURL) {\n  if (baseURL && !isAbsoluteURL(requestedURL)) {\n    return combineURLs(baseURL, requestedURL);\n  }\n  return requestedURL;\n}\n\nvar isURLSameOrigin = platform.isStandardBrowserEnv ?\n\n// Standard browser envs have full support of the APIs needed to test\n// whether the request URL is of the same origin as current location.\n  (function standardBrowserEnv() {\n    const msie = /(msie|trident)/i.test(navigator.userAgent);\n    const urlParsingNode = document.createElement('a');\n    let originURL;\n\n    /**\n    * Parse a URL to discover it's components\n    *\n    * @param {String} url The URL to be parsed\n    * @returns {Object}\n    */\n    function resolveURL(url) {\n      let href = url;\n\n      if (msie) {\n        // IE needs attribute set twice to normalize properties\n        urlParsingNode.setAttribute('href', href);\n        href = urlParsingNode.href;\n      }\n\n      urlParsingNode.setAttribute('href', href);\n\n      // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils\n      return {\n        href: urlParsingNode.href,\n        protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',\n        host: urlParsingNode.host,\n        search: urlParsingNode.search ? urlParsingNode.search.replace(/^\\?/, '') : '',\n        hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',\n        hostname: urlParsingNode.hostname,\n        port: urlParsingNode.port,\n        pathname: (urlParsingNode.pathname.charAt(0) === '/') ?\n          urlParsingNode.pathname :\n          '/' + urlParsingNode.pathname\n      };\n    }\n\n    originURL = resolveURL(window.location.href);\n\n    /**\n    * Determine if a URL shares the same origin as the current location\n    *\n    * @param {String} requestURL The URL to test\n    * @returns {boolean} True if URL shares the same origin, otherwise false\n    */\n    return function isURLSameOrigin(requestURL) {\n      const parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;\n      return (parsed.protocol === originURL.protocol &&\n          parsed.host === originURL.host);\n    };\n  })() :\n\n  // Non standard browser envs (web workers, react-native) lack needed support.\n  (function nonStandardBrowserEnv() {\n    return function isURLSameOrigin() {\n      return true;\n    };\n  })();\n\nfunction parseProtocol(url) {\n  const match = /^([-+\\w]{1,25})(:?\\/\\/|:)/.exec(url);\n  return match && match[1] || '';\n}\n\n/**\n * Calculate data maxRate\n * @param {Number} [samplesCount= 10]\n * @param {Number} [min= 1000]\n * @returns {Function}\n */\nfunction speedometer(samplesCount, min) {\n  samplesCount = samplesCount || 10;\n  const bytes = new Array(samplesCount);\n  const timestamps = new Array(samplesCount);\n  let head = 0;\n  let tail = 0;\n  let firstSampleTS;\n\n  min = min !== undefined ? min : 1000;\n\n  return function push(chunkLength) {\n    const now = Date.now();\n\n    const startedAt = timestamps[tail];\n\n    if (!firstSampleTS) {\n      firstSampleTS = now;\n    }\n\n    bytes[head] = chunkLength;\n    timestamps[head] = now;\n\n    let i = tail;\n    let bytesCount = 0;\n\n    while (i !== head) {\n      bytesCount += bytes[i++];\n      i = i % samplesCount;\n    }\n\n    head = (head + 1) % samplesCount;\n\n    if (head === tail) {\n      tail = (tail + 1) % samplesCount;\n    }\n\n    if (now - firstSampleTS < min) {\n      return;\n    }\n\n    const passed = startedAt && now - startedAt;\n\n    return passed ? Math.round(bytesCount * 1000 / passed) : undefined;\n  };\n}\n\nfunction progressEventReducer(listener, isDownloadStream) {\n  let bytesNotified = 0;\n  const _speedometer = speedometer(50, 250);\n\n  return e => {\n    const loaded = e.loaded;\n    const total = e.lengthComputable ? e.total : undefined;\n    const progressBytes = loaded - bytesNotified;\n    const rate = _speedometer(progressBytes);\n    const inRange = loaded <= total;\n\n    bytesNotified = loaded;\n\n    const data = {\n      loaded,\n      total,\n      progress: total ? (loaded / total) : undefined,\n      bytes: progressBytes,\n      rate: rate ? rate : undefined,\n      estimated: rate && total && inRange ? (total - loaded) / rate : undefined,\n      event: e\n    };\n\n    data[isDownloadStream ? 'download' : 'upload'] = true;\n\n    listener(data);\n  };\n}\n\nconst isXHRAdapterSupported = typeof XMLHttpRequest !== 'undefined';\n\nvar xhrAdapter = isXHRAdapterSupported && function (config) {\n  return new Promise(function dispatchXhrRequest(resolve, reject) {\n    let requestData = config.data;\n    const requestHeaders = AxiosHeaders$1.from(config.headers).normalize();\n    const responseType = config.responseType;\n    let onCanceled;\n    function done() {\n      if (config.cancelToken) {\n        config.cancelToken.unsubscribe(onCanceled);\n      }\n\n      if (config.signal) {\n        config.signal.removeEventListener('abort', onCanceled);\n      }\n    }\n\n    if (utils.isFormData(requestData)) {\n      if (platform.isStandardBrowserEnv || platform.isStandardBrowserWebWorkerEnv) {\n        requestHeaders.setContentType(false); // Let the browser set it\n      } else {\n        requestHeaders.setContentType('multipart/form-data;', false); // mobile/desktop app frameworks\n      }\n    }\n\n    let request = new XMLHttpRequest();\n\n    // HTTP basic authentication\n    if (config.auth) {\n      const username = config.auth.username || '';\n      const password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';\n      requestHeaders.set('Authorization', 'Basic ' + btoa(username + ':' + password));\n    }\n\n    const fullPath = buildFullPath(config.baseURL, config.url);\n\n    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);\n\n    // Set the request timeout in MS\n    request.timeout = config.timeout;\n\n    function onloadend() {\n      if (!request) {\n        return;\n      }\n      // Prepare the response\n      const responseHeaders = AxiosHeaders$1.from(\n        'getAllResponseHeaders' in request && request.getAllResponseHeaders()\n      );\n      const responseData = !responseType || responseType === 'text' || responseType === 'json' ?\n        request.responseText : request.response;\n      const response = {\n        data: responseData,\n        status: request.status,\n        statusText: request.statusText,\n        headers: responseHeaders,\n        config,\n        request\n      };\n\n      settle(function _resolve(value) {\n        resolve(value);\n        done();\n      }, function _reject(err) {\n        reject(err);\n        done();\n      }, response);\n\n      // Clean up request\n      request = null;\n    }\n\n    if ('onloadend' in request) {\n      // Use onloadend if available\n      request.onloadend = onloadend;\n    } else {\n      // Listen for ready state to emulate onloadend\n      request.onreadystatechange = function handleLoad() {\n        if (!request || request.readyState !== 4) {\n          return;\n        }\n\n        // The request errored out and we didn't get a response, this will be\n        // handled by onerror instead\n        // With one exception: request that using file: protocol, most browsers\n        // will return status as 0 even though it's a successful request\n        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {\n          return;\n        }\n        // readystate handler is calling before onerror or ontimeout handlers,\n        // so we should call onloadend on the next 'tick'\n        setTimeout(onloadend);\n      };\n    }\n\n    // Handle browser request cancellation (as opposed to a manual cancellation)\n    request.onabort = function handleAbort() {\n      if (!request) {\n        return;\n      }\n\n      reject(new AxiosError('Request aborted', AxiosError.ECONNABORTED, config, request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle low level network errors\n    request.onerror = function handleError() {\n      // Real errors are hidden from us by the browser\n      // onerror should only fire if it's a network error\n      reject(new AxiosError('Network Error', AxiosError.ERR_NETWORK, config, request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle timeout\n    request.ontimeout = function handleTimeout() {\n      let timeoutErrorMessage = config.timeout ? 'timeout of ' + config.timeout + 'ms exceeded' : 'timeout exceeded';\n      const transitional = config.transitional || transitionalDefaults;\n      if (config.timeoutErrorMessage) {\n        timeoutErrorMessage = config.timeoutErrorMessage;\n      }\n      reject(new AxiosError(\n        timeoutErrorMessage,\n        transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED,\n        config,\n        request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Add xsrf header\n    // This is only done if running in a standard browser environment.\n    // Specifically not if we're in a web worker, or react-native.\n    if (platform.isStandardBrowserEnv) {\n      // Add xsrf header\n      const xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath))\n        && config.xsrfCookieName && cookies.read(config.xsrfCookieName);\n\n      if (xsrfValue) {\n        requestHeaders.set(config.xsrfHeaderName, xsrfValue);\n      }\n    }\n\n    // Remove Content-Type if data is undefined\n    requestData === undefined && requestHeaders.setContentType(null);\n\n    // Add headers to the request\n    if ('setRequestHeader' in request) {\n      utils.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {\n        request.setRequestHeader(key, val);\n      });\n    }\n\n    // Add withCredentials to request if needed\n    if (!utils.isUndefined(config.withCredentials)) {\n      request.withCredentials = !!config.withCredentials;\n    }\n\n    // Add responseType to request if needed\n    if (responseType && responseType !== 'json') {\n      request.responseType = config.responseType;\n    }\n\n    // Handle progress if needed\n    if (typeof config.onDownloadProgress === 'function') {\n      request.addEventListener('progress', progressEventReducer(config.onDownloadProgress, true));\n    }\n\n    // Not all browsers support upload events\n    if (typeof config.onUploadProgress === 'function' && request.upload) {\n      request.upload.addEventListener('progress', progressEventReducer(config.onUploadProgress));\n    }\n\n    if (config.cancelToken || config.signal) {\n      // Handle cancellation\n      // eslint-disable-next-line func-names\n      onCanceled = cancel => {\n        if (!request) {\n          return;\n        }\n        reject(!cancel || cancel.type ? new CanceledError(null, config, request) : cancel);\n        request.abort();\n        request = null;\n      };\n\n      config.cancelToken && config.cancelToken.subscribe(onCanceled);\n      if (config.signal) {\n        config.signal.aborted ? onCanceled() : config.signal.addEventListener('abort', onCanceled);\n      }\n    }\n\n    const protocol = parseProtocol(fullPath);\n\n    if (protocol && platform.protocols.indexOf(protocol) === -1) {\n      reject(new AxiosError('Unsupported protocol ' + protocol + ':', AxiosError.ERR_BAD_REQUEST, config));\n      return;\n    }\n\n\n    // Send the request\n    request.send(requestData || null);\n  });\n};\n\nconst knownAdapters = {\n  http: httpAdapter,\n  xhr: xhrAdapter\n};\n\nutils.forEach(knownAdapters, (fn, value) => {\n  if(fn) {\n    try {\n      Object.defineProperty(fn, 'name', {value});\n    } catch (e) {\n      // eslint-disable-next-line no-empty\n    }\n    Object.defineProperty(fn, 'adapterName', {value});\n  }\n});\n\nvar adapters = {\n  getAdapter: (adapters) => {\n    adapters = utils.isArray(adapters) ? adapters : [adapters];\n\n    const {length} = adapters;\n    let nameOrAdapter;\n    let adapter;\n\n    for (let i = 0; i < length; i++) {\n      nameOrAdapter = adapters[i];\n      if((adapter = utils.isString(nameOrAdapter) ? knownAdapters[nameOrAdapter.toLowerCase()] : nameOrAdapter)) {\n        break;\n      }\n    }\n\n    if (!adapter) {\n      if (adapter === false) {\n        throw new AxiosError(\n          `Adapter ${nameOrAdapter} is not supported by the environment`,\n          'ERR_NOT_SUPPORT'\n        );\n      }\n\n      throw new Error(\n        utils.hasOwnProp(knownAdapters, nameOrAdapter) ?\n          `Adapter '${nameOrAdapter}' is not available in the build` :\n          `Unknown adapter '${nameOrAdapter}'`\n      );\n    }\n\n    if (!utils.isFunction(adapter)) {\n      throw new TypeError('adapter is not a function');\n    }\n\n    return adapter;\n  },\n  adapters: knownAdapters\n};\n\n/**\n * Throws a `CanceledError` if cancellation has been requested.\n *\n * @param {Object} config The config that is to be used for the request\n *\n * @returns {void}\n */\nfunction throwIfCancellationRequested(config) {\n  if (config.cancelToken) {\n    config.cancelToken.throwIfRequested();\n  }\n\n  if (config.signal && config.signal.aborted) {\n    throw new CanceledError(null, config);\n  }\n}\n\n/**\n * Dispatch a request to the server using the configured adapter.\n *\n * @param {object} config The config that is to be used for the request\n *\n * @returns {Promise} The Promise to be fulfilled\n */\nfunction dispatchRequest(config) {\n  throwIfCancellationRequested(config);\n\n  config.headers = AxiosHeaders$1.from(config.headers);\n\n  // Transform request data\n  config.data = transformData.call(\n    config,\n    config.transformRequest\n  );\n\n  if (['post', 'put', 'patch'].indexOf(config.method) !== -1) {\n    config.headers.setContentType('application/x-www-form-urlencoded', false);\n  }\n\n  const adapter = adapters.getAdapter(config.adapter || defaults$1.adapter);\n\n  return adapter(config).then(function onAdapterResolution(response) {\n    throwIfCancellationRequested(config);\n\n    // Transform response data\n    response.data = transformData.call(\n      config,\n      config.transformResponse,\n      response\n    );\n\n    response.headers = AxiosHeaders$1.from(response.headers);\n\n    return response;\n  }, function onAdapterRejection(reason) {\n    if (!isCancel(reason)) {\n      throwIfCancellationRequested(config);\n\n      // Transform response data\n      if (reason && reason.response) {\n        reason.response.data = transformData.call(\n          config,\n          config.transformResponse,\n          reason.response\n        );\n        reason.response.headers = AxiosHeaders$1.from(reason.response.headers);\n      }\n    }\n\n    return Promise.reject(reason);\n  });\n}\n\nconst headersToObject = (thing) => thing instanceof AxiosHeaders$1 ? thing.toJSON() : thing;\n\n/**\n * Config-specific merge-function which creates a new config-object\n * by merging two configuration objects together.\n *\n * @param {Object} config1\n * @param {Object} config2\n *\n * @returns {Object} New object resulting from merging config2 to config1\n */\nfunction mergeConfig(config1, config2) {\n  // eslint-disable-next-line no-param-reassign\n  config2 = config2 || {};\n  const config = {};\n\n  function getMergedValue(target, source, caseless) {\n    if (utils.isPlainObject(target) && utils.isPlainObject(source)) {\n      return utils.merge.call({caseless}, target, source);\n    } else if (utils.isPlainObject(source)) {\n      return utils.merge({}, source);\n    } else if (utils.isArray(source)) {\n      return source.slice();\n    }\n    return source;\n  }\n\n  // eslint-disable-next-line consistent-return\n  function mergeDeepProperties(a, b, caseless) {\n    if (!utils.isUndefined(b)) {\n      return getMergedValue(a, b, caseless);\n    } else if (!utils.isUndefined(a)) {\n      return getMergedValue(undefined, a, caseless);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function valueFromConfig2(a, b) {\n    if (!utils.isUndefined(b)) {\n      return getMergedValue(undefined, b);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function defaultToConfig2(a, b) {\n    if (!utils.isUndefined(b)) {\n      return getMergedValue(undefined, b);\n    } else if (!utils.isUndefined(a)) {\n      return getMergedValue(undefined, a);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function mergeDirectKeys(a, b, prop) {\n    if (prop in config2) {\n      return getMergedValue(a, b);\n    } else if (prop in config1) {\n      return getMergedValue(undefined, a);\n    }\n  }\n\n  const mergeMap = {\n    url: valueFromConfig2,\n    method: valueFromConfig2,\n    data: valueFromConfig2,\n    baseURL: defaultToConfig2,\n    transformRequest: defaultToConfig2,\n    transformResponse: defaultToConfig2,\n    paramsSerializer: defaultToConfig2,\n    timeout: defaultToConfig2,\n    timeoutMessage: defaultToConfig2,\n    withCredentials: defaultToConfig2,\n    adapter: defaultToConfig2,\n    responseType: defaultToConfig2,\n    xsrfCookieName: defaultToConfig2,\n    xsrfHeaderName: defaultToConfig2,\n    onUploadProgress: defaultToConfig2,\n    onDownloadProgress: defaultToConfig2,\n    decompress: defaultToConfig2,\n    maxContentLength: defaultToConfig2,\n    maxBodyLength: defaultToConfig2,\n    beforeRedirect: defaultToConfig2,\n    transport: defaultToConfig2,\n    httpAgent: defaultToConfig2,\n    httpsAgent: defaultToConfig2,\n    cancelToken: defaultToConfig2,\n    socketPath: defaultToConfig2,\n    responseEncoding: defaultToConfig2,\n    validateStatus: mergeDirectKeys,\n    headers: (a, b) => mergeDeepProperties(headersToObject(a), headersToObject(b), true)\n  };\n\n  utils.forEach(Object.keys(Object.assign({}, config1, config2)), function computeConfigValue(prop) {\n    const merge = mergeMap[prop] || mergeDeepProperties;\n    const configValue = merge(config1[prop], config2[prop], prop);\n    (utils.isUndefined(configValue) && merge !== mergeDirectKeys) || (config[prop] = configValue);\n  });\n\n  return config;\n}\n\nconst VERSION = \"1.4.0\";\n\nconst validators$1 = {};\n\n// eslint-disable-next-line func-names\n['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach((type, i) => {\n  validators$1[type] = function validator(thing) {\n    return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;\n  };\n});\n\nconst deprecatedWarnings = {};\n\n/**\n * Transitional option validator\n *\n * @param {function|boolean?} validator - set to false if the transitional option has been removed\n * @param {string?} version - deprecated version / removed since version\n * @param {string?} message - some message with additional info\n *\n * @returns {function}\n */\nvalidators$1.transitional = function transitional(validator, version, message) {\n  function formatMessage(opt, desc) {\n    return '[Axios v' + VERSION + '] Transitional option \\'' + opt + '\\'' + desc + (message ? '. ' + message : '');\n  }\n\n  // eslint-disable-next-line func-names\n  return (value, opt, opts) => {\n    if (validator === false) {\n      throw new AxiosError(\n        formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')),\n        AxiosError.ERR_DEPRECATED\n      );\n    }\n\n    if (version && !deprecatedWarnings[opt]) {\n      deprecatedWarnings[opt] = true;\n      // eslint-disable-next-line no-console\n      console.warn(\n        formatMessage(\n          opt,\n          ' has been deprecated since v' + version + ' and will be removed in the near future'\n        )\n      );\n    }\n\n    return validator ? validator(value, opt, opts) : true;\n  };\n};\n\n/**\n * Assert object's properties type\n *\n * @param {object} options\n * @param {object} schema\n * @param {boolean?} allowUnknown\n *\n * @returns {object}\n */\n\nfunction assertOptions(options, schema, allowUnknown) {\n  if (typeof options !== 'object') {\n    throw new AxiosError('options must be an object', AxiosError.ERR_BAD_OPTION_VALUE);\n  }\n  const keys = Object.keys(options);\n  let i = keys.length;\n  while (i-- > 0) {\n    const opt = keys[i];\n    const validator = schema[opt];\n    if (validator) {\n      const value = options[opt];\n      const result = value === undefined || validator(value, opt, options);\n      if (result !== true) {\n        throw new AxiosError('option ' + opt + ' must be ' + result, AxiosError.ERR_BAD_OPTION_VALUE);\n      }\n      continue;\n    }\n    if (allowUnknown !== true) {\n      throw new AxiosError('Unknown option ' + opt, AxiosError.ERR_BAD_OPTION);\n    }\n  }\n}\n\nvar validator = {\n  assertOptions,\n  validators: validators$1\n};\n\nconst validators = validator.validators;\n\n/**\n * Create a new instance of Axios\n *\n * @param {Object} instanceConfig The default config for the instance\n *\n * @return {Axios} A new instance of Axios\n */\nclass Axios {\n  constructor(instanceConfig) {\n    this.defaults = instanceConfig;\n    this.interceptors = {\n      request: new InterceptorManager$1(),\n      response: new InterceptorManager$1()\n    };\n  }\n\n  /**\n   * Dispatch a request\n   *\n   * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)\n   * @param {?Object} config\n   *\n   * @returns {Promise} The Promise to be fulfilled\n   */\n  request(configOrUrl, config) {\n    /*eslint no-param-reassign:0*/\n    // Allow for axios('example/url'[, config]) a la fetch API\n    if (typeof configOrUrl === 'string') {\n      config = config || {};\n      config.url = configOrUrl;\n    } else {\n      config = configOrUrl || {};\n    }\n\n    config = mergeConfig(this.defaults, config);\n\n    const {transitional, paramsSerializer, headers} = config;\n\n    if (transitional !== undefined) {\n      validator.assertOptions(transitional, {\n        silentJSONParsing: validators.transitional(validators.boolean),\n        forcedJSONParsing: validators.transitional(validators.boolean),\n        clarifyTimeoutError: validators.transitional(validators.boolean)\n      }, false);\n    }\n\n    if (paramsSerializer != null) {\n      if (utils.isFunction(paramsSerializer)) {\n        config.paramsSerializer = {\n          serialize: paramsSerializer\n        };\n      } else {\n        validator.assertOptions(paramsSerializer, {\n          encode: validators.function,\n          serialize: validators.function\n        }, true);\n      }\n    }\n\n    // Set config.method\n    config.method = (config.method || this.defaults.method || 'get').toLowerCase();\n\n    let contextHeaders;\n\n    // Flatten headers\n    contextHeaders = headers && utils.merge(\n      headers.common,\n      headers[config.method]\n    );\n\n    contextHeaders && utils.forEach(\n      ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],\n      (method) => {\n        delete headers[method];\n      }\n    );\n\n    config.headers = AxiosHeaders$1.concat(contextHeaders, headers);\n\n    // filter out skipped interceptors\n    const requestInterceptorChain = [];\n    let synchronousRequestInterceptors = true;\n    this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {\n      if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {\n        return;\n      }\n\n      synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;\n\n      requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);\n    });\n\n    const responseInterceptorChain = [];\n    this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {\n      responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);\n    });\n\n    let promise;\n    let i = 0;\n    let len;\n\n    if (!synchronousRequestInterceptors) {\n      const chain = [dispatchRequest.bind(this), undefined];\n      chain.unshift.apply(chain, requestInterceptorChain);\n      chain.push.apply(chain, responseInterceptorChain);\n      len = chain.length;\n\n      promise = Promise.resolve(config);\n\n      while (i < len) {\n        promise = promise.then(chain[i++], chain[i++]);\n      }\n\n      return promise;\n    }\n\n    len = requestInterceptorChain.length;\n\n    let newConfig = config;\n\n    i = 0;\n\n    while (i < len) {\n      const onFulfilled = requestInterceptorChain[i++];\n      const onRejected = requestInterceptorChain[i++];\n      try {\n        newConfig = onFulfilled(newConfig);\n      } catch (error) {\n        onRejected.call(this, error);\n        break;\n      }\n    }\n\n    try {\n      promise = dispatchRequest.call(this, newConfig);\n    } catch (error) {\n      return Promise.reject(error);\n    }\n\n    i = 0;\n    len = responseInterceptorChain.length;\n\n    while (i < len) {\n      promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);\n    }\n\n    return promise;\n  }\n\n  getUri(config) {\n    config = mergeConfig(this.defaults, config);\n    const fullPath = buildFullPath(config.baseURL, config.url);\n    return buildURL(fullPath, config.params, config.paramsSerializer);\n  }\n}\n\n// Provide aliases for supported request methods\nutils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, config) {\n    return this.request(mergeConfig(config || {}, {\n      method,\n      url,\n      data: (config || {}).data\n    }));\n  };\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  /*eslint func-names:0*/\n\n  function generateHTTPMethod(isForm) {\n    return function httpMethod(url, data, config) {\n      return this.request(mergeConfig(config || {}, {\n        method,\n        headers: isForm ? {\n          'Content-Type': 'multipart/form-data'\n        } : {},\n        url,\n        data\n      }));\n    };\n  }\n\n  Axios.prototype[method] = generateHTTPMethod();\n\n  Axios.prototype[method + 'Form'] = generateHTTPMethod(true);\n});\n\nvar Axios$1 = Axios;\n\n/**\n * A `CancelToken` is an object that can be used to request cancellation of an operation.\n *\n * @param {Function} executor The executor function.\n *\n * @returns {CancelToken}\n */\nclass CancelToken {\n  constructor(executor) {\n    if (typeof executor !== 'function') {\n      throw new TypeError('executor must be a function.');\n    }\n\n    let resolvePromise;\n\n    this.promise = new Promise(function promiseExecutor(resolve) {\n      resolvePromise = resolve;\n    });\n\n    const token = this;\n\n    // eslint-disable-next-line func-names\n    this.promise.then(cancel => {\n      if (!token._listeners) return;\n\n      let i = token._listeners.length;\n\n      while (i-- > 0) {\n        token._listeners[i](cancel);\n      }\n      token._listeners = null;\n    });\n\n    // eslint-disable-next-line func-names\n    this.promise.then = onfulfilled => {\n      let _resolve;\n      // eslint-disable-next-line func-names\n      const promise = new Promise(resolve => {\n        token.subscribe(resolve);\n        _resolve = resolve;\n      }).then(onfulfilled);\n\n      promise.cancel = function reject() {\n        token.unsubscribe(_resolve);\n      };\n\n      return promise;\n    };\n\n    executor(function cancel(message, config, request) {\n      if (token.reason) {\n        // Cancellation has already been requested\n        return;\n      }\n\n      token.reason = new CanceledError(message, config, request);\n      resolvePromise(token.reason);\n    });\n  }\n\n  /**\n   * Throws a `CanceledError` if cancellation has been requested.\n   */\n  throwIfRequested() {\n    if (this.reason) {\n      throw this.reason;\n    }\n  }\n\n  /**\n   * Subscribe to the cancel signal\n   */\n\n  subscribe(listener) {\n    if (this.reason) {\n      listener(this.reason);\n      return;\n    }\n\n    if (this._listeners) {\n      this._listeners.push(listener);\n    } else {\n      this._listeners = [listener];\n    }\n  }\n\n  /**\n   * Unsubscribe from the cancel signal\n   */\n\n  unsubscribe(listener) {\n    if (!this._listeners) {\n      return;\n    }\n    const index = this._listeners.indexOf(listener);\n    if (index !== -1) {\n      this._listeners.splice(index, 1);\n    }\n  }\n\n  /**\n   * Returns an object that contains a new `CancelToken` and a function that, when called,\n   * cancels the `CancelToken`.\n   */\n  static source() {\n    let cancel;\n    const token = new CancelToken(function executor(c) {\n      cancel = c;\n    });\n    return {\n      token,\n      cancel\n    };\n  }\n}\n\nvar CancelToken$1 = CancelToken;\n\n/**\n * Syntactic sugar for invoking a function and expanding an array for arguments.\n *\n * Common use case would be to use `Function.prototype.apply`.\n *\n *  ```js\n *  function f(x, y, z) {}\n *  var args = [1, 2, 3];\n *  f.apply(null, args);\n *  ```\n *\n * With `spread` this example can be re-written.\n *\n *  ```js\n *  spread(function(x, y, z) {})([1, 2, 3]);\n *  ```\n *\n * @param {Function} callback\n *\n * @returns {Function}\n */\nfunction spread(callback) {\n  return function wrap(arr) {\n    return callback.apply(null, arr);\n  };\n}\n\n/**\n * Determines whether the payload is an error thrown by Axios\n *\n * @param {*} payload The value to test\n *\n * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false\n */\nfunction isAxiosError(payload) {\n  return utils.isObject(payload) && (payload.isAxiosError === true);\n}\n\nconst HttpStatusCode = {\n  Continue: 100,\n  SwitchingProtocols: 101,\n  Processing: 102,\n  EarlyHints: 103,\n  Ok: 200,\n  Created: 201,\n  Accepted: 202,\n  NonAuthoritativeInformation: 203,\n  NoContent: 204,\n  ResetContent: 205,\n  PartialContent: 206,\n  MultiStatus: 207,\n  AlreadyReported: 208,\n  ImUsed: 226,\n  MultipleChoices: 300,\n  MovedPermanently: 301,\n  Found: 302,\n  SeeOther: 303,\n  NotModified: 304,\n  UseProxy: 305,\n  Unused: 306,\n  TemporaryRedirect: 307,\n  PermanentRedirect: 308,\n  BadRequest: 400,\n  Unauthorized: 401,\n  PaymentRequired: 402,\n  Forbidden: 403,\n  NotFound: 404,\n  MethodNotAllowed: 405,\n  NotAcceptable: 406,\n  ProxyAuthenticationRequired: 407,\n  RequestTimeout: 408,\n  Conflict: 409,\n  Gone: 410,\n  LengthRequired: 411,\n  PreconditionFailed: 412,\n  PayloadTooLarge: 413,\n  UriTooLong: 414,\n  UnsupportedMediaType: 415,\n  RangeNotSatisfiable: 416,\n  ExpectationFailed: 417,\n  ImATeapot: 418,\n  MisdirectedRequest: 421,\n  UnprocessableEntity: 422,\n  Locked: 423,\n  FailedDependency: 424,\n  TooEarly: 425,\n  UpgradeRequired: 426,\n  PreconditionRequired: 428,\n  TooManyRequests: 429,\n  RequestHeaderFieldsTooLarge: 431,\n  UnavailableForLegalReasons: 451,\n  InternalServerError: 500,\n  NotImplemented: 501,\n  BadGateway: 502,\n  ServiceUnavailable: 503,\n  GatewayTimeout: 504,\n  HttpVersionNotSupported: 505,\n  VariantAlsoNegotiates: 506,\n  InsufficientStorage: 507,\n  LoopDetected: 508,\n  NotExtended: 510,\n  NetworkAuthenticationRequired: 511,\n};\n\nObject.entries(HttpStatusCode).forEach(([key, value]) => {\n  HttpStatusCode[value] = key;\n});\n\nvar HttpStatusCode$1 = HttpStatusCode;\n\n/**\n * Create an instance of Axios\n *\n * @param {Object} defaultConfig The default config for the instance\n *\n * @returns {Axios} A new instance of Axios\n */\nfunction createInstance(defaultConfig) {\n  const context = new Axios$1(defaultConfig);\n  const instance = bind(Axios$1.prototype.request, context);\n\n  // Copy axios.prototype to instance\n  utils.extend(instance, Axios$1.prototype, context, {allOwnKeys: true});\n\n  // Copy context to instance\n  utils.extend(instance, context, null, {allOwnKeys: true});\n\n  // Factory for creating new instances\n  instance.create = function create(instanceConfig) {\n    return createInstance(mergeConfig(defaultConfig, instanceConfig));\n  };\n\n  return instance;\n}\n\n// Create the default instance to be exported\nconst axios = createInstance(defaults$1);\n\n// Expose Axios class to allow class inheritance\naxios.Axios = Axios$1;\n\n// Expose Cancel & CancelToken\naxios.CanceledError = CanceledError;\naxios.CancelToken = CancelToken$1;\naxios.isCancel = isCancel;\naxios.VERSION = VERSION;\naxios.toFormData = toFormData;\n\n// Expose AxiosError class\naxios.AxiosError = AxiosError;\n\n// alias for CanceledError for backward compatibility\naxios.Cancel = axios.CanceledError;\n\n// Expose all/spread\naxios.all = function all(promises) {\n  return Promise.all(promises);\n};\n\naxios.spread = spread;\n\n// Expose isAxiosError\naxios.isAxiosError = isAxiosError;\n\n// Expose mergeConfig\naxios.mergeConfig = mergeConfig;\n\naxios.AxiosHeaders = AxiosHeaders$1;\n\naxios.formToJSON = thing => formDataToJSON(utils.isHTMLForm(thing) ? new FormData(thing) : thing);\n\naxios.HttpStatusCode = HttpStatusCode$1;\n\naxios.default = axios;\n\nmodule.exports = axios;\n//# sourceMappingURL=axios.cjs.map\n\n\n//# sourceURL=webpack://invisibles23/./node_modules/axios/dist/browser/axios.cjs?");

/***/ }),

/***/ "./node_modules/available-typed-arrays/index.js":
/*!******************************************************!*\
  !*** ./node_modules/available-typed-arrays/index.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar possibleNames = [\n\t'BigInt64Array',\n\t'BigUint64Array',\n\t'Float32Array',\n\t'Float64Array',\n\t'Int16Array',\n\t'Int32Array',\n\t'Int8Array',\n\t'Uint16Array',\n\t'Uint32Array',\n\t'Uint8Array',\n\t'Uint8ClampedArray'\n];\n\nvar g = typeof globalThis === 'undefined' ? __webpack_require__.g : globalThis;\n\nmodule.exports = function availableTypedArrays() {\n\tvar out = [];\n\tfor (var i = 0; i < possibleNames.length; i++) {\n\t\tif (typeof g[possibleNames[i]] === 'function') {\n\t\t\tout[out.length] = possibleNames[i];\n\t\t}\n\t}\n\treturn out;\n};\n\n\n//# sourceURL=webpack://invisibles23/./node_modules/available-typed-arrays/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/js/main.js");
/******/ 	
/******/ })()
;